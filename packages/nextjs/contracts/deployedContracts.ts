/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  11155111: {
    Funding: {
      address: "0x73a159fB3Dd537724244aCFFd1E76358AD265161",
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "roundId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "projectId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "address",
              name: "contributor",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "ContributionReceived",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "roundId",
              type: "uint256",
            },
          ],
          name: "RoundClosed",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "roundId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              indexed: false,
              internalType: "uint256[]",
              name: "projects",
              type: "uint256[]",
            },
          ],
          name: "RoundCreated",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "roundId",
              type: "uint256",
            },
          ],
          name: "closeFundingRound",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "roundId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "projectId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
            {
              internalType: "bytes32",
              name: "payloadHash",
              type: "bytes32",
            },
            {
              internalType: "string",
              name: "routingInfo",
              type: "string",
            },
            {
              components: [
                {
                  internalType: "bytes",
                  name: "user_key",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "user_pubkey",
                  type: "bytes",
                },
                {
                  internalType: "string",
                  name: "routing_code_hash",
                  type: "string",
                },
                {
                  internalType: "string",
                  name: "task_destination_network",
                  type: "string",
                },
                {
                  internalType: "string",
                  name: "handle",
                  type: "string",
                },
                {
                  internalType: "bytes12",
                  name: "nonce",
                  type: "bytes12",
                },
                {
                  internalType: "uint32",
                  name: "callback_gas_limit",
                  type: "uint32",
                },
                {
                  internalType: "bytes",
                  name: "payload",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "payload_signature",
                  type: "bytes",
                },
              ],
              internalType: "struct IGateway.ExecutionInfo",
              name: "info",
              type: "tuple",
            },
          ],
          name: "contribute",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
            {
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              internalType: "string",
              name: "description",
              type: "string",
            },
            {
              internalType: "uint256[]",
              name: "projectIds",
              type: "uint256[]",
            },
            {
              internalType: "string[]",
              name: "projectNames",
              type: "string[]",
            },
            {
              internalType: "string[]",
              name: "projectDescriptions",
              type: "string[]",
            },
            {
              internalType: "bytes32",
              name: "payloadHash",
              type: "bytes32",
            },
            {
              internalType: "string",
              name: "routingInfo",
              type: "string",
            },
            {
              components: [
                {
                  internalType: "bytes",
                  name: "user_key",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "user_pubkey",
                  type: "bytes",
                },
                {
                  internalType: "string",
                  name: "routing_code_hash",
                  type: "string",
                },
                {
                  internalType: "string",
                  name: "task_destination_network",
                  type: "string",
                },
                {
                  internalType: "string",
                  name: "handle",
                  type: "string",
                },
                {
                  internalType: "bytes12",
                  name: "nonce",
                  type: "bytes12",
                },
                {
                  internalType: "uint32",
                  name: "callback_gas_limit",
                  type: "uint32",
                },
                {
                  internalType: "bytes",
                  name: "payload",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "payload_signature",
                  type: "bytes",
                },
              ],
              internalType: "struct IGateway.ExecutionInfo",
              name: "info",
              type: "tuple",
            },
          ],
          name: "createFundingRound",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "fundingRounds",
          outputs: [
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
            {
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              internalType: "string",
              name: "description",
              type: "string",
            },
            {
              internalType: "bool",
              name: "isOpen",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "gatewayContract",
          outputs: [
            {
              internalType: "contract IGateway",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "roundIds",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
      ],
      inheritedFunctions: {},
    },
    YourContract: {
      address: "0x01e6da0691c7CeeF521AD850f29Ebf501007656b",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "_owner",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "greetingSetter",
              type: "address",
            },
            {
              indexed: false,
              internalType: "string",
              name: "newGreeting",
              type: "string",
            },
            {
              indexed: false,
              internalType: "bool",
              name: "premium",
              type: "bool",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
          ],
          name: "GreetingChange",
          type: "event",
        },
        {
          inputs: [],
          name: "greeting",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "premium",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_newGreeting",
              type: "string",
            },
          ],
          name: "setGreeting",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [],
          name: "totalCounter",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          name: "userGreetingCounter",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "withdraw",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          stateMutability: "payable",
          type: "receive",
        },
      ],
      inheritedFunctions: {},
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
