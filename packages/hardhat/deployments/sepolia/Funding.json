{
  "address": "0xA849cFd98E7a993332753b317ad7bDA9E30A5308",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ContributionReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        }
      ],
      "name": "RoundCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "closeFundingRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "enum Funding.FundingCurveType",
          "name": "curveType",
          "type": "uint8"
        },
        {
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "projectNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "projectDescriptions",
          "type": "string[]"
        },
        {
          "internalType": "address payable[]",
          "name": "projectAddresses",
          "type": "address[]"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "createFundingRound",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "exp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fundingRounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "enum Funding.FundingCurveType",
          "name": "curveType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "totalContributions",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayAddressSepolia",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayContract",
      "outputs": [
        {
          "internalType": "contract IGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x680ba5160a5f554e0446e2cd19b39e992aa01961880382605ded70e9619fa870",
  "receipt": {
    "to": null,
    "from": "0xbb1DF1ab33786Ac6B91d9D16b445c7b66825979e",
    "contractAddress": "0xA849cFd98E7a993332753b317ad7bDA9E30A5308",
    "transactionIndex": 100,
    "gasUsed": "2125971",
    "logsBloom": "0x
    "blockHash": "0x35616b7b58392e786b1f2c6d5a45ead78d499506076039300e76cfa79f31c270",
    "transactionHash": "0x680ba5160a5f554e0446e2cd19b39e992aa01961880382605ded70e9619fa870",
    "logs": [],
    "blockNumber": 5688407,
    "cumulativeGasUsed": "18507831",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "6beb9471be6d435d9fbc9dbd136443ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ContributionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"}],\"name\":\"RoundCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"closeFundingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum Funding.FundingCurveType\",\"name\":\"curveType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"projectNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"projectDescriptions\",\"type\":\"string[]\"},{\"internalType\":\"address payable[]\",\"name\":\"projectAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"createFundingRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"exp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundingRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum Funding.FundingCurveType\",\"name\":\"curveType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalContributions\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayAddressSepolia\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayContract\",\"outputs\":[{\"internalType\":\"contract IGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"arjanjohan\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A smart contract for cross-chain quadratic voting developed during EthDam 24. This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Funding.sol\":\"Funding\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"abdk-libraries-solidity/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (x << 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    unchecked {\\n      return int64 (x >> 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (int256 (x << 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    unchecked {\\n      require (x >= 0);\\n      return uint64 (uint128 (x >> 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = x >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    unchecked {\\n      return int256 (x) << 64;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) + y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) - y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) * y >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    unchecked {\\n      if (x == MIN_64x64) {\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\n        return -y << 63;\\n      } else {\\n        bool negativeResult = false;\\n        if (x < 0) {\\n          x = -x;\\n          negativeResult = true;\\n        }\\n        if (y < 0) {\\n          y = -y; // We rely on overflow behavior here\\n          negativeResult = !negativeResult;\\n        }\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\n        if (negativeResult) {\\n          require (absoluteResult <=\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n          require (absoluteResult <=\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n          return int256 (absoluteResult);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    unchecked {\\n      if (y == 0) return 0;\\n\\n      require (x >= 0);\\n\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\n\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      hi <<= 64;\\n\\n      require (hi <=\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n      return hi + lo;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      int256 result = (int256 (x) << 64) / y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x; // We rely on overflow behavior here\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      uint128 result = divuu (x, y);\\n      require (result <= uint128 (MAX_64x64));\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return -x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return x < 0 ? -x : x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != 0);\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 m = int256 (x) * int256 (y);\\n      require (m >= 0);\\n      require (m <\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\n      return int128 (sqrtu (uint256 (m)));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      bool negative = x < 0 && y & 1 == 1;\\n\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\n      uint256 absResult;\\n      absResult = 0x100000000000000000000000000000000;\\n\\n      if (absX <= 0x10000000000000000) {\\n        absX <<= 63;\\n        while (y != 0) {\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x2 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x4 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x8 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          y >>= 4;\\n        }\\n\\n        absResult >>= 64;\\n      } else {\\n        uint256 absXShift = 63;\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n        uint256 resultShift = 0;\\n        while (y != 0) {\\n          require (absXShift < 64);\\n\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n            resultShift += absXShift;\\n            if (absResult > 0x100000000000000000000000000000000) {\\n              absResult >>= 1;\\n              resultShift += 1;\\n            }\\n          }\\n          absX = absX * absX >> 127;\\n          absXShift <<= 1;\\n          if (absX >= 0x100000000000000000000000000000000) {\\n              absX >>= 1;\\n              absXShift += 1;\\n          }\\n\\n          y >>= 1;\\n        }\\n\\n        require (resultShift < 64);\\n        absResult >>= 64 - resultShift;\\n      }\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= 0);\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      int256 msb = 0;\\n      int256 xc = x;\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 result = msb - 64 << 64;\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n        ux *= ux;\\n        uint256 b = ux >> 255;\\n        ux >>= 127 + b;\\n        result += bit * int256 (b);\\n      }\\n\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      return int128 (int256 (\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n\\n      if (x & 0x8000000000000000 > 0)\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n      if (x & 0x4000000000000000 > 0)\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n      if (x & 0x2000000000000000 > 0)\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n      if (x & 0x1000000000000000 > 0)\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n      if (x & 0x800000000000000 > 0)\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n      if (x & 0x400000000000000 > 0)\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n      if (x & 0x200000000000000 > 0)\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n      if (x & 0x100000000000000 > 0)\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n      if (x & 0x80000000000000 > 0)\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n      if (x & 0x40000000000000 > 0)\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n      if (x & 0x20000000000000 > 0)\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n      if (x & 0x10000000000000 > 0)\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n      if (x & 0x8000000000000 > 0)\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n      if (x & 0x4000000000000 > 0)\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n      if (x & 0x2000000000000 > 0)\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n      if (x & 0x1000000000000 > 0)\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n      if (x & 0x800000000000 > 0)\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n      if (x & 0x400000000000 > 0)\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n      if (x & 0x200000000000 > 0)\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n      if (x & 0x100000000000 > 0)\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n      if (x & 0x80000000000 > 0)\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n      if (x & 0x40000000000 > 0)\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n      if (x & 0x20000000000 > 0)\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n      if (x & 0x10000000000 > 0)\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n      if (x & 0x8000000000 > 0)\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n      if (x & 0x4000000000 > 0)\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n      if (x & 0x2000000000 > 0)\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n      if (x & 0x1000000000 > 0)\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n      if (x & 0x800000000 > 0)\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n      if (x & 0x400000000 > 0)\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n      if (x & 0x200000000 > 0)\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n      if (x & 0x100000000 > 0)\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n      if (x & 0x80000000 > 0)\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n      if (x & 0x40000000 > 0)\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n      if (x & 0x20000000 > 0)\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n      if (x & 0x10000000 > 0)\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n      if (x & 0x8000000 > 0)\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n      if (x & 0x4000000 > 0)\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n      if (x & 0x2000000 > 0)\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n      if (x & 0x1000000 > 0)\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n      if (x & 0x800000 > 0)\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n      if (x & 0x400000 > 0)\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n      if (x & 0x200000 > 0)\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n      if (x & 0x100000 > 0)\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n      if (x & 0x80000 > 0)\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n      if (x & 0x40000 > 0)\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n      if (x & 0x20000 > 0)\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n      if (x & 0x10000 > 0)\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n      if (x & 0x8000 > 0)\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n      if (x & 0x4000 > 0)\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n      if (x & 0x2000 > 0)\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n      if (x & 0x1000 > 0)\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n      if (x & 0x800 > 0)\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n      if (x & 0x400 > 0)\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n      if (x & 0x200 > 0)\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n      if (x & 0x100 > 0)\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n      if (x & 0x80 > 0)\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n      if (x & 0x40 > 0)\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n      if (x & 0x20 > 0)\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n      if (x & 0x10 > 0)\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n      if (x & 0x8 > 0)\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n      if (x & 0x4 > 0)\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n      if (x & 0x2 > 0)\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n      if (x & 0x1 > 0)\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\n      require (result <= uint256 (int256 (MAX_64x64)));\\n\\n      return int128 (int256 (result));\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      return exp_2 (\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      uint256 result;\\n\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        result = (x << 64) / y;\\n      else {\\n        uint256 msb = 192;\\n        uint256 xc = x >> 192;\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 hi = result * (y >> 128);\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 xh = x >> 192;\\n        uint256 xl = x << 64;\\n\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n        lo = hi << 128;\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n\\n        result += xh == hi >> 128 ? xl / y : 1;\\n      }\\n\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return uint128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    unchecked {\\n      if (x == 0) return 0;\\n      else {\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n        if (xx >= 0x4) { r <<= 1; }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return uint128 (r < r1 ? r : r1);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1364fdc24192b982f647c7fc68dcb2f6fc1b5e201843e773144bd23a76cb3b97\",\"license\":\"BSD-4-Clause\"},\"contracts/Funding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\nimport \\\"../interfaces/IGateway.sol\\\";\\n\\n/**\\n * A smart contract for cross-chain quadratic voting developed during EthDam 24.\\n * This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.\\n * @author arjanjohan\\n */\\ncontract Funding {\\n\\t// ========================================\\n\\t//     ENUM, STRUCTS AND MAPPINGS\\n\\t// ========================================\\n\\n\\tenum FundingCurveType {\\n\\t\\tQuadratic,\\n\\t\\tLinear,\\n\\t\\tExponential\\n\\t}\\n\\tstruct Project {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\taddress payable projectAddress;\\n\\t\\tuint256 totalContributions;\\n\\t\\tuint256 totalSquareRoots;\\n\\t}\\n\\n\\tstruct FundingRound {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\tFundingCurveType curveType;\\n\\t\\tmapping(uint256 => Project) projects;\\n\\t\\tuint256[] projectIds;\\n\\t\\tuint256 totalContributions;\\n\\t\\tbool isOpen;\\n\\t}\\n\\n\\tmapping(uint256 => FundingRound) public fundingRounds;\\n\\tuint256[] public roundIds;\\n\\n\\t// ========================================\\n\\t//     CONSTRUCTOR AND VALUES\\n\\t// ========================================\\n\\n\\tIGateway public gatewayContract;\\n\\taddress public gatewayAddressSepolia =\\n\\t\\taddress(0x3879E146140b627a5C858a08e507B171D9E43139);\\n\\n\\tconstructor() {\\n\\t\\tgatewayContract = IGateway(gatewayAddressSepolia);\\n\\t}\\n\\n\\t// ========================================\\n\\t//     EVENTS\\n\\t// ========================================\\n\\tevent RoundCreated(\\n\\t\\tuint256 indexed roundId,\\n\\t\\tstring name,\\n\\t\\tuint256[] projectIds\\n\\t);\\n\\tevent ContributionReceived(\\n\\t\\taddress indexed contributor,\\n\\t\\tuint256 indexed roundId,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent RoundClosed(uint256 indexed roundId);\\n\\n\\t// ========================================\\n\\t//     CORE FUNCTIONS\\n\\t// ========================================\\n\\n\\tfunction createFundingRound(\\n\\t\\tuint256 id,\\n\\t\\tstring memory name,\\n\\t\\tstring memory description,\\n\\t\\tFundingCurveType curveType,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\tvalidateProjectParameters(\\n\\t\\t\\tprojectIds,\\n\\t\\t\\tprojectNames,\\n\\t\\t\\tprojectDescriptions,\\n\\t\\t\\tprojectAddresses\\n\\t\\t);\\n\\t\\trequire(fundingRounds[id].id == 0, \\\"Round ID exists\\\");\\n\\n\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\tpayloadHash,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\troutingInfo,\\n\\t\\t\\tinfo\\n\\t\\t);\\n\\n\\t\\tFundingRound storage round = fundingRounds[id];\\n\\t\\tsetupFundingRound(\\n\\t\\t\\tround,\\n\\t\\t\\tid,\\n\\t\\t\\tname,\\n\\t\\t\\tdescription,\\n\\t\\t\\tcurveType,\\n\\t\\t\\tprojectIds,\\n\\t\\t\\tprojectNames,\\n\\t\\t\\tprojectDescriptions,\\n\\t\\t\\tprojectAddresses\\n\\t\\t);\\n\\t\\troundIds.push(id);\\n\\t\\temit RoundCreated(id, name, projectIds);\\n\\t}\\n\\n\\tfunction contribute(\\n\\t\\tuint256 roundId,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\trequire(validRound(roundId), \\\"Invalid round\\\");\\n\\t\\tuint256 totalContributed = processContributions(\\n\\t\\t\\troundId,\\n\\t\\t\\tprojectIds,\\n\\t\\t\\tamounts\\n\\t\\t);\\n\\t\\trequire(msg.value >= totalContributed, \\\"Insufficient funds\\\");\\n\\t\\tfinalizeContribution(\\n\\t\\t\\troundId,\\n\\t\\t\\tmsg.value - totalContributed,\\n\\t\\t\\tpayloadHash,\\n\\t\\t\\troutingInfo,\\n\\t\\t\\tinfo\\n\\t\\t);\\n\\t}\\n\\n\\tfunction closeFundingRound(uint256 roundId) public {\\n\\t\\trequire(fundingRounds[roundId].isOpen, \\\"Round closed\\\");\\n\\t\\tfundingRounds[roundId].isOpen = false;\\n\\t\\tdistributeFunds(roundId);\\n\\t\\temit RoundClosed(roundId);\\n\\t}\\n\\n\\t// ========================================\\n\\t//     HELPER FUNCTIONS\\n\\t// ========================================\\n\\n\\tfunction validateProjectParameters(\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses\\n\\t) private pure {\\n\\t\\trequire(\\n\\t\\t\\tprojectIds.length == projectNames.length &&\\n\\t\\t\\t\\tprojectNames.length == projectDescriptions.length &&\\n\\t\\t\\t\\tprojectDescriptions.length == projectAddresses.length,\\n\\t\\t\\t\\\"Mismatched input arrays\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setupFundingRound(\\n\\t\\tFundingRound storage round,\\n\\t\\tuint256 id,\\n\\t\\tstring memory name,\\n\\t\\tstring memory description,\\n\\t\\tFundingCurveType curveType,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses\\n\\t) private {\\n\\t\\tround.id = id;\\n\\t\\tround.name = name;\\n\\t\\tround.description = description;\\n\\t\\tround.curveType = curveType;\\n\\t\\tround.isOpen = true;\\n\\n\\t\\tfor (uint256 i = 0; i < projectIds.length; i++) {\\n\\t\\t\\trequire(round.projects[projectIds[i]].id == 0, \\\"Project ID exists\\\");\\n\\t\\t\\tround.projects[projectIds[i]] = Project({\\n\\t\\t\\t\\tid: projectIds[i],\\n\\t\\t\\t\\tname: projectNames[i],\\n\\t\\t\\t\\tdescription: projectDescriptions[i],\\n\\t\\t\\t\\tprojectAddress: projectAddresses[i],\\n\\t\\t\\t\\ttotalContributions: 0,\\n\\t\\t\\t\\ttotalSquareRoots: 0\\n\\t\\t\\t});\\n\\t\\t\\tround.projectIds.push(projectIds[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction validRound(uint256 roundId) private view returns (bool) {\\n\\t\\treturn fundingRounds[roundId].isOpen && fundingRounds[roundId].id != 0;\\n\\t}\\n\\n\\tfunction processContributions(\\n\\t\\tuint256 roundId,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tuint256[] memory amounts\\n\\t) private returns (uint256 totalContributed) {\\n\\t\\tfor (uint256 i = 0; i < amounts.length; i++) {\\n\\t\\t\\tProject storage project = fundingRounds[roundId].projects[\\n\\t\\t\\t\\tprojectIds[i]\\n\\t\\t\\t];\\n\\t\\t\\trequire(project.id != 0, \\\"Project not found\\\");\\n\\t\\t\\tif (\\n\\t\\t\\t\\tfundingRounds[roundId].curveType == FundingCurveType.Quadratic\\n\\t\\t\\t) {\\n\\t\\t\\t\\tproject.totalSquareRoots += sqrt(amounts[i]);\\n\\t\\t\\t} else if (\\n\\t\\t\\t\\tfundingRounds[roundId].curveType == FundingCurveType.Linear\\n\\t\\t\\t) {\\n\\t\\t\\t\\tproject.totalContributions += amounts[i];\\n\\t\\t\\t} else if (\\n\\t\\t\\t\\tfundingRounds[roundId].curveType == FundingCurveType.Exponential\\n\\t\\t\\t) {\\n\\t\\t\\t\\tproject.totalSquareRoots += exp(amounts[i]);\\n\\t\\t\\t}\\n\\t\\t\\ttotalContributed += amounts[i];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction finalizeContribution(\\n\\t\\tuint256 roundId,\\n\\t\\tuint256 remainingFunds,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) private {\\n\\t\\tgatewayContract.send{ value: remainingFunds }(\\n\\t\\t\\tpayloadHash,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\troutingInfo,\\n\\t\\t\\tinfo\\n\\t\\t);\\n\\t\\temit ContributionReceived(msg.sender, roundId, remainingFunds);\\n\\t}\\n\\n\\tfunction distributeFunds(uint256 roundId) private {\\n\\t\\tuint256 totalFunds = fundingRounds[roundId].totalContributions;\\n\\t\\tfor (uint256 i = 0; i < fundingRounds[roundId].projectIds.length; i++) {\\n\\t\\t\\tProject storage project = fundingRounds[roundId].projects[\\n\\t\\t\\t\\tfundingRounds[roundId].projectIds[i]\\n\\t\\t\\t];\\n\\t\\t\\tuint256 payout = calculatePayout(\\n\\t\\t\\t\\tfundingRounds[roundId].curveType,\\n\\t\\t\\t\\tproject\\n\\t\\t\\t);\\n\\t\\t\\tproject.projectAddress.transfer(payout);\\n\\t\\t\\ttotalFunds -= payout;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction calculatePayout(\\n\\t\\tFundingCurveType curveType,\\n\\t\\tProject memory project\\n\\t) private pure returns (uint256) {\\n\\t\\tif (curveType == FundingCurveType.Quadratic) {\\n\\t\\t\\treturn project.totalSquareRoots * project.totalSquareRoots;\\n\\t\\t} else if (curveType == FundingCurveType.Linear) {\\n\\t\\t\\treturn project.totalContributions;\\n\\t\\t} else if (curveType == FundingCurveType.Exponential) {\\n\\t\\t\\treturn (exp(project.totalSquareRoots) - 1);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction sqrt(uint256 x) private pure returns (uint256 y) {\\n\\t\\tuint256 z = (x + 1) / 2;\\n\\t\\ty = x;\\n\\t\\twhile (z < y) {\\n\\t\\t\\ty = z;\\n\\t\\t\\tz = (x / z + z) / 2;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction exp(uint x) public pure returns (uint) {\\n\\t\\tint128 x_fixed = ABDKMath64x64.fromUInt(x);\\n\\t\\tint128 result_fixed = ABDKMath64x64.exp(x_fixed);\\n\\t\\treturn ABDKMath64x64.toUInt(result_fixed);\\n\\t}\\n}\\n\",\"keccak256\":\"0xf5f8025f6e8651e6035643e62443f60cad66c1a590cd51d7a3c87d2e360e4769\",\"license\":\"MIT\"},\"interfaces/IGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IGateway {\\n\\tstruct ExecutionInfo {\\n\\t\\tbytes user_key;\\n\\t\\tbytes user_pubkey;\\n\\t\\tstring routing_code_hash;\\n\\t\\tstring task_destination_network;\\n\\t\\tstring handle;\\n\\t\\tbytes12 nonce;\\n\\t\\tuint32 callback_gas_limit;\\n\\t\\tbytes payload;\\n\\t\\tbytes payload_signature;\\n\\t}\\n\\n\\tfunction send(\\n\\t\\tbytes32 _payloadHash,\\n\\t\\taddress _userAddress,\\n\\t\\tstring calldata _routingInfo,\\n\\t\\tExecutionInfo calldata _info\\n\\t) external payable;\\n}\\n\",\"keccak256\":\"0x0a9d680f18372c00a8e706f4656647edc7a3973a1d1974bf2a59fe319a3150ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600380546001600160a01b031916733879e146140b627a5c858a08e507b171d9e4313917905534801561003657600080fd5b50600354600280546001600160a01b0319166001600160a01b039092169190911790556124c5806100686000396000f3fe60806040526004361061007b5760003560e01c8063b581fbe31161004e578063b581fbe3146100fb578063c428a2781461011b578063c9640c091461014d578063eb0cde1d1461018557600080fd5b80630f79a090146100805780637dfa9ae61461009557806390a4cb9b146100a8578063a7e36ab5146100db575b600080fd5b61009361008e366004611b92565b6101a5565b005b6100936100a3366004611dca565b610264565b3480156100b457600080fd5b506100c86100c3366004611f6e565b6103ca565b6040519081526020015b60405180910390f35b3480156100e757600080fd5b506100936100f6366004611f6e565b6103eb565b34801561010757600080fd5b506100c8610116366004611f6e565b61048b565b34801561012757600080fd5b5061013b610136366004611f6e565b6104c0565b6040516100d296959493929190611fe3565b34801561015957600080fd5b5060035461016d906001600160a01b031681565b6040516001600160a01b0390911681526020016100d2565b34801561019157600080fd5b5060025461016d906001600160a01b031681565b6101ae8761060c565b6101ef5760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081c9bdd5b99609a1b60448201526064015b60405180910390fd5b60006101fc888888610640565b9050803410156102435760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b60448201526064016101e6565b61025a886102518334612064565b87878787610848565b5050505050505050565b610270888888886108f3565b60008c815260208190526040902054156102be5760405162461bcd60e51b815260206004820152600f60248201526e526f756e642049442065786973747360881b60448201526064016101e6565b6002546040516339624a6b60e21b81526001600160a01b039091169063e58929ac9034906102f89088903390899089908990600401612111565b6000604051808303818588803b15801561031157600080fd5b505af1158015610325573d6000803e3d6000fd5b50505060008e8152602081905260409020915061034b9050818e8e8e8e8e8e8e8e610964565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018d90556040518d907f2fceaf42a6664f3294222799a359650844542179732d12b26b6926bd338479a5906103b3908f908d9061227c565b60405180910390a250505050505050505050505050565b600181815481106103da57600080fd5b600091825260209091200154905081565b60008181526020819052604090206007015460ff1661043b5760405162461bcd60e51b815260206004820152600c60248201526b149bdd5b990818db1bdcd95960a21b60448201526064016101e6565b6000818152602081905260409020600701805460ff1916905561045d81610bcb565b60405181907fe9f7d7fd0b133404f0ccff737d6f3594748e04bc5507adfaed35835ef989371190600090a250565b60008061049783610e33565b905060006104a482610e51565b90506104af81610ea6565b6001600160401b0316949350505050565b600060208190529081526040902080546001820180549192916104e2906122d3565b80601f016020809104026020016040519081016040528092919081815260200182805461050e906122d3565b801561055b5780601f106105305761010080835404028352916020019161055b565b820191906000526020600020905b81548152906001019060200180831161053e57829003601f168201915b505050505090806002018054610570906122d3565b80601f016020809104026020016040519081016040528092919081815260200182805461059c906122d3565b80156105e95780601f106105be576101008083540402835291602001916105e9565b820191906000526020600020905b8154815290600101906020018083116105cc57829003601f168201915b5050505060038301546006840154600790940154929360ff918216939092501686565b60008181526020819052604081206007015460ff16801561063a575060008281526020819052604090205415155b92915050565b6000805b8251811015610840576000806000878152602001908152602001600020600401600086848151811061067857610678612307565b60200260200101518152602001908152602001600020905080600001546000036106d85760405162461bcd60e51b8152602060048201526011602482015270141c9bda9958dd081b9bdd08199bdd5b99607a1b60448201526064016101e6565b60008681526020819052604081206003015460ff1660028111156106fe576106fe611fcd565b036107435761072584838151811061071857610718612307565b6020026020010151610ec2565b816005016000828254610738919061231d565b909155506108059050565b600160008781526020819052604090206003015460ff16600281111561076b5761076b611fcd565b0361079d5783828151811061078257610782612307565b6020026020010151816004016000828254610738919061231d565b600260008781526020819052604090206003015460ff1660028111156107c5576107c5611fcd565b03610805576107ec8483815181106107df576107df612307565b602002602001015161048b565b8160050160008282546107ff919061231d565b90915550505b83828151811061081757610817612307565b60200260200101518361082a919061231d565b925050808061083890612330565b915050610644565b509392505050565b6002546040516339624a6b60e21b81526001600160a01b039091169063e58929ac9087906108829088903390899089908990600401612111565b6000604051808303818588803b15801561089b57600080fd5b505af11580156108af573d6000803e3d6000fd5b50506040518881528993503392507fd2dff949d20e874cc6ba1dcefb840fb8cf6000a4197bfb69accfea5a32443ff5915060200160405180910390a3505050505050565b82518451148015610905575081518351145b8015610912575080518251145b61095e5760405162461bcd60e51b815260206004820152601760248201527f4d69736d61746368656420696e7075742061727261797300000000000000000060448201526064016101e6565b50505050565b878955600189016109758882612397565b50600289016109848782612397565b5060038901805486919060ff191660018360028111156109a6576109a6611fcd565b021790555060078901805460ff1916600117905560005b8451811015610bbf578960040160008683815181106109de576109de612307565b6020026020010151815260200190815260200160002060000154600014610a3b5760405162461bcd60e51b815260206004820152601160248201527050726f6a6563742049442065786973747360781b60448201526064016101e6565b6040518060c00160405280868381518110610a5857610a58612307565b60200260200101518152602001858381518110610a7757610a77612307565b60200260200101518152602001848381518110610a9657610a96612307565b60200260200101518152602001838381518110610ab557610ab5612307565b60200260200101516001600160a01b031681526020016000815260200160008152508a6004016000878481518110610aef57610aef612307565b60200260200101518152602001908152602001600020600082015181600001556020820151816001019081610b249190612397565b5060408201516002820190610b399082612397565b5060608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080820151600482015560a0909101516005918201558551908b0190869083908110610b8e57610b8e612307565b6020908102919091018101518254600181018455600093845291909220015580610bb781612330565b9150506109bd565b50505050505050505050565b600081815260208190526040812060060154905b600083815260208190526040902060050154811015610e2e57600083815260208190526040812060058101805460049092019183919085908110610c2557610c25612307565b9060005260206000200154815260200190815260200160002090506000610dcf60008087815260200190815260200160002060030160009054906101000a900460ff16836040518060c001604052908160008201548152602001600182018054610c8e906122d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610cba906122d3565b8015610d075780601f10610cdc57610100808354040283529160200191610d07565b820191906000526020600020905b815481529060010190602001808311610cea57829003601f168201915b50505050508152602001600282018054610d20906122d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4c906122d3565b8015610d995780601f10610d6e57610100808354040283529160200191610d99565b820191906000526020600020905b815481529060010190602001808311610d7c57829003601f168201915b505050918352505060038201546001600160a01b0316602082015260048201546040820152600590910154606090910152610f1b565b60038301546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015610e0c573d6000803e3d6000fd5b50610e178185612064565b935050508080610e2690612330565b915050610bdf565b505050565b6000677fffffffffffffff821115610e4a57600080fd5b5060401b90565b6000600160461b82600f0b12610e6657600080fd5b683fffffffffffffffff1982600f0b1215610e8357506000919050565b61063a608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d610fa1565b60008082600f0b1215610eb857600080fd5b50600f0b60401d90565b6000806002610ed284600161231d565b610edc9190612456565b90508291505b81811015610f1557905080600281610efa8186612456565b610f04919061231d565b610f0e9190612456565b9050610ee2565b50919050565b600080836002811115610f3057610f30611fcd565b03610f4b5760a0820151610f449080612478565b905061063a565b6001836002811115610f5f57610f5f611fcd565b03610f6f5750608081015161063a565b6002836002811115610f8357610f83611fcd565b0361063a576001610f978360a0015161048b565b610f449190612064565b6000600160461b82600f0b12610fb657600080fd5b683fffffffffffffffff1982600f0b1215610fd357506000919050565b6001607f1b60006780000000000000008416600f0b13156110055770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315611032577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b131561105f577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b131561108c5770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b13156110b9577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b13156110e657700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b13156111135770010163da9fb33356d84a66ae336dcdfa3f0260801c5b60008367010000000000000016600f0b131561114057700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b131561116c5770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b1315611198577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b13156111c457700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b13156111f0577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b131561121c57700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b13156112485770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b1315611274577001000162e525ee054754457d59952920260260801c5b600083660100000000000016600f0b13156112a05770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b13156112cb577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b13156112f657700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b13156113215770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b131561134c57700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b13156113775770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b13156113a2577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b13156113cd57700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b13156113f8577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b131561142257700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b131561144c5770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b1315611476577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b13156114a05770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b13156114ca577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b13156114f457700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b131561151e5770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b131561154857700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b13156115715770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b131561159a577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b13156115c357700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b13156115ec577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b131561161557700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b131561163e5770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b1315611667577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b13156116905770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b13156116b8577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b13156116e057700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b13156117085770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b131561173057700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b13156117585770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315611780577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b13156117a857700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b13156117d0577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b13156117f757700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b131561181e5770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b1315611845577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b131561186c5770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315611893577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b13156118ba57700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b13156118e15770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b131561190857700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b131561192e5770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b1315611954577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b131561197a57700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b13156119a0577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b13156119c657700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b13156119ec5770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315611a12577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b1315611a385770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c6f7fffffffffffffffffffffffffffffff81111561063a57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611aa157611aa1611a63565b604052919050565b60006001600160401b03821115611ac257611ac2611a63565b5060051b60200190565b600082601f830112611add57600080fd5b81356020611af2611aed83611aa9565b611a79565b82815260059290921b84018101918181019086841115611b1157600080fd5b8286015b84811015611b2c5780358352918301918301611b15565b509695505050505050565b60008083601f840112611b4957600080fd5b5081356001600160401b03811115611b6057600080fd5b602083019150836020828501011115611b7857600080fd5b9250929050565b60006101208284031215610f1557600080fd5b600080600080600080600060c0888a031215611bad57600080fd5b8735965060208801356001600160401b0380821115611bcb57600080fd5b611bd78b838c01611acc565b975060408a0135915080821115611bed57600080fd5b611bf98b838c01611acc565b965060608a0135955060808a0135915080821115611c1657600080fd5b611c228b838c01611b37565b909550935060a08a0135915080821115611c3b57600080fd5b50611c488a828b01611b7f565b91505092959891949750929550565b600082601f830112611c6857600080fd5b81356001600160401b03811115611c8157611c81611a63565b611c94601f8201601f1916602001611a79565b818152846020838601011115611ca957600080fd5b816020850160208301376000918101602001919091529392505050565b803560038110611cd557600080fd5b919050565b600082601f830112611ceb57600080fd5b81356020611cfb611aed83611aa9565b82815260059290921b84018101918181019086841115611d1a57600080fd5b8286015b84811015611b2c5780356001600160401b03811115611d3d5760008081fd5b611d4b8986838b0101611c57565b845250918301918301611d1e565b600082601f830112611d6a57600080fd5b81356020611d7a611aed83611aa9565b82815260059290921b84018101918181019086841115611d9957600080fd5b8286015b84811015611b2c5780356001600160a01b0381168114611dbd5760008081fd5b8352918301918301611d9d565b6000806000806000806000806000806000806101608d8f031215611ded57600080fd5b8c359b506001600160401b0360208e01351115611e0957600080fd5b611e198e60208f01358f01611c57565b9a506001600160401b0360408e01351115611e3357600080fd5b611e438e60408f01358f01611c57565b9950611e5160608e01611cc6565b98506001600160401b0360808e01351115611e6b57600080fd5b611e7b8e60808f01358f01611acc565b97506001600160401b0360a08e01351115611e9557600080fd5b611ea58e60a08f01358f01611cda565b96506001600160401b0360c08e01351115611ebf57600080fd5b611ecf8e60c08f01358f01611cda565b95506001600160401b0360e08e01351115611ee957600080fd5b611ef98e60e08f01358f01611d59565b94506101008d013593506001600160401b036101208e01351115611f1c57600080fd5b611f2d8e6101208f01358f01611b37565b90935091506001600160401b036101408e01351115611f4b57600080fd5b611f5c8e6101408f01358f01611b7f565b90509295989b509295989b509295989b565b600060208284031215611f8057600080fd5b5035919050565b6000815180845260005b81811015611fad57602081850181015186830182015201611f91565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b86815260c060208201526000611ffc60c0830188611f87565b828103604084015261200e8188611f87565b9150506003851061202f57634e487b7160e01b600052602160045260246000fd5b84606083015283608083015282151560a0830152979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561063a5761063a61204e565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000808335601e198436030181126120b757600080fd5b83016020810192503590506001600160401b038111156120d657600080fd5b803603821315611b7857600080fd5b80356001600160a01b031981168114611cd557600080fd5b803563ffffffff81168114611cd557600080fd5b8581526001600160a01b038516602082015260806040820181905260009061213c9083018587612077565b828103606084015261012061215185866120a0565b8284526121618385018284612077565b9250505061217260208601866120a0565b8383036020850152612185838284612077565b9250505061219660408601866120a0565b83830360408501526121a9838284612077565b925050506121ba60608601866120a0565b83830360608501526121cd838284612077565b925050506121de60808601866120a0565b83830360808501526121f1838284612077565b9250505061220160a086016120e5565b6001600160a01b03191660a083015261221c60c086016120fd565b63ffffffff1660c083015261223460e08601866120a0565b83830360e0850152612247838284612077565b9250505061010061225a818701876120a0565b8484038386015261226c848284612077565b9c9b505050505050505050505050565b60408152600061228f6040830185611f87565b82810360208481019190915284518083528582019282019060005b818110156122c6578451835293830193918301916001016122aa565b5090979650505050505050565b600181811c908216806122e757607f821691505b602082108103610f1557634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8082018082111561063a5761063a61204e565b6000600182016123425761234261204e565b5060010190565b601f821115610e2e57600081815260208120601f850160051c810160208610156123705750805b601f850160051c820191505b8181101561238f5782815560010161237c565b505050505050565b81516001600160401b038111156123b0576123b0611a63565b6123c4816123be84546122d3565b84612349565b602080601f8311600181146123f957600084156123e15750858301515b600019600386901b1c1916600185901b17855561238f565b600085815260208120601f198616915b8281101561242857888601518255948401946001909101908401612409565b50858210156124465787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008261247357634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761063a5761063a61204e56fea2646970667358221220f65babea3bce5c3a2a4d497485be6f6ebef4953320ff4de5b951c3e884a8fbbd64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063b581fbe31161004e578063b581fbe3146100fb578063c428a2781461011b578063c9640c091461014d578063eb0cde1d1461018557600080fd5b80630f79a090146100805780637dfa9ae61461009557806390a4cb9b146100a8578063a7e36ab5146100db575b600080fd5b61009361008e366004611b92565b6101a5565b005b6100936100a3366004611dca565b610264565b3480156100b457600080fd5b506100c86100c3366004611f6e565b6103ca565b6040519081526020015b60405180910390f35b3480156100e757600080fd5b506100936100f6366004611f6e565b6103eb565b34801561010757600080fd5b506100c8610116366004611f6e565b61048b565b34801561012757600080fd5b5061013b610136366004611f6e565b6104c0565b6040516100d296959493929190611fe3565b34801561015957600080fd5b5060035461016d906001600160a01b031681565b6040516001600160a01b0390911681526020016100d2565b34801561019157600080fd5b5060025461016d906001600160a01b031681565b6101ae8761060c565b6101ef5760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081c9bdd5b99609a1b60448201526064015b60405180910390fd5b60006101fc888888610640565b9050803410156102435760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b60448201526064016101e6565b61025a886102518334612064565b87878787610848565b5050505050505050565b610270888888886108f3565b60008c815260208190526040902054156102be5760405162461bcd60e51b815260206004820152600f60248201526e526f756e642049442065786973747360881b60448201526064016101e6565b6002546040516339624a6b60e21b81526001600160a01b039091169063e58929ac9034906102f89088903390899089908990600401612111565b6000604051808303818588803b15801561031157600080fd5b505af1158015610325573d6000803e3d6000fd5b50505060008e8152602081905260409020915061034b9050818e8e8e8e8e8e8e8e610964565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018d90556040518d907f2fceaf42a6664f3294222799a359650844542179732d12b26b6926bd338479a5906103b3908f908d9061227c565b60405180910390a250505050505050505050505050565b600181815481106103da57600080fd5b600091825260209091200154905081565b60008181526020819052604090206007015460ff1661043b5760405162461bcd60e51b815260206004820152600c60248201526b149bdd5b990818db1bdcd95960a21b60448201526064016101e6565b6000818152602081905260409020600701805460ff1916905561045d81610bcb565b60405181907fe9f7d7fd0b133404f0ccff737d6f3594748e04bc5507adfaed35835ef989371190600090a250565b60008061049783610e33565b905060006104a482610e51565b90506104af81610ea6565b6001600160401b0316949350505050565b600060208190529081526040902080546001820180549192916104e2906122d3565b80601f016020809104026020016040519081016040528092919081815260200182805461050e906122d3565b801561055b5780601f106105305761010080835404028352916020019161055b565b820191906000526020600020905b81548152906001019060200180831161053e57829003601f168201915b505050505090806002018054610570906122d3565b80601f016020809104026020016040519081016040528092919081815260200182805461059c906122d3565b80156105e95780601f106105be576101008083540402835291602001916105e9565b820191906000526020600020905b8154815290600101906020018083116105cc57829003601f168201915b5050505060038301546006840154600790940154929360ff918216939092501686565b60008181526020819052604081206007015460ff16801561063a575060008281526020819052604090205415155b92915050565b6000805b8251811015610840576000806000878152602001908152602001600020600401600086848151811061067857610678612307565b60200260200101518152602001908152602001600020905080600001546000036106d85760405162461bcd60e51b8152602060048201526011602482015270141c9bda9958dd081b9bdd08199bdd5b99607a1b60448201526064016101e6565b60008681526020819052604081206003015460ff1660028111156106fe576106fe611fcd565b036107435761072584838151811061071857610718612307565b6020026020010151610ec2565b816005016000828254610738919061231d565b909155506108059050565b600160008781526020819052604090206003015460ff16600281111561076b5761076b611fcd565b0361079d5783828151811061078257610782612307565b6020026020010151816004016000828254610738919061231d565b600260008781526020819052604090206003015460ff1660028111156107c5576107c5611fcd565b03610805576107ec8483815181106107df576107df612307565b602002602001015161048b565b8160050160008282546107ff919061231d565b90915550505b83828151811061081757610817612307565b60200260200101518361082a919061231d565b925050808061083890612330565b915050610644565b509392505050565b6002546040516339624a6b60e21b81526001600160a01b039091169063e58929ac9087906108829088903390899089908990600401612111565b6000604051808303818588803b15801561089b57600080fd5b505af11580156108af573d6000803e3d6000fd5b50506040518881528993503392507fd2dff949d20e874cc6ba1dcefb840fb8cf6000a4197bfb69accfea5a32443ff5915060200160405180910390a3505050505050565b82518451148015610905575081518351145b8015610912575080518251145b61095e5760405162461bcd60e51b815260206004820152601760248201527f4d69736d61746368656420696e7075742061727261797300000000000000000060448201526064016101e6565b50505050565b878955600189016109758882612397565b50600289016109848782612397565b5060038901805486919060ff191660018360028111156109a6576109a6611fcd565b021790555060078901805460ff1916600117905560005b8451811015610bbf578960040160008683815181106109de576109de612307565b6020026020010151815260200190815260200160002060000154600014610a3b5760405162461bcd60e51b815260206004820152601160248201527050726f6a6563742049442065786973747360781b60448201526064016101e6565b6040518060c00160405280868381518110610a5857610a58612307565b60200260200101518152602001858381518110610a7757610a77612307565b60200260200101518152602001848381518110610a9657610a96612307565b60200260200101518152602001838381518110610ab557610ab5612307565b60200260200101516001600160a01b031681526020016000815260200160008152508a6004016000878481518110610aef57610aef612307565b60200260200101518152602001908152602001600020600082015181600001556020820151816001019081610b249190612397565b5060408201516002820190610b399082612397565b5060608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080820151600482015560a0909101516005918201558551908b0190869083908110610b8e57610b8e612307565b6020908102919091018101518254600181018455600093845291909220015580610bb781612330565b9150506109bd565b50505050505050505050565b600081815260208190526040812060060154905b600083815260208190526040902060050154811015610e2e57600083815260208190526040812060058101805460049092019183919085908110610c2557610c25612307565b9060005260206000200154815260200190815260200160002090506000610dcf60008087815260200190815260200160002060030160009054906101000a900460ff16836040518060c001604052908160008201548152602001600182018054610c8e906122d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610cba906122d3565b8015610d075780601f10610cdc57610100808354040283529160200191610d07565b820191906000526020600020905b815481529060010190602001808311610cea57829003601f168201915b50505050508152602001600282018054610d20906122d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4c906122d3565b8015610d995780601f10610d6e57610100808354040283529160200191610d99565b820191906000526020600020905b815481529060010190602001808311610d7c57829003601f168201915b505050918352505060038201546001600160a01b0316602082015260048201546040820152600590910154606090910152610f1b565b60038301546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015610e0c573d6000803e3d6000fd5b50610e178185612064565b935050508080610e2690612330565b915050610bdf565b505050565b6000677fffffffffffffff821115610e4a57600080fd5b5060401b90565b6000600160461b82600f0b12610e6657600080fd5b683fffffffffffffffff1982600f0b1215610e8357506000919050565b61063a608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d610fa1565b60008082600f0b1215610eb857600080fd5b50600f0b60401d90565b6000806002610ed284600161231d565b610edc9190612456565b90508291505b81811015610f1557905080600281610efa8186612456565b610f04919061231d565b610f0e9190612456565b9050610ee2565b50919050565b600080836002811115610f3057610f30611fcd565b03610f4b5760a0820151610f449080612478565b905061063a565b6001836002811115610f5f57610f5f611fcd565b03610f6f5750608081015161063a565b6002836002811115610f8357610f83611fcd565b0361063a576001610f978360a0015161048b565b610f449190612064565b6000600160461b82600f0b12610fb657600080fd5b683fffffffffffffffff1982600f0b1215610fd357506000919050565b6001607f1b60006780000000000000008416600f0b13156110055770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315611032577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b131561105f577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b131561108c5770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b13156110b9577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b13156110e657700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b13156111135770010163da9fb33356d84a66ae336dcdfa3f0260801c5b60008367010000000000000016600f0b131561114057700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b131561116c5770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b1315611198577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b13156111c457700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b13156111f0577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b131561121c57700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b13156112485770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b1315611274577001000162e525ee054754457d59952920260260801c5b600083660100000000000016600f0b13156112a05770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b13156112cb577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b13156112f657700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b13156113215770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b131561134c57700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b13156113775770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b13156113a2577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b13156113cd57700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b13156113f8577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b131561142257700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b131561144c5770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b1315611476577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b13156114a05770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b13156114ca577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b13156114f457700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b131561151e5770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b131561154857700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b13156115715770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b131561159a577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b13156115c357700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b13156115ec577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b131561161557700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b131561163e5770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b1315611667577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b13156116905770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b13156116b8577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b13156116e057700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b13156117085770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b131561173057700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b13156117585770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315611780577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b13156117a857700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b13156117d0577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b13156117f757700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b131561181e5770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b1315611845577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b131561186c5770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315611893577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b13156118ba57700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b13156118e15770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b131561190857700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b131561192e5770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b1315611954577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b131561197a57700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b13156119a0577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b13156119c657700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b13156119ec5770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315611a12577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b1315611a385770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c6f7fffffffffffffffffffffffffffffff81111561063a57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611aa157611aa1611a63565b604052919050565b60006001600160401b03821115611ac257611ac2611a63565b5060051b60200190565b600082601f830112611add57600080fd5b81356020611af2611aed83611aa9565b611a79565b82815260059290921b84018101918181019086841115611b1157600080fd5b8286015b84811015611b2c5780358352918301918301611b15565b509695505050505050565b60008083601f840112611b4957600080fd5b5081356001600160401b03811115611b6057600080fd5b602083019150836020828501011115611b7857600080fd5b9250929050565b60006101208284031215610f1557600080fd5b600080600080600080600060c0888a031215611bad57600080fd5b8735965060208801356001600160401b0380821115611bcb57600080fd5b611bd78b838c01611acc565b975060408a0135915080821115611bed57600080fd5b611bf98b838c01611acc565b965060608a0135955060808a0135915080821115611c1657600080fd5b611c228b838c01611b37565b909550935060a08a0135915080821115611c3b57600080fd5b50611c488a828b01611b7f565b91505092959891949750929550565b600082601f830112611c6857600080fd5b81356001600160401b03811115611c8157611c81611a63565b611c94601f8201601f1916602001611a79565b818152846020838601011115611ca957600080fd5b816020850160208301376000918101602001919091529392505050565b803560038110611cd557600080fd5b919050565b600082601f830112611ceb57600080fd5b81356020611cfb611aed83611aa9565b82815260059290921b84018101918181019086841115611d1a57600080fd5b8286015b84811015611b2c5780356001600160401b03811115611d3d5760008081fd5b611d4b8986838b0101611c57565b845250918301918301611d1e565b600082601f830112611d6a57600080fd5b81356020611d7a611aed83611aa9565b82815260059290921b84018101918181019086841115611d9957600080fd5b8286015b84811015611b2c5780356001600160a01b0381168114611dbd5760008081fd5b8352918301918301611d9d565b6000806000806000806000806000806000806101608d8f031215611ded57600080fd5b8c359b506001600160401b0360208e01351115611e0957600080fd5b611e198e60208f01358f01611c57565b9a506001600160401b0360408e01351115611e3357600080fd5b611e438e60408f01358f01611c57565b9950611e5160608e01611cc6565b98506001600160401b0360808e01351115611e6b57600080fd5b611e7b8e60808f01358f01611acc565b97506001600160401b0360a08e01351115611e9557600080fd5b611ea58e60a08f01358f01611cda565b96506001600160401b0360c08e01351115611ebf57600080fd5b611ecf8e60c08f01358f01611cda565b95506001600160401b0360e08e01351115611ee957600080fd5b611ef98e60e08f01358f01611d59565b94506101008d013593506001600160401b036101208e01351115611f1c57600080fd5b611f2d8e6101208f01358f01611b37565b90935091506001600160401b036101408e01351115611f4b57600080fd5b611f5c8e6101408f01358f01611b7f565b90509295989b509295989b509295989b565b600060208284031215611f8057600080fd5b5035919050565b6000815180845260005b81811015611fad57602081850181015186830182015201611f91565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b86815260c060208201526000611ffc60c0830188611f87565b828103604084015261200e8188611f87565b9150506003851061202f57634e487b7160e01b600052602160045260246000fd5b84606083015283608083015282151560a0830152979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561063a5761063a61204e565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000808335601e198436030181126120b757600080fd5b83016020810192503590506001600160401b038111156120d657600080fd5b803603821315611b7857600080fd5b80356001600160a01b031981168114611cd557600080fd5b803563ffffffff81168114611cd557600080fd5b8581526001600160a01b038516602082015260806040820181905260009061213c9083018587612077565b828103606084015261012061215185866120a0565b8284526121618385018284612077565b9250505061217260208601866120a0565b8383036020850152612185838284612077565b9250505061219660408601866120a0565b83830360408501526121a9838284612077565b925050506121ba60608601866120a0565b83830360608501526121cd838284612077565b925050506121de60808601866120a0565b83830360808501526121f1838284612077565b9250505061220160a086016120e5565b6001600160a01b03191660a083015261221c60c086016120fd565b63ffffffff1660c083015261223460e08601866120a0565b83830360e0850152612247838284612077565b9250505061010061225a818701876120a0565b8484038386015261226c848284612077565b9c9b505050505050505050505050565b60408152600061228f6040830185611f87565b82810360208481019190915284518083528582019282019060005b818110156122c6578451835293830193918301916001016122aa565b5090979650505050505050565b600181811c908216806122e757607f821691505b602082108103610f1557634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8082018082111561063a5761063a61204e565b6000600182016123425761234261204e565b5060010190565b601f821115610e2e57600081815260208120601f850160051c810160208610156123705750805b601f850160051c820191505b8181101561238f5782815560010161237c565b505050505050565b81516001600160401b038111156123b0576123b0611a63565b6123c4816123be84546122d3565b84612349565b602080601f8311600181146123f957600084156123e15750858301515b600019600386901b1c1916600185901b17855561238f565b600085815260208120601f198616915b8281101561242857888601518255948401946001909101908401612409565b50858210156124465787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008261247357634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761063a5761063a61204e56fea2646970667358221220f65babea3bce5c3a2a4d497485be6f6ebef4953320ff4de5b951c3e884a8fbbd64736f6c63430008110033",
  "devdoc": {
    "author": "arjanjohan",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A smart contract for cross-chain quadratic voting developed during EthDam 24. This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2861,
        "contract": "contracts/Funding.sol:Funding",
        "label": "fundingRounds",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(FundingRound)2856_storage)"
      },
      {
        "astId": 2864,
        "contract": "contracts/Funding.sol:Funding",
        "label": "roundIds",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2867,
        "contract": "contracts/Funding.sol:Funding",
        "label": "gatewayContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IGateway)3613"
      },
      {
        "astId": 2873,
        "contract": "contracts/Funding.sol:Funding",
        "label": "gatewayAddressSepolia",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IGateway)3613": {
        "encoding": "inplace",
        "label": "contract IGateway",
        "numberOfBytes": "20"
      },
      "t_enum(FundingCurveType)2821": {
        "encoding": "inplace",
        "label": "enum Funding.FundingCurveType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(FundingRound)2856_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Funding.FundingRound)",
        "numberOfBytes": "32",
        "value": "t_struct(FundingRound)2856_storage"
      },
      "t_mapping(t_uint256,t_struct(Project)2834_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Funding.Project)",
        "numberOfBytes": "32",
        "value": "t_struct(Project)2834_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FundingRound)2856_storage": {
        "encoding": "inplace",
        "label": "struct Funding.FundingRound",
        "members": [
          {
            "astId": 2836,
            "contract": "contracts/Funding.sol:Funding",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2838,
            "contract": "contracts/Funding.sol:Funding",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2840,
            "contract": "contracts/Funding.sol:Funding",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2843,
            "contract": "contracts/Funding.sol:Funding",
            "label": "curveType",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(FundingCurveType)2821"
          },
          {
            "astId": 2848,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projects",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Project)2834_storage)"
          },
          {
            "astId": 2851,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projectIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2853,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalContributions",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2855,
            "contract": "contracts/Funding.sol:Funding",
            "label": "isOpen",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Project)2834_storage": {
        "encoding": "inplace",
        "label": "struct Funding.Project",
        "members": [
          {
            "astId": 2823,
            "contract": "contracts/Funding.sol:Funding",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2825,
            "contract": "contracts/Funding.sol:Funding",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2827,
            "contract": "contracts/Funding.sol:Funding",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2829,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projectAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          },
          {
            "astId": 2831,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalContributions",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2833,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalSquareRoots",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}