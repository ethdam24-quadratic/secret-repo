{
  "address": "0xDc92774C4BceB05A51aEBe91757f103053a7479B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "ContributionReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "ContributionReceivedInSecret",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "DistributedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "DistributedTokensInSecret",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundClosedInSecret",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        }
      ],
      "name": "RoundCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundCreatedInSecret",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sendToSecret",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "closeFundingRound",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "closedFundingRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "contributed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "curveType",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "projectNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "projectDescriptions",
          "type": "string[]"
        },
        {
          "internalType": "address payable[]",
          "name": "projectAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "sendToSecret",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "createFundingRound",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "createdFundingRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "distributeFunding",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "distributedFunding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fundingRounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "curveType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalContributions",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isDistributed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayAddressSepolia",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayContract",
      "outputs": [
        {
          "internalType": "contract IGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd8764bdb3354ff2ba1769e9858834015e737bdac566dd87c071448280483f90f",
  "receipt": {
    "to": null,
    "from": "0xbb1DF1ab33786Ac6B91d9D16b445c7b66825979e",
    "contractAddress": "0xDc92774C4BceB05A51aEBe91757f103053a7479B",
    "transactionIndex": 56,
    "gasUsed": "2365012",
    "logsBloom": "0x
    "blockHash": "0x3a5bd5521639d0b24db942ef4ba22bb8a170938385eaf4f57141a2caa591f6af",
    "transactionHash": "0xd8764bdb3354ff2ba1769e9858834015e737bdac566dd87c071448280483f90f",
    "logs": [],
    "blockNumber": 5691788,
    "cumulativeGasUsed": "25175048",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 19,
  "solcInputHash": "27f88d03c51738f2b72d568bee64bcc9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"ContributionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"ContributionReceivedInSecret\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"DistributedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"DistributedTokensInSecret\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundClosedInSecret\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"}],\"name\":\"RoundCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundCreatedInSecret\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendToSecret\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"closeFundingRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"closedFundingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"contributed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"curveType\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"projectNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"projectDescriptions\",\"type\":\"string[]\"},{\"internalType\":\"address payable[]\",\"name\":\"projectAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sendToSecret\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"createFundingRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"createdFundingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"distributeFunding\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"distributedFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundingRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"curveType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalContributions\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDistributed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayAddressSepolia\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayContract\",\"outputs\":[{\"internalType\":\"contract IGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"arjanjohan\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A smart contract for cross-chain quadratic voting developed during EthDam 24. This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Funding.sol\":\"Funding\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Funding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"../interfaces/IGateway.sol\\\";\\nimport \\\"./JsmnSolLib.sol\\\";\\n\\n/**\\n * A smart contract for cross-chain quadratic voting developed during EthDam 24.\\n * This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.\\n * @author arjanjohan\\n */\\ncontract Funding {\\n\\t// ========================================\\n\\t//     ENUM, STRUCTS AND MAPPINGS\\n\\t// ========================================\\n\\n\\tstruct Project {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\taddress payable projectAddress;\\n\\t\\tuint256 totalContributions;\\n\\t\\tuint256 totalSquareRoots;\\n\\t}\\n\\n\\tstruct FundingRound {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\tstring curveType;\\n\\t\\tmapping(uint256 => Project) projects;\\n\\t\\tuint256[] projectIds;\\n\\t\\tuint256 totalContributions;\\n\\t\\tbool isOpen;\\n\\t\\tbool isDistributed;\\n\\t}\\n\\n\\tstruct ProjectFundingData {\\n\\t\\tstring projectId;\\n\\t\\tuint256 fundingPercentage;\\n\\t}\\n\\n\\tmapping(uint256 => FundingRound) public fundingRounds;\\n\\tuint256[] public roundIds;\\n\\n\\t// ========================================\\n\\t//     CONSTRUCTOR AND VALUES\\n\\t// ========================================\\n\\n\\tIGateway public gatewayContract;\\n\\taddress public constant gatewayAddressSepolia =\\n\\t\\taddress(0x3879E146140b627a5C858a08e507B171D9E43139);\\n\\n\\tconstructor() {\\n\\t\\tgatewayContract = IGateway(gatewayAddressSepolia);\\n\\t}\\n\\n\\t// ========================================\\n\\t//     EVENTS\\n\\t// ========================================\\n\\tevent RoundCreated(\\n\\t\\tuint256 indexed roundId,\\n\\t\\tstring name,\\n\\t\\tuint256[] projectIds\\n\\t);\\n\\n\\tevent RoundCreatedInSecret(uint256 indexed roundId);\\n\\n\\tevent ContributionReceived(address indexed contributor);\\n\\n\\tevent ContributionReceivedInSecret(uint256 indexed roundId);\\n\\n\\tevent RoundClosed(uint256 indexed roundId);\\n\\n\\tevent RoundClosedInSecret(uint256 indexed roundId);\\n\\n\\tevent DistributedTokens(uint256 indexed roundId);\\n\\n\\tevent DistributedTokensInSecret(uint256 indexed roundId);\\n\\n\\t// ========================================\\n\\t//     CORE FUNCTIONS\\n\\t// ========================================\\n\\n\\tfunction createFundingRound(\\n\\t\\tuint256 id,\\n\\t\\tstring memory name,\\n\\t\\tstring memory description,\\n\\t\\tstring memory curveType,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses,\\n\\t\\taddress userAddress,\\n\\t\\tbool sendToSecret,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\tvalidateProjectParameters(\\n\\t\\t\\tprojectIds,\\n\\t\\t\\tprojectNames,\\n\\t\\t\\tprojectDescriptions,\\n\\t\\t\\tprojectAddresses\\n\\t\\t);\\n\\t\\trequire(fundingRounds[id].id == 0, \\\"Round ID exists\\\");\\n\\n\\t\\tif (sendToSecret) {\\n\\t\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\t\\tpayloadHash,\\n\\t\\t\\t\\tuserAddress,\\n\\t\\t\\t\\troutingInfo,\\n\\t\\t\\t\\tinfo\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tFundingRound storage round = fundingRounds[id];\\n\\t\\tsetupFundingRound(\\n\\t\\t\\tround,\\n\\t\\t\\tid,\\n\\t\\t\\tname,\\n\\t\\t\\tdescription,\\n\\t\\t\\tcurveType,\\n\\t\\t\\tprojectIds,\\n\\t\\t\\tprojectNames,\\n\\t\\t\\tprojectDescriptions,\\n\\t\\t\\tprojectAddresses\\n\\t\\t);\\n\\t\\troundIds.push(id);\\n\\t\\temit RoundCreated(id, name, projectIds);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction createdFundingRound(uint256 roundId, bytes memory json) public {\\n\\t\\temit RoundCreatedInSecret(roundId);\\n\\t}\\n\\n\\tfunction contribute(\\n\\t\\taddress userAddress,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\tgatewayContract.send{ value: msg.value }( // todo change this value\\n\\t\\t\\tpayloadHash,\\n\\t\\t\\tuserAddress,\\n\\t\\t\\troutingInfo,\\n\\t\\t\\tinfo\\n\\t\\t);\\n\\t\\temit ContributionReceived(userAddress);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction contributed(uint256 roundId, bytes memory json) public {\\n\\t\\temit ContributionReceivedInSecret(roundId);\\n\\t}\\n\\n\\tfunction closeFundingRound(\\n\\t\\tuint256 roundId,\\n\\t\\tbool sendToSecret,\\n\\t\\taddress userAddress,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\trequire(fundingRounds[roundId].isOpen, \\\"Round closed\\\");\\n\\t\\tfundingRounds[roundId].isOpen = false;\\n\\n\\t\\tif (sendToSecret) {\\n\\t\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\t\\tpayloadHash,\\n\\t\\t\\t\\tuserAddress,\\n\\t\\t\\t\\troutingInfo,\\n\\t\\t\\t\\tinfo\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\temit RoundClosed(roundId);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction closedFundingRound(uint256 roundId, bytes memory json) public {\\n\\t\\temit RoundClosedInSecret(roundId);\\n\\t}\\n\\n\\tfunction distributeFunding(\\n\\t\\tuint256 roundId,\\n\\t\\taddress userAddress,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\trequire(!fundingRounds[roundId].isOpen, \\\"Round is not closed\\\");\\n\\t\\trequire(!fundingRounds[roundId].isDistributed, \\\"Already distributed\\\");\\n\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\tpayloadHash,\\n\\t\\t\\tuserAddress,\\n\\t\\t\\troutingInfo,\\n\\t\\t\\tinfo\\n\\t\\t);\\n\\t\\tfundingRounds[roundId].isDistributed = true;\\n\\t\\temit DistributedTokens(roundId);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction distributedFunding(uint256 roundId, bytes memory json) public {\\n\\t\\tProjectFundingData[] memory fundingData = parseFundingData(\\n\\t\\t\\tstring(json)\\n\\t\\t);\\n\\t\\tprocessFundingRound(fundingData, roundId);\\n\\t\\temit DistributedTokensInSecret(roundId);\\n\\t}\\n\\n\\t// ========================================\\n\\t//     HELPER FUNCTIONS\\n\\t// ========================================\\n\\n\\tfunction validateProjectParameters(\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses\\n\\t) private pure {\\n\\t\\trequire(\\n\\t\\t\\tprojectIds.length == projectNames.length &&\\n\\t\\t\\t\\tprojectNames.length == projectDescriptions.length &&\\n\\t\\t\\t\\tprojectDescriptions.length == projectAddresses.length,\\n\\t\\t\\t\\\"Mismatched input arrays\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setupFundingRound(\\n\\t\\tFundingRound storage round,\\n\\t\\tuint256 id,\\n\\t\\tstring memory name,\\n\\t\\tstring memory description,\\n\\t\\tstring memory curveType,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses\\n\\t) private {\\n\\t\\tround.id = id;\\n\\t\\tround.name = name;\\n\\t\\tround.description = description;\\n\\t\\tround.curveType = curveType;\\n\\t\\tround.isOpen = true;\\n\\n\\t\\tfor (uint256 i = 0; i < projectIds.length; i++) {\\n\\t\\t\\trequire(round.projects[projectIds[i]].id == 0, \\\"Project ID exists\\\");\\n\\t\\t\\tround.projects[projectIds[i]] = Project({\\n\\t\\t\\t\\tid: projectIds[i],\\n\\t\\t\\t\\tname: projectNames[i],\\n\\t\\t\\t\\tdescription: projectDescriptions[i],\\n\\t\\t\\t\\tprojectAddress: projectAddresses[i],\\n\\t\\t\\t\\ttotalContributions: 0,\\n\\t\\t\\t\\ttotalSquareRoots: 0\\n\\t\\t\\t});\\n\\t\\t\\tround.projectIds.push(projectIds[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction validRound(uint256 roundId) private view returns (bool) {\\n\\t\\treturn fundingRounds[roundId].isOpen && fundingRounds[roundId].id != 0;\\n\\t}\\n\\n\\t// Parses the JSON and extracts funding data\\n\\tfunction parseFundingData(\\n\\t\\tstring memory json\\n\\t) internal pure returns (ProjectFundingData[] memory) {\\n\\t\\tuint256 numTokens;\\n\\t\\tJsmnSolLib.Token[] memory tokens;\\n\\t\\t(, tokens, numTokens) = JsmnSolLib.parse(json, 20);\\n\\t\\trequire(numTokens > 0, \\\"JSON parsing failed or no data found\\\");\\n\\n\\t\\tProjectFundingData[] memory results = new ProjectFundingData[](\\n\\t\\t\\t(numTokens - 1) / 3\\n\\t\\t);\\n\\t\\tfor (uint256 i = 0; i < results.length; i++) {\\n\\t\\t\\tstring memory projectId = JsmnSolLib.getBytes(\\n\\t\\t\\t\\tjson,\\n\\t\\t\\t\\ttokens[1 + 3 * i].start,\\n\\t\\t\\t\\ttokens[1 + 3 * i].end\\n\\t\\t\\t);\\n\\t\\t\\tstring memory percentageStr = JsmnSolLib.getBytes(\\n\\t\\t\\t\\tjson,\\n\\t\\t\\t\\ttokens[2 + 3 * i].start,\\n\\t\\t\\t\\ttokens[2 + 3 * i].end\\n\\t\\t\\t);\\n\\t\\t\\tuint256 fundingPercentage = uint256(\\n\\t\\t\\t\\tJsmnSolLib.parseInt(percentageStr)\\n\\t\\t\\t);\\n\\t\\t\\tresults[i] = ProjectFundingData(projectId, fundingPercentage);\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\n\\t// Processes each project's funding based on parsed data\\n\\tfunction processFundingRound(\\n\\t\\tProjectFundingData[] memory fundingData,\\n\\t\\tuint256 roundId\\n\\t) internal {\\n\\t\\tuint256 totalFunds = fundingRounds[roundId].totalContributions;\\n\\t\\tfor (uint256 i = 0; i < fundingRounds[roundId].projectIds.length; i++) {\\n\\t\\t\\tProject storage project = fundingRounds[roundId].projects[\\n\\t\\t\\t\\tfundingRounds[roundId].projectIds[i]\\n\\t\\t\\t];\\n\\t\\t\\tuint256 payout = calculatePayout(project, fundingData);\\n\\t\\t\\tproject.projectAddress.transfer(payout);\\n\\t\\t\\ttotalFunds -= payout;\\n\\t\\t}\\n\\t}\\n\\n\\t// Calculates the payout for a given project\\n\\tfunction calculatePayout(\\n\\t\\tProject storage project,\\n\\t\\tProjectFundingData[] memory fundingData\\n\\t) internal view returns (uint256) {\\n\\t\\tfor (uint256 i = 0; i < fundingData.length; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(fundingData[i].projectId)) ==\\n\\t\\t\\t\\tkeccak256(bytes(project.name))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn\\n\\t\\t\\t\\t\\t(project.totalContributions *\\n\\t\\t\\t\\t\\t\\tfundingData[i].fundingPercentage) / 100;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0xe3505cdda71b3f8a7709283d846db951c433b5b347dfe240e23ed976525e39ae\",\"license\":\"MIT\"},\"contracts/JsmnSolLib.sol\":{\"content\":\"/*\\nCopyright (c) 2017 Christoph Niemann\\nPermission is hereby granted, free of charge, to any person obtaining a copy of\\nthis software and associated documentation files (the \\\"Software\\\"), to deal in\\nthe Software without restriction, including without limitation the rights to\\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\nof the Software, and to permit persons to whom the Software is furnished to do\\nso, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary JsmnSolLib {\\n\\tenum JsmnType {\\n\\t\\tUNDEFINED,\\n\\t\\tOBJECT,\\n\\t\\tARRAY,\\n\\t\\tSTRING,\\n\\t\\tPRIMITIVE\\n\\t}\\n\\n\\tuint constant RETURN_SUCCESS = 0;\\n\\tuint constant RETURN_ERROR_INVALID_JSON = 1;\\n\\tuint constant RETURN_ERROR_PART = 2;\\n\\tuint constant RETURN_ERROR_NO_MEM = 3;\\n\\n\\tstruct Token {\\n\\t\\tJsmnType jsmnType;\\n\\t\\tuint start;\\n\\t\\tbool startSet;\\n\\t\\tuint end;\\n\\t\\tbool endSet;\\n\\t\\tuint8 size;\\n\\t}\\n\\n\\tstruct Parser {\\n\\t\\tuint pos;\\n\\t\\tuint toknext;\\n\\t\\tint toksuper;\\n\\t}\\n\\n\\tfunction init(\\n\\t\\tuint length\\n\\t) internal pure returns (Parser memory, Token[] memory) {\\n\\t\\tParser memory p = Parser(0, 0, -1);\\n\\t\\tToken[] memory t = new Token[](length);\\n\\t\\treturn (p, t);\\n\\t}\\n\\n\\tfunction allocateToken(\\n\\t\\tParser memory parser,\\n\\t\\tToken[] memory tokens\\n\\t) internal pure returns (bool, Token memory) {\\n\\t\\tif (parser.toknext >= tokens.length) {\\n\\t\\t\\t// no more space in tokens\\n\\t\\t\\treturn (false, tokens[tokens.length - 1]);\\n\\t\\t}\\n\\t\\tToken memory token = Token(JsmnType.UNDEFINED, 0, false, 0, false, 0);\\n\\t\\ttokens[parser.toknext] = token;\\n\\t\\tparser.toknext++;\\n\\t\\treturn (true, token);\\n\\t}\\n\\n\\tfunction fillToken(\\n\\t\\tToken memory token,\\n\\t\\tJsmnType jsmnType,\\n\\t\\tuint start,\\n\\t\\tuint end\\n\\t) internal pure {\\n\\t\\ttoken.jsmnType = jsmnType;\\n\\t\\ttoken.start = start;\\n\\t\\ttoken.startSet = true;\\n\\t\\ttoken.end = end;\\n\\t\\ttoken.endSet = true;\\n\\t\\ttoken.size = 0;\\n\\t}\\n\\n\\tfunction parseString(\\n\\t\\tParser memory parser,\\n\\t\\tToken[] memory tokens,\\n\\t\\tbytes memory s\\n\\t) internal pure returns (uint) {\\n\\t\\tuint start = parser.pos;\\n\\t\\tbool success;\\n\\t\\tToken memory token;\\n\\t\\tparser.pos++;\\n\\n\\t\\tfor (; parser.pos < s.length; parser.pos++) {\\n\\t\\t\\tbytes1 c = s[parser.pos];\\n\\n\\t\\t\\t// Quote -> end of string\\n\\t\\t\\tif (c == '\\\"') {\\n\\t\\t\\t\\t(success, token) = allocateToken(parser, tokens);\\n\\t\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t\\tparser.pos = start;\\n\\t\\t\\t\\t\\treturn RETURN_ERROR_NO_MEM;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfillToken(token, JsmnType.STRING, start + 1, parser.pos);\\n\\t\\t\\t\\treturn RETURN_SUCCESS;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (uint8(c) == 92 && parser.pos + 1 < s.length) {\\n\\t\\t\\t\\t// handle escaped characters: skip over it\\n\\t\\t\\t\\tparser.pos++;\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\ts[parser.pos] == '\\\"' ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"/\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"\\\\\\\\\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"f\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"r\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"n\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"b\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"t\\\"\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// all other values are INVALID\\n\\t\\t\\t\\t\\tparser.pos = start;\\n\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tparser.pos = start;\\n\\t\\treturn RETURN_ERROR_PART;\\n\\t}\\n\\n\\tfunction parsePrimitive(\\n\\t\\tParser memory parser,\\n\\t\\tToken[] memory tokens,\\n\\t\\tbytes memory s\\n\\t) internal pure returns (uint) {\\n\\t\\tbool found = false;\\n\\t\\tuint start = parser.pos;\\n\\t\\tbytes1 c;\\n\\t\\tbool success;\\n\\t\\tToken memory token;\\n\\t\\tfor (; parser.pos < s.length; parser.pos++) {\\n\\t\\t\\tc = s[parser.pos];\\n\\t\\t\\tif (\\n\\t\\t\\t\\tc == \\\" \\\" ||\\n\\t\\t\\t\\tc == \\\"\\\\t\\\" ||\\n\\t\\t\\t\\tc == \\\"\\\\n\\\" ||\\n\\t\\t\\t\\tc == \\\"\\\\r\\\" ||\\n\\t\\t\\t\\tc == \\\",\\\" ||\\n\\t\\t\\t\\tc == 0x7d ||\\n\\t\\t\\t\\tc == 0x5d\\n\\t\\t\\t) {\\n\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tif (uint8(c) < 32 || uint8(c) > 127) {\\n\\t\\t\\t\\tparser.pos = start;\\n\\t\\t\\t\\treturn RETURN_ERROR_INVALID_JSON;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (!found) {\\n\\t\\t\\tparser.pos = start;\\n\\t\\t\\treturn RETURN_ERROR_PART;\\n\\t\\t}\\n\\n\\t\\t// found the end\\n\\t\\t(success, token) = allocateToken(parser, tokens);\\n\\t\\tif (!success) {\\n\\t\\t\\tparser.pos = start;\\n\\t\\t\\treturn RETURN_ERROR_NO_MEM;\\n\\t\\t}\\n\\t\\tfillToken(token, JsmnType.PRIMITIVE, start, parser.pos);\\n\\t\\tparser.pos--;\\n\\t\\treturn RETURN_SUCCESS;\\n\\t}\\n\\n\\tfunction parse(\\n\\t\\tstring memory json,\\n\\t\\tuint numberElements\\n\\t) internal pure returns (uint, Token[] memory tokens, uint) {\\n\\t\\tbytes memory s = bytes(json);\\n\\t\\tbool success;\\n\\t\\tParser memory parser;\\n\\t\\t(parser, tokens) = init(numberElements);\\n\\n\\t\\t// Token memory token;\\n\\t\\tuint r;\\n\\t\\tuint count = parser.toknext;\\n\\t\\tuint i;\\n\\t\\tToken memory token;\\n\\n\\t\\tfor (; parser.pos < s.length; parser.pos++) {\\n\\t\\t\\tbytes1 c = s[parser.pos];\\n\\n\\t\\t\\t// 0x7b, 0x5b opening curly parentheses or brackets\\n\\t\\t\\tif (c == 0x7b || c == 0x5b) {\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\t(success, token) = allocateToken(parser, tokens);\\n\\t\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t\\treturn (RETURN_ERROR_NO_MEM, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (parser.toksuper != -1) {\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].size++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\ttoken.jsmnType = (c == 0x7b ? JsmnType.OBJECT : JsmnType.ARRAY);\\n\\t\\t\\t\\ttoken.start = parser.pos;\\n\\t\\t\\t\\ttoken.startSet = true;\\n\\t\\t\\t\\tparser.toksuper = int(parser.toknext - 1);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// closing curly parentheses or brackets\\n\\t\\t\\tif (c == 0x7d || c == 0x5d) {\\n\\t\\t\\t\\tJsmnType tokenType = (\\n\\t\\t\\t\\t\\tc == 0x7d ? JsmnType.OBJECT : JsmnType.ARRAY\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tbool isUpdated = false;\\n\\t\\t\\t\\tfor (i = parser.toknext - 1; i >= 0; i--) {\\n\\t\\t\\t\\t\\ttoken = tokens[i];\\n\\t\\t\\t\\t\\tif (token.startSet && !token.endSet) {\\n\\t\\t\\t\\t\\t\\tif (token.jsmnType != tokenType) {\\n\\t\\t\\t\\t\\t\\t\\t// found a token that hasn't been closed but from a different type\\n\\t\\t\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tparser.toksuper = -1;\\n\\t\\t\\t\\t\\t\\ttokens[i].end = parser.pos + 1;\\n\\t\\t\\t\\t\\t\\ttokens[i].endSet = true;\\n\\t\\t\\t\\t\\t\\tisUpdated = true;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (!isUpdated) {\\n\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfor (; i > 0; i--) {\\n\\t\\t\\t\\t\\ttoken = tokens[i];\\n\\t\\t\\t\\t\\tif (token.startSet && !token.endSet) {\\n\\t\\t\\t\\t\\t\\tparser.toksuper = int(i);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (i == 0) {\\n\\t\\t\\t\\t\\ttoken = tokens[i];\\n\\t\\t\\t\\t\\tif (token.startSet && !token.endSet) {\\n\\t\\t\\t\\t\\t\\tparser.toksuper = int(i);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 0x42\\n\\t\\t\\tif (c == '\\\"') {\\n\\t\\t\\t\\tr = parseString(parser, tokens, s);\\n\\n\\t\\t\\t\\tif (r != RETURN_SUCCESS) {\\n\\t\\t\\t\\t\\treturn (r, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t//JsmnError.INVALID;\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\tif (parser.toksuper != -1) tokens[uint(parser.toksuper)].size++;\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ' ', \\\\r, \\\\t, \\\\n\\n\\t\\t\\tif (c == \\\" \\\" || c == 0x11 || c == 0x12 || c == 0x14) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 0x3a\\n\\t\\t\\tif (c == \\\":\\\") {\\n\\t\\t\\t\\tparser.toksuper = int(parser.toknext - 1);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (c == \\\",\\\") {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\tparser.toksuper != -1 &&\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].jsmnType != JsmnType.ARRAY &&\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].jsmnType != JsmnType.OBJECT\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tfor (i = parser.toknext - 1; i >= 0; i--) {\\n\\t\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\t\\ttokens[i].jsmnType == JsmnType.ARRAY ||\\n\\t\\t\\t\\t\\t\\t\\ttokens[i].jsmnType == JsmnType.OBJECT\\n\\t\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\t\\tif (tokens[i].startSet && !tokens[i].endSet) {\\n\\t\\t\\t\\t\\t\\t\\t\\tparser.toksuper = int(i);\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Primitive\\n\\t\\t\\tif (\\n\\t\\t\\t\\t(c >= \\\"0\\\" && c <= \\\"9\\\") ||\\n\\t\\t\\t\\tc == \\\"-\\\" ||\\n\\t\\t\\t\\tc == \\\"f\\\" ||\\n\\t\\t\\t\\tc == \\\"t\\\" ||\\n\\t\\t\\t\\tc == \\\"n\\\"\\n\\t\\t\\t) {\\n\\t\\t\\t\\tif (parser.toksuper != -1) {\\n\\t\\t\\t\\t\\ttoken = tokens[uint(parser.toksuper)];\\n\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\ttoken.jsmnType == JsmnType.OBJECT ||\\n\\t\\t\\t\\t\\t\\t(token.jsmnType == JsmnType.STRING && token.size != 0)\\n\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tr = parsePrimitive(parser, tokens, s);\\n\\t\\t\\t\\tif (r != RETURN_SUCCESS) {\\n\\t\\t\\t\\t\\treturn (r, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\tif (parser.toksuper != -1) {\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].size++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// printable char\\n\\t\\t\\tif (c >= 0x20 && c <= 0x7e) {\\n\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn (RETURN_SUCCESS, tokens, parser.toknext);\\n\\t}\\n\\n\\tfunction getBytes(\\n\\t\\tstring memory json,\\n\\t\\tuint start,\\n\\t\\tuint end\\n\\t) internal pure returns (string memory) {\\n\\t\\tbytes memory s = bytes(json);\\n\\t\\tbytes memory result = new bytes(end - start);\\n\\t\\tfor (uint i = start; i < end; i++) {\\n\\t\\t\\tresult[i - start] = s[i];\\n\\t\\t}\\n\\t\\treturn string(result);\\n\\t}\\n\\n\\t// parseInt\\n\\tfunction parseInt(string memory _a) internal pure returns (int) {\\n\\t\\treturn parseInt(_a, 0);\\n\\t}\\n\\n\\t// parseInt(parseFloat*10^_b)\\n\\tfunction parseInt(string memory _a, uint _b) internal pure returns (int) {\\n\\t\\tbytes memory bresult = bytes(_a);\\n\\t\\tint mint = 0;\\n\\t\\tbool decimals = false;\\n\\t\\tbool negative = false;\\n\\t\\tfor (uint i = 0; i < bresult.length; i++) {\\n\\t\\t\\tif ((i == 0) && (bresult[i] == \\\"-\\\")) {\\n\\t\\t\\t\\tnegative = true;\\n\\t\\t\\t}\\n\\t\\t\\tif ((uint8(bresult[i]) >= 48) && (uint8(bresult[i]) <= 57)) {\\n\\t\\t\\t\\tif (decimals) {\\n\\t\\t\\t\\t\\tif (_b == 0) break;\\n\\t\\t\\t\\t\\telse _b--;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tmint *= 10;\\n\\t\\t\\t\\tmint += int(uint256(uint8(bresult[i]))) - 48;\\n\\t\\t\\t} else if (uint8(bresult[i]) == 46) decimals = true;\\n\\t\\t}\\n\\t\\tif (_b > 0) mint *= int(10 ** _b);\\n\\t\\tif (negative) mint *= -1;\\n\\t\\treturn mint;\\n\\t}\\n\\n\\tfunction uint2str(uint i) internal pure returns (string memory) {\\n\\t\\tif (i == 0) return \\\"0\\\";\\n\\t\\tuint j = i;\\n\\t\\tuint len;\\n\\t\\twhile (j != 0) {\\n\\t\\t\\tlen++;\\n\\t\\t\\tj /= 10;\\n\\t\\t}\\n\\t\\tbytes memory bstr = new bytes(len);\\n\\t\\tuint k = len - 1;\\n\\t\\twhile (i != 0) {\\n\\t\\t\\tbstr[k--] = bytes1(uint8(48 + (i % 10)));\\n\\t\\t\\ti /= 10;\\n\\t\\t}\\n\\t\\treturn string(bstr);\\n\\t}\\n\\n\\tfunction parseBool(string memory _a) internal pure returns (bool) {\\n\\t\\tif (strCompare(_a, \\\"true\\\") == 0) {\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction strCompare(\\n\\t\\tstring memory _a,\\n\\t\\tstring memory _b\\n\\t) internal pure returns (int) {\\n\\t\\tbytes memory a = bytes(_a);\\n\\t\\tbytes memory b = bytes(_b);\\n\\t\\tuint minLength = a.length;\\n\\t\\tif (b.length < minLength) minLength = b.length;\\n\\t\\tfor (uint i = 0; i < minLength; i++)\\n\\t\\t\\tif (a[i] < b[i]) return -1;\\n\\t\\t\\telse if (a[i] > b[i]) return 1;\\n\\t\\tif (a.length < b.length) return -1;\\n\\t\\telse if (a.length > b.length) return 1;\\n\\t\\telse return 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0xea51e519ec3c809b9b7b1b4cf46616641a5c65bf99f7b89c98f6c3501f1e0330\"},\"interfaces/IGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IGateway {\\n\\tstruct ExecutionInfo {\\n\\t\\tbytes user_key;\\n\\t\\tbytes user_pubkey;\\n\\t\\tstring routing_code_hash;\\n\\t\\tstring task_destination_network;\\n\\t\\tstring handle;\\n\\t\\tbytes12 nonce;\\n\\t\\tuint32 callback_gas_limit;\\n\\t\\tbytes payload;\\n\\t\\tbytes payload_signature;\\n\\t}\\n\\n\\tfunction send(\\n\\t\\tbytes32 _payloadHash,\\n\\t\\taddress _userAddress,\\n\\t\\tstring calldata _routingInfo,\\n\\t\\tExecutionInfo calldata _info\\n\\t) external payable;\\n}\\n\",\"keccak256\":\"0x0a9d680f18372c00a8e706f4656647edc7a3973a1d1974bf2a59fe319a3150ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461003c57600280546001600160a01b031916733879e146140b627a5c858a08e507b171d9e4313917905561295d90816100428239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c9081634a98b902146115bb5750806355aa2f8c14611416578063763a3df6146113285780637faf8dcf14610e8b5780638b3b57a414610e5457806390a4cb9b14610e02578063b239a41214610dcb578063c428a27814610d1b578063c5ad404314610ce4578063c9640c0914610cb5578063e09a1094146100d05763eb0cde1d146100a557600080fd5b346100cd57806003193601126100cd576002546040516001600160a01b039091168152602090f35b80fd5b506101a03660031901126100cd576024356001600160401b038111610cb1576100fd903690600401611996565b6044356001600160401b038111610cad5761011c903690600401611996565b906064356001600160401b038111610c995761013c903690600401611996565b926001600160401b03608435116100cd573660236084350112156100cd576084356004013561016a816119b1565b9061017860405192836117a8565b8082526020820190813660248360051b608435010111610c9557602460843501905b60248360051b60843501018210610c9d5750505060a4356001600160401b038111610c99576101cd9036906004016119c8565b9560c4356001600160401b038111610c95576101ed9036906004016119c8565b916001600160401b0360e43511610c955736602360e435011215610c955760e435600401359161021c836119b1565b9261022a60405194856117a8565b80845260208401903660248260051b60e435010111610c6657602460e43501915b60248260051b60e43501018310610c7357505050610104356001600160a01b0381169003610c6e576101243515156101243503610c6e57610164356001600160401b038111610c6a576102a2903690600401611717565b6001600160401b036101843511610c66576101206101843536036003190112610c665786518b518091149081610c5b575b5080610c50575b15610c0b576004358852876020526040882054610bd45761012435610b52575b50506004358652856020526040862097600435895587516001600160401b038111610a835761032c60018b0154611876565b601f8111610b0d575b50806020601f8211600114610aa2578991610a97575b508160011b916000199060031b1c19161760018a01555b8051906001600160401b038211610a8357819061038260028c0154611876565b601f8111610a32575b50602090601f83116001146109c35789926109b8575b50508160011b916000199060031b1c19161760028901555b8051906001600160401b0382116109a45781906103d960038b0154611876565b601f8111610953575b50602090601f83116001146108e45788926108d9575b50508160011b916000199060031b1c19161760038801555b60078701805460ff19166001179055845b84518110156107ff576104348186611bef565b5186526004880160205260408620546107c6576104518186611bef565b5161045c828b611bef565b51906104688387611bef565b516001600160a01b0361047b8588611bef565b5116906040519261048b84611772565b835260208301938452604083015260608201528760808201528760a08201526104b48388611bef565b51885260048a01602052604088209181518355518051906001600160401b0382116106e75781906104e86001860154611876565b601f8111610775575b50602090601f8311600114610706578b926106fb575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b0382116106e7576105426002850154611876565b601f81116106a2575b50602090601f83116001146106305791806005949260a0948d92610625575b50508160011b916000199060031b1c19161760028501555b60038401600180841b036060830151166bffffffffffffffffffffffff841b8254161790556080810151600485015501519101556105c08186611bef565b5190600589015491600160401b83101561060f576105ed83600161060a950160058d015560058c0161185e565b819291549060031b600019811b9283911b16911916179055611be0565b610421565b634e487b7160e01b600052604160045260246000fd5b01519050388061056a565b90600285018b5260208b20918b5b601f198516811061068a5750926005949260019260a09583601f19811610610671575b505050811b016002850155610582565b015160001960f88460031b161c19169055388080610661565b9192602060018192868501518155019401920161063e565b600285018b5260208b20601f840160051c8101602085106106e0575b601f830160051c820181106106d457505061054b565b600081556001016106be565b50806106be565b634e487b7160e01b8a52604160045260248afd5b015190503880610507565b9250600185018b5260208b20908b935b601f198416851061075a576001945083601f19811610610741575b505050811b01600183015561051f565b015160001960f88460031b161c19169055388080610731565b81810151835560209485019460019093019290910190610716565b909150600185018b5260208b20601f840160051c8101602085106107bf575b90849392915b601f830160051c820181106107b05750506104f1565b6000815585945060010161079a565b5080610794565b60405162461bcd60e51b815260206004820152601160248201527050726f6a6563742049442065786973747360781b6044820152606490fd5b85828887600154600160401b81101561060f5760018101806001558110156108c3576001600052600435907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155602061086460405193604085526040850190611956565b91838303828501525191828152019290845b8181106108ad57505050807f2fceaf42a6664f3294222799a359650844542179732d12b26b6926bd338479a591600435930390a280f35b8251855260209485019490920191600101610876565b634e487b7160e01b600052603260045260246000fd5b0151905038806103f8565b925060038a018852602088209088935b601f1984168510610938576001945083601f1981161061091f575b505050811b016003880155610410565b015160001960f88460031b161c1916905538808061090f565b818101518355602094850194600190930192909101906108f4565b90915060038a01885260208820601f840160051c81016020851061099d575b90849392915b601f830160051c8201811061098e5750506103e2565b60008155859450600101610978565b5080610972565b634e487b7160e01b87526041600452602487fd5b0151905038806103a1565b925060028b018952602089209089935b601f1984168510610a17576001945083601f198116106109fe575b505050811b0160028901556103b9565b015160001960f88460031b161c191690553880806109ee565b818101518355602094850194600190930192909101906109d3565b90915060028b01895260208920601f840160051c810160208510610a7c575b90849392915b601f830160051c82018110610a6d57505061038b565b60008155859450600101610a57565b5080610a51565b634e487b7160e01b88526041600452602488fd5b90508901513861034b565b915060018b0189526020892089925b8b601f1984168510610af657506001935082601f19811610610add575b5050811b0160018a0155610362565b8b015160001960f88460031b161c191690553880610ace565b810151825560209384019360019092019101610ab1565b60018b01895260208920601f830160051c810160208410610b4b575b601f830160051c82018110610b3f575050610335565b60008155600101610b29565b5080610b29565b6002546001600160a01b031690813b15610bd057918891610b99936040518095819482936339624a6b60e21b84526101843560040191610104356101443560048701611a9a565b039134905af18015610bc557908791156102fa57610bb690611744565b610bc15785386102fa565b8580fd5b6040513d89823e3d90fd5b8880fd5b60405162461bcd60e51b815260206004820152600f60248201526e526f756e642049442065786973747360881b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4d69736d61746368656420696e707574206172726179730000000000000000006044820152606490fd5b5085518551146102da565b9050865114386102d3565b8780fd5b8680fd5b600080fd5b82356001600160a01b0381169003610bd057823581526020928301920161024b565b8480fd5b8380fd5b813581526020918201910161019a565b8280fd5b5080fd5b50346100cd57806003193601126100cd576020604051733879e146140b627a5c858a08e507b171d9e431398152f35b50346100cd57610cf33661181b565b507f0de2355f73246cb2852175af9385f91c8205be026c831a20ada4062931abdec08280a280f35b50346100cd5760203660031901126100cd57604090600435815280602052208054610d48600183016118b0565b9160ff610d57600283016118b0565b610dac610d66600385016118b0565b610d9e6007600687015496015493610d90604051998a998a5260e060208b015260e08a0190611956565b9088820360408a0152611956565b908682036060880152611956565b926080850152818116151560a085015260081c16151560c08301520390f35b50346100cd57610dda3661181b565b507f0e82eab4cbddb8a38b9fb81ba86a4a05ec8aa2c55dbea69d2e72857b4f90e9548280a280f35b50346100cd5760203660031901126100cd57600435600154811015610cb15760209060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154604051908152f35b50346100cd57610e633661181b565b507fdcad6660d3e34a68718474b3d2dfb7da8a012d967dfe595b0123a6112667f0688280a280f35b50346100cd57610e9a3661181b565b91610ea483611dd9565b80959250156112d7576000198581019586116112c357600380960493610ec9856119b1565b94610ed760405196876117a8565b808652610ee6601f19916119b1565b01815b81811061129f575050805b85518110156111ca578088029088820481036111b657600191808301908184116111a25790610f3d91610f4760209283610f2e828c611bef565b5101519060609586918c611bef565b510151908b6128a0565b92600291820180921161102f5790610f7b91610f7184610f67848d611bef565b510151928b611bef565b510151908a6128a0565b858695808889948a935b611043575b5050505080610ff9575b50610fd1575b92610fcc9360405192610fac84611757565b8352820152610fbb8289611bef565b52610fc68188611bef565b50611be0565b610ef4565b83600003938085058714901517610f9a575b634e487b7160e01b600052601160045260246000fd5b604d819692961161102f57600a0a818102919060008212600160ff1b821416610fe3578183051490151715610fe3579338610f94565b634e487b7160e01b87526011600452602487fd5b9091929881518a101561119c5789158061117b575b611172575b6110678a83611d87565b51603060f891821c10158061115b575b1561112f5783611106575b600a91828102928184051490151715610fe35761109f8b84611d87565b51901c90602f198083019280841387166110f257908d9183010192831291129080158216911516176110de57906110d88493929a611be0565b93610f85565b634e487b7160e01b8b52601160045260248bfd5b634e487b7160e01b8e52601160045260248efd5b9290999391851560001461111a5750610f8a565b91939990929461112990611da9565b94611082565b99602e83929b61114183889796611d87565b51901c14611153575b6110d890611be0565b83925061114a565b5060396111688c85611d87565b51821c1115611077565b9450829461105d565b50602d60f81b6001600160f81b03196111948c85611d87565b511614611058565b98610f8a565b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b83526011600452602483fd5b8588888481815260209281845260066040832001549282935b8184528386526005806040862001548610156112765761120f866004604088200192604088200161185e565b905490851b1c8552865260408420908480808061122c8c87611c10565b9588015486906001600160a01b031682821561126d575bf1156112625761125c9161125691611c03565b94611be0565b936111e3565b6040513d86823e3d90fd5b506108fc611243565b84837faf7b59e6c86cd7c8ea4dfcc3926826a19ee85cd219eaf4e1a1cfca41a9cc798d8280a280f35b6020906040516112ae81611757565b60608152828581830152828a01015201610ee9565b634e487b7160e01b84526011600452602484fd5b60405162461bcd60e51b8152602060048201526024808201527f4a534f4e2070617273696e67206661696c6564206f72206e6f206461746120666044820152631bdd5b9960e21b6064820152608490fd5b50600319608036820112610cb1576001600160a01b0360043581811692838203610c6e5784926001600160401b0391604435838111610bc15761136f903690600401611717565b929091606435948511610c6a57610120908536030112610bc1576002541690813b15610bc15785936113be604051968795869485946339624a6b60e21b86526004019260243560048701611a9a565b039134905af1801561140b576113f7575b50807f9ca0de0709c575c61710159cf212e68fa7f9bd8d600cb008ae8c028b7e54b70591a280f35b61140090611744565b610cb15781386113cf565b6040513d84823e3d90fd5b5060031960a036820112610cb157600435906001600160a01b0390602435908282168203610c6e576001600160401b0390606435828111610c6a5761145f903690600401611717565b91608435938411610c6657610120908436030112610c6a578587528660205260ff600760408920015416611580578587528660205260ff600760408920015460081c166115455786946002541690813b15610bc15785936114dd604051968795869485946339624a6b60e21b86526004019260443560048701611a9a565b039134905af1801561140b57611531575b50819052816020526007604083200161010061ff00198254161790557fa9e5ea555a64d717f026f961abe3fa55f2cdfc8f3c9dcb6e9ae55edec249ff318280a280f35b61153a90611744565b610cb15781386114ee565b60405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e48191a5cdd1c9a589d5d1959606a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272149bdd5b99081a5cc81b9bdd0818db1bdcd959606a1b6044820152606490fd5b8260031960c036820112610cb157600435926024358015158103610c9957604435926001600160a01b038085168503610bc1576001600160401b0392608435848111610c665761160f903690600401611717565b95909360a435958611610bd057610120908636030112610c66578888528760205260ff600760408a20015416156116e65750878752866020526007604088200160ff198154169055611685575b85877fe9f7d7fd0b133404f0ccff737d6f3594748e04bc5507adfaed35835ef98937118280a280f35b6002541691823b15610bc15790859392916116bd604051968795869485946339624a6b60e21b86526004019260643560048701611a9a565b039134905af1801561140b576116d7575b8080808061165c565b6116e090611744565b826116ce565b62461bcd60e51b815260206004820152600c60248201526b149bdd5b990818db1bdcd95960a21b6044820152606490fd5b9181601f84011215610c6e578235916001600160401b038311610c6e5760208381860195010111610c6e57565b6001600160401b03811161060f57604052565b604081019081106001600160401b0382111761060f57604052565b60c081019081106001600160401b0382111761060f57604052565b606081019081106001600160401b0382111761060f57604052565b90601f801991011681019081106001600160401b0382111761060f57604052565b6001600160401b03811161060f57601f01601f191660200190565b9291926117f0826117c9565b916117fe60405193846117a8565b829481845281830111610c6e578281602093846000960137010152565b906040600319830112610c6e5760043591602435906001600160401b038211610c6e5780602383011215610c6e5781602461185b936004013591016117e4565b90565b80548210156108c35760005260206000200190600090565b90600182811c921680156118a6575b602083101461189057565b634e487b7160e01b600052602260045260246000fd5b91607f1691611885565b90604051918260008254926118c484611876565b90818452600194858116908160001461193357506001146118f0575b50506118ee925003836117a8565b565b9093915060005260209081600020936000915b81831061191b5750506118ee935082010138806118e0565b85548884018501529485019487945091830191611903565b9150506118ee94506020925060ff191682840152151560051b82010138806118e0565b919082519283825260005b848110611982575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611961565b9080601f83011215610c6e5781602061185b933591016117e4565b6001600160401b03811161060f5760051b60200190565b9080601f83011215610c6e578135906119e0826119b1565b926119ee60405194856117a8565b828452602092838086019160051b83010192808411610c6e57848301915b848310611a1c5750505050505090565b82356001600160401b038111610c6e578691611a3d84848094890101611996565b815201920191611a0c565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e1982360301811215610c6e5701602081359101916001600160401b038211610c6e578136038313610c6e57565b9081526001600160a01b039091166020820152608060408201819052909392611ac69291850191611a48565b916060818403910152611b62611b47611b2c611b11611af6611ae88680611a69565b610120808a52890191611a48565b611b036020870187611a69565b9088830360208a0152611a48565b611b1e6040860186611a69565b908783036040890152611a48565b611b396060850185611a69565b908683036060880152611a48565b611b546080840184611a69565b908583036080870152611a48565b9160a08201356bffffffffffffffffffffffff60a01b8116809103610c6e5760a082015260c082013563ffffffff8116809103610c6e5761185b93611bc19160c0840152611bb360e0850185611a69565b9084830360e0860152611a48565b91611bd26101009182810190611a69565b929091818503910152611a48565b6000198114610fe35760010190565b80518210156108c35760209160051b010190565b91908203918211610fe357565b9060005b8151811015611d2e57611c278183611bef565b5151805160208092012060018086019060405190816000845494611c4a86611876565b9081845288840196898682169182600014611d0f575050600114611cd2575b5050611c77925003826117a8565b51902014611c8e5750611c8990611be0565b611c14565b60049384015493929091611ca191611bef565b51015191828102928184041490151715611cbd57506064900490565b601190634e487b7160e01b6000525260246000fd5b9150915060005285600020916000925b828410611cfc575050508185611c77928201013880611c69565b8054858501890152928701928101611ce2565b9250935050611c77945060ff19168652151560051b8201013880611c69565b505050600090565b60405190611d438261178d565b60006040838281528260208201520152565b60405190611d6282611772565b8160a06000918281528260208201528260408201528260608201528260808201520152565b9081518110156108c3570160200190565b60ff1660ff8114610fe35760010190565b8015610fe3576000190190565b516005811015611dc35790565b634e487b7160e01b600052602160045260246000fd5b611de1611d36565b50611dea611d36565b506040805192611df98461178d565b600091828552602090818601908482528087016000199182825280516102a081018181106001600160401b038211176124715782526014815285885b610280811061245b57505097845191611e4c611d55565b505b8a51825181101561244d576001600160f81b031990611e6d9084611d87565b5116607b60f81b8114808015612440575b6123945750607d60f81b8114808015612387575b6122095750601160f91b81146121fc57600160fd1b81811480156121ef575b80156121e2575b80156121d5575b6121ce57601d60f91b82146121a557600b60fa1b821461206a57600360fc1b8210158061205c575b801561204f575b8015612042575b8015612035575b8015612028575b611f44578110159081611f35575b50611f28575b611f218b51611be0565b8b52611e4e565b5060019950505050505050565b603f60f91b1015905038611f11565b5050918351858103611fad575b50611f5d828b8d612736565b80611fa25750611f6c90611be0565b918351858103611f7d575b50611f17565b611f8960a0918c611bef565b510160ff611f9981835116611d98565b16905238611f77565b9a5050505050505050565b611fb7908b611bef565b5180519060059081831015612014576001809314918215611fe5575b505015611f51579a5050505050505050565b8151919250811015612014576003149081612003575b503880611fd3565b60ff915060a0015116151538611ffb565b634e487b7160e01b8c52602160045260248cfd5b50603760f91b8214611f03565b50601d60fa1b8214611efc565b50603360f91b8214611ef5565b50602d60f81b8214611eee565b50603960f81b821115611ee7565b50508351858114159081612183575b508061214e575b15611f175795929798969390949182518281019081116110de575b6120ae6120a8828b611bef565b51611db6565b6005908181101561213a5760021490811561211a575b506120d8575b6120d390611da9565b61209b565b876120e3828b611bef565b510151151580612104575b156120ca578994979193969295989a9952611f17565b506080612111828b611bef565b510151156120ee565b90506121296120a8838c611bef565b9081101561201457600114386120c4565b634e487b7160e01b8d52602160045260248dfd5b5061215d6120a885518c611bef565b600581101561216f5760011415612080565b634e487b7160e01b8a52602160045260248afd5b61219291506120a8908c611bef565b600581101561216f576002141538612079565b505085518581019081116121ba578452611f17565b634e487b7160e01b8a52601160045260248afd5b5050611f17565b50600560fa1b8214611ebf565b50600960f91b8214611eb8565b50601160f81b8214611eb1565b5091611f5d828b8d61251a565b9050899691989594999a9792939a5060001461237f576001995b815185810190811161236b575b61223a818a611bef565b518a81015115158061235f575b61225a575061225590611da9565b612230565b9b90919493989b9a95969992979a5160058082101561213a57821015612014570361233d578585528b5160019081810180911161234b5760806122ae848f859460606122a68484611bef565b510152611bef565b5101521561233d57805b6122fc575b80156122c95750611f17565b6122d3818c611bef565b5182810151151590816122ef575b5015611f7757845238611f77565b60809150015115386122e1565b612306818c611bef565b518281015115159081612330575b506123285761232290611da9565b806122b8565b8085526122bd565b6080915001511538612314565b5060019a5050505050505050565b634e487b7160e01b8c52601160045260248cfd5b50608081015115612247565b634e487b7160e01b88526011600452602488fd5b600299612223565b50605d60f81b8214611e92565b9361239f9150611be0565b926123aa8b8d612485565b9190156124315785518c88820361240b575b5050156124045760015b60058110156123f05781528b518882015260019082015285518581019081116121ba578452611f17565b634e487b7160e01b8b52602160045260248bfd5b60026123c6565b60a09161241791611bef565b510160ff61242781835116611d98565b169052388c6123bc565b5060039b505050505050505050565b50605b60f81b8214611e7e565b505093519698505050505050565b612463611d55565b828285010152018690611e35565b634e487b7160e01b89526041600452602489fd5b602090929192612493611d55565b500180518351809110156124fb57506124e8604051936124b285611772565b600080865280602087015280604087015280606087015280608087015260a0860152825190856124e28383611bef565b52611bef565b506124f38151611be0565b905260019190565b919291600019810191508111610fe35761251491611bef565b51600091565b929190835191612528611d55565b506125338551611be0565b85525b8451815181101561272b5761254b9082611d87565b516001600160f81b031990601160f91b9082811682146126d65760f81c605c14806126ab575b6125895750505b6125828551611be0565b8552612536565b816125a06125978951611be0565b808a5285611d87565b51161490811561268f575b8115612673575b8115612657575b811561263b575b811561261f575b8115612603575b81156125e7575b50600003612578575050909152600190565b8651601d60fa1b92506125fa9084611d87565b511614386125d5565b9050603160f91b81612616885185611d87565b511614906125ce565b9050603760f91b81612632885185611d87565b511614906125c7565b9050603960f91b8161264e885185611d87565b511614906125c0565b9050603360f91b8161266a885185611d87565b511614906125b9565b9050601760fa1b81612686885185611d87565b511614906125b2565b9050602f60f81b816126a2885185611d87565b511614906125ab565b508651600181018091116126c157835111612571565b60246000634e487b7160e01b81526011600452fd5b505050506126e690849394612485565b919015612722576001908181018091116126c15760a0935190600384526020840152816040840152606083015260808201526000918291015290565b91905052600390565b505050909152600290565b9291906000845192612746611d55565b505b855181518110156128955761275d9082611d87565b516001600160f81b03198116600160fd1b8114908115612887575b8115612879575b811561286b575b811561285d575b811561284f575b8115612841575b506127db5760f81c602081109081156127d0575b506127c5576127be8651611be0565b8652612748565b505050909152600190565b607f915011386127af565b5050506001939192935b1561283a576127f49082612485565b90156128335760a0908293600093519060048352602083015260016040830152606082015260016080820152015261282c8151611da9565b9052600090565b5052600390565b5052600290565b605d60f81b1490503861279b565b607d60f81b81149150612794565b600b60fa1b8114915061278d565b600d60f81b81149150612786565b600560f91b8114915061277f565b600960f81b81149150612778565b5050939192936127e5565b92916128ac8282611c03565b916128b6836117c9565b926128c460405194856117a8565b8084526128d3601f19916117c9565b01366020850137805b8281106128eb57509193505050565b612922906001600160f81b03196129028289611d87565b511661291c6129118584611c03565b9160001a9187611d87565b53611be0565b6128dc56fea2646970667358221220aa3a7417c93a394ab071bd5ede07053b9562cff27c6042719c401e617ad4533564736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c9081634a98b902146115bb5750806355aa2f8c14611416578063763a3df6146113285780637faf8dcf14610e8b5780638b3b57a414610e5457806390a4cb9b14610e02578063b239a41214610dcb578063c428a27814610d1b578063c5ad404314610ce4578063c9640c0914610cb5578063e09a1094146100d05763eb0cde1d146100a557600080fd5b346100cd57806003193601126100cd576002546040516001600160a01b039091168152602090f35b80fd5b506101a03660031901126100cd576024356001600160401b038111610cb1576100fd903690600401611996565b6044356001600160401b038111610cad5761011c903690600401611996565b906064356001600160401b038111610c995761013c903690600401611996565b926001600160401b03608435116100cd573660236084350112156100cd576084356004013561016a816119b1565b9061017860405192836117a8565b8082526020820190813660248360051b608435010111610c9557602460843501905b60248360051b60843501018210610c9d5750505060a4356001600160401b038111610c99576101cd9036906004016119c8565b9560c4356001600160401b038111610c95576101ed9036906004016119c8565b916001600160401b0360e43511610c955736602360e435011215610c955760e435600401359161021c836119b1565b9261022a60405194856117a8565b80845260208401903660248260051b60e435010111610c6657602460e43501915b60248260051b60e43501018310610c7357505050610104356001600160a01b0381169003610c6e576101243515156101243503610c6e57610164356001600160401b038111610c6a576102a2903690600401611717565b6001600160401b036101843511610c66576101206101843536036003190112610c665786518b518091149081610c5b575b5080610c50575b15610c0b576004358852876020526040882054610bd45761012435610b52575b50506004358652856020526040862097600435895587516001600160401b038111610a835761032c60018b0154611876565b601f8111610b0d575b50806020601f8211600114610aa2578991610a97575b508160011b916000199060031b1c19161760018a01555b8051906001600160401b038211610a8357819061038260028c0154611876565b601f8111610a32575b50602090601f83116001146109c35789926109b8575b50508160011b916000199060031b1c19161760028901555b8051906001600160401b0382116109a45781906103d960038b0154611876565b601f8111610953575b50602090601f83116001146108e45788926108d9575b50508160011b916000199060031b1c19161760038801555b60078701805460ff19166001179055845b84518110156107ff576104348186611bef565b5186526004880160205260408620546107c6576104518186611bef565b5161045c828b611bef565b51906104688387611bef565b516001600160a01b0361047b8588611bef565b5116906040519261048b84611772565b835260208301938452604083015260608201528760808201528760a08201526104b48388611bef565b51885260048a01602052604088209181518355518051906001600160401b0382116106e75781906104e86001860154611876565b601f8111610775575b50602090601f8311600114610706578b926106fb575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b0382116106e7576105426002850154611876565b601f81116106a2575b50602090601f83116001146106305791806005949260a0948d92610625575b50508160011b916000199060031b1c19161760028501555b60038401600180841b036060830151166bffffffffffffffffffffffff841b8254161790556080810151600485015501519101556105c08186611bef565b5190600589015491600160401b83101561060f576105ed83600161060a950160058d015560058c0161185e565b819291549060031b600019811b9283911b16911916179055611be0565b610421565b634e487b7160e01b600052604160045260246000fd5b01519050388061056a565b90600285018b5260208b20918b5b601f198516811061068a5750926005949260019260a09583601f19811610610671575b505050811b016002850155610582565b015160001960f88460031b161c19169055388080610661565b9192602060018192868501518155019401920161063e565b600285018b5260208b20601f840160051c8101602085106106e0575b601f830160051c820181106106d457505061054b565b600081556001016106be565b50806106be565b634e487b7160e01b8a52604160045260248afd5b015190503880610507565b9250600185018b5260208b20908b935b601f198416851061075a576001945083601f19811610610741575b505050811b01600183015561051f565b015160001960f88460031b161c19169055388080610731565b81810151835560209485019460019093019290910190610716565b909150600185018b5260208b20601f840160051c8101602085106107bf575b90849392915b601f830160051c820181106107b05750506104f1565b6000815585945060010161079a565b5080610794565b60405162461bcd60e51b815260206004820152601160248201527050726f6a6563742049442065786973747360781b6044820152606490fd5b85828887600154600160401b81101561060f5760018101806001558110156108c3576001600052600435907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155602061086460405193604085526040850190611956565b91838303828501525191828152019290845b8181106108ad57505050807f2fceaf42a6664f3294222799a359650844542179732d12b26b6926bd338479a591600435930390a280f35b8251855260209485019490920191600101610876565b634e487b7160e01b600052603260045260246000fd5b0151905038806103f8565b925060038a018852602088209088935b601f1984168510610938576001945083601f1981161061091f575b505050811b016003880155610410565b015160001960f88460031b161c1916905538808061090f565b818101518355602094850194600190930192909101906108f4565b90915060038a01885260208820601f840160051c81016020851061099d575b90849392915b601f830160051c8201811061098e5750506103e2565b60008155859450600101610978565b5080610972565b634e487b7160e01b87526041600452602487fd5b0151905038806103a1565b925060028b018952602089209089935b601f1984168510610a17576001945083601f198116106109fe575b505050811b0160028901556103b9565b015160001960f88460031b161c191690553880806109ee565b818101518355602094850194600190930192909101906109d3565b90915060028b01895260208920601f840160051c810160208510610a7c575b90849392915b601f830160051c82018110610a6d57505061038b565b60008155859450600101610a57565b5080610a51565b634e487b7160e01b88526041600452602488fd5b90508901513861034b565b915060018b0189526020892089925b8b601f1984168510610af657506001935082601f19811610610add575b5050811b0160018a0155610362565b8b015160001960f88460031b161c191690553880610ace565b810151825560209384019360019092019101610ab1565b60018b01895260208920601f830160051c810160208410610b4b575b601f830160051c82018110610b3f575050610335565b60008155600101610b29565b5080610b29565b6002546001600160a01b031690813b15610bd057918891610b99936040518095819482936339624a6b60e21b84526101843560040191610104356101443560048701611a9a565b039134905af18015610bc557908791156102fa57610bb690611744565b610bc15785386102fa565b8580fd5b6040513d89823e3d90fd5b8880fd5b60405162461bcd60e51b815260206004820152600f60248201526e526f756e642049442065786973747360881b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4d69736d61746368656420696e707574206172726179730000000000000000006044820152606490fd5b5085518551146102da565b9050865114386102d3565b8780fd5b8680fd5b600080fd5b82356001600160a01b0381169003610bd057823581526020928301920161024b565b8480fd5b8380fd5b813581526020918201910161019a565b8280fd5b5080fd5b50346100cd57806003193601126100cd576020604051733879e146140b627a5c858a08e507b171d9e431398152f35b50346100cd57610cf33661181b565b507f0de2355f73246cb2852175af9385f91c8205be026c831a20ada4062931abdec08280a280f35b50346100cd5760203660031901126100cd57604090600435815280602052208054610d48600183016118b0565b9160ff610d57600283016118b0565b610dac610d66600385016118b0565b610d9e6007600687015496015493610d90604051998a998a5260e060208b015260e08a0190611956565b9088820360408a0152611956565b908682036060880152611956565b926080850152818116151560a085015260081c16151560c08301520390f35b50346100cd57610dda3661181b565b507f0e82eab4cbddb8a38b9fb81ba86a4a05ec8aa2c55dbea69d2e72857b4f90e9548280a280f35b50346100cd5760203660031901126100cd57600435600154811015610cb15760209060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154604051908152f35b50346100cd57610e633661181b565b507fdcad6660d3e34a68718474b3d2dfb7da8a012d967dfe595b0123a6112667f0688280a280f35b50346100cd57610e9a3661181b565b91610ea483611dd9565b80959250156112d7576000198581019586116112c357600380960493610ec9856119b1565b94610ed760405196876117a8565b808652610ee6601f19916119b1565b01815b81811061129f575050805b85518110156111ca578088029088820481036111b657600191808301908184116111a25790610f3d91610f4760209283610f2e828c611bef565b5101519060609586918c611bef565b510151908b6128a0565b92600291820180921161102f5790610f7b91610f7184610f67848d611bef565b510151928b611bef565b510151908a6128a0565b858695808889948a935b611043575b5050505080610ff9575b50610fd1575b92610fcc9360405192610fac84611757565b8352820152610fbb8289611bef565b52610fc68188611bef565b50611be0565b610ef4565b83600003938085058714901517610f9a575b634e487b7160e01b600052601160045260246000fd5b604d819692961161102f57600a0a818102919060008212600160ff1b821416610fe3578183051490151715610fe3579338610f94565b634e487b7160e01b87526011600452602487fd5b9091929881518a101561119c5789158061117b575b611172575b6110678a83611d87565b51603060f891821c10158061115b575b1561112f5783611106575b600a91828102928184051490151715610fe35761109f8b84611d87565b51901c90602f198083019280841387166110f257908d9183010192831291129080158216911516176110de57906110d88493929a611be0565b93610f85565b634e487b7160e01b8b52601160045260248bfd5b634e487b7160e01b8e52601160045260248efd5b9290999391851560001461111a5750610f8a565b91939990929461112990611da9565b94611082565b99602e83929b61114183889796611d87565b51901c14611153575b6110d890611be0565b83925061114a565b5060396111688c85611d87565b51821c1115611077565b9450829461105d565b50602d60f81b6001600160f81b03196111948c85611d87565b511614611058565b98610f8a565b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b83526011600452602483fd5b8588888481815260209281845260066040832001549282935b8184528386526005806040862001548610156112765761120f866004604088200192604088200161185e565b905490851b1c8552865260408420908480808061122c8c87611c10565b9588015486906001600160a01b031682821561126d575bf1156112625761125c9161125691611c03565b94611be0565b936111e3565b6040513d86823e3d90fd5b506108fc611243565b84837faf7b59e6c86cd7c8ea4dfcc3926826a19ee85cd219eaf4e1a1cfca41a9cc798d8280a280f35b6020906040516112ae81611757565b60608152828581830152828a01015201610ee9565b634e487b7160e01b84526011600452602484fd5b60405162461bcd60e51b8152602060048201526024808201527f4a534f4e2070617273696e67206661696c6564206f72206e6f206461746120666044820152631bdd5b9960e21b6064820152608490fd5b50600319608036820112610cb1576001600160a01b0360043581811692838203610c6e5784926001600160401b0391604435838111610bc15761136f903690600401611717565b929091606435948511610c6a57610120908536030112610bc1576002541690813b15610bc15785936113be604051968795869485946339624a6b60e21b86526004019260243560048701611a9a565b039134905af1801561140b576113f7575b50807f9ca0de0709c575c61710159cf212e68fa7f9bd8d600cb008ae8c028b7e54b70591a280f35b61140090611744565b610cb15781386113cf565b6040513d84823e3d90fd5b5060031960a036820112610cb157600435906001600160a01b0390602435908282168203610c6e576001600160401b0390606435828111610c6a5761145f903690600401611717565b91608435938411610c6657610120908436030112610c6a578587528660205260ff600760408920015416611580578587528660205260ff600760408920015460081c166115455786946002541690813b15610bc15785936114dd604051968795869485946339624a6b60e21b86526004019260443560048701611a9a565b039134905af1801561140b57611531575b50819052816020526007604083200161010061ff00198254161790557fa9e5ea555a64d717f026f961abe3fa55f2cdfc8f3c9dcb6e9ae55edec249ff318280a280f35b61153a90611744565b610cb15781386114ee565b60405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e48191a5cdd1c9a589d5d1959606a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272149bdd5b99081a5cc81b9bdd0818db1bdcd959606a1b6044820152606490fd5b8260031960c036820112610cb157600435926024358015158103610c9957604435926001600160a01b038085168503610bc1576001600160401b0392608435848111610c665761160f903690600401611717565b95909360a435958611610bd057610120908636030112610c66578888528760205260ff600760408a20015416156116e65750878752866020526007604088200160ff198154169055611685575b85877fe9f7d7fd0b133404f0ccff737d6f3594748e04bc5507adfaed35835ef98937118280a280f35b6002541691823b15610bc15790859392916116bd604051968795869485946339624a6b60e21b86526004019260643560048701611a9a565b039134905af1801561140b576116d7575b8080808061165c565b6116e090611744565b826116ce565b62461bcd60e51b815260206004820152600c60248201526b149bdd5b990818db1bdcd95960a21b6044820152606490fd5b9181601f84011215610c6e578235916001600160401b038311610c6e5760208381860195010111610c6e57565b6001600160401b03811161060f57604052565b604081019081106001600160401b0382111761060f57604052565b60c081019081106001600160401b0382111761060f57604052565b606081019081106001600160401b0382111761060f57604052565b90601f801991011681019081106001600160401b0382111761060f57604052565b6001600160401b03811161060f57601f01601f191660200190565b9291926117f0826117c9565b916117fe60405193846117a8565b829481845281830111610c6e578281602093846000960137010152565b906040600319830112610c6e5760043591602435906001600160401b038211610c6e5780602383011215610c6e5781602461185b936004013591016117e4565b90565b80548210156108c35760005260206000200190600090565b90600182811c921680156118a6575b602083101461189057565b634e487b7160e01b600052602260045260246000fd5b91607f1691611885565b90604051918260008254926118c484611876565b90818452600194858116908160001461193357506001146118f0575b50506118ee925003836117a8565b565b9093915060005260209081600020936000915b81831061191b5750506118ee935082010138806118e0565b85548884018501529485019487945091830191611903565b9150506118ee94506020925060ff191682840152151560051b82010138806118e0565b919082519283825260005b848110611982575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611961565b9080601f83011215610c6e5781602061185b933591016117e4565b6001600160401b03811161060f5760051b60200190565b9080601f83011215610c6e578135906119e0826119b1565b926119ee60405194856117a8565b828452602092838086019160051b83010192808411610c6e57848301915b848310611a1c5750505050505090565b82356001600160401b038111610c6e578691611a3d84848094890101611996565b815201920191611a0c565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e1982360301811215610c6e5701602081359101916001600160401b038211610c6e578136038313610c6e57565b9081526001600160a01b039091166020820152608060408201819052909392611ac69291850191611a48565b916060818403910152611b62611b47611b2c611b11611af6611ae88680611a69565b610120808a52890191611a48565b611b036020870187611a69565b9088830360208a0152611a48565b611b1e6040860186611a69565b908783036040890152611a48565b611b396060850185611a69565b908683036060880152611a48565b611b546080840184611a69565b908583036080870152611a48565b9160a08201356bffffffffffffffffffffffff60a01b8116809103610c6e5760a082015260c082013563ffffffff8116809103610c6e5761185b93611bc19160c0840152611bb360e0850185611a69565b9084830360e0860152611a48565b91611bd26101009182810190611a69565b929091818503910152611a48565b6000198114610fe35760010190565b80518210156108c35760209160051b010190565b91908203918211610fe357565b9060005b8151811015611d2e57611c278183611bef565b5151805160208092012060018086019060405190816000845494611c4a86611876565b9081845288840196898682169182600014611d0f575050600114611cd2575b5050611c77925003826117a8565b51902014611c8e5750611c8990611be0565b611c14565b60049384015493929091611ca191611bef565b51015191828102928184041490151715611cbd57506064900490565b601190634e487b7160e01b6000525260246000fd5b9150915060005285600020916000925b828410611cfc575050508185611c77928201013880611c69565b8054858501890152928701928101611ce2565b9250935050611c77945060ff19168652151560051b8201013880611c69565b505050600090565b60405190611d438261178d565b60006040838281528260208201520152565b60405190611d6282611772565b8160a06000918281528260208201528260408201528260608201528260808201520152565b9081518110156108c3570160200190565b60ff1660ff8114610fe35760010190565b8015610fe3576000190190565b516005811015611dc35790565b634e487b7160e01b600052602160045260246000fd5b611de1611d36565b50611dea611d36565b506040805192611df98461178d565b600091828552602090818601908482528087016000199182825280516102a081018181106001600160401b038211176124715782526014815285885b610280811061245b57505097845191611e4c611d55565b505b8a51825181101561244d576001600160f81b031990611e6d9084611d87565b5116607b60f81b8114808015612440575b6123945750607d60f81b8114808015612387575b6122095750601160f91b81146121fc57600160fd1b81811480156121ef575b80156121e2575b80156121d5575b6121ce57601d60f91b82146121a557600b60fa1b821461206a57600360fc1b8210158061205c575b801561204f575b8015612042575b8015612035575b8015612028575b611f44578110159081611f35575b50611f28575b611f218b51611be0565b8b52611e4e565b5060019950505050505050565b603f60f91b1015905038611f11565b5050918351858103611fad575b50611f5d828b8d612736565b80611fa25750611f6c90611be0565b918351858103611f7d575b50611f17565b611f8960a0918c611bef565b510160ff611f9981835116611d98565b16905238611f77565b9a5050505050505050565b611fb7908b611bef565b5180519060059081831015612014576001809314918215611fe5575b505015611f51579a5050505050505050565b8151919250811015612014576003149081612003575b503880611fd3565b60ff915060a0015116151538611ffb565b634e487b7160e01b8c52602160045260248cfd5b50603760f91b8214611f03565b50601d60fa1b8214611efc565b50603360f91b8214611ef5565b50602d60f81b8214611eee565b50603960f81b821115611ee7565b50508351858114159081612183575b508061214e575b15611f175795929798969390949182518281019081116110de575b6120ae6120a8828b611bef565b51611db6565b6005908181101561213a5760021490811561211a575b506120d8575b6120d390611da9565b61209b565b876120e3828b611bef565b510151151580612104575b156120ca578994979193969295989a9952611f17565b506080612111828b611bef565b510151156120ee565b90506121296120a8838c611bef565b9081101561201457600114386120c4565b634e487b7160e01b8d52602160045260248dfd5b5061215d6120a885518c611bef565b600581101561216f5760011415612080565b634e487b7160e01b8a52602160045260248afd5b61219291506120a8908c611bef565b600581101561216f576002141538612079565b505085518581019081116121ba578452611f17565b634e487b7160e01b8a52601160045260248afd5b5050611f17565b50600560fa1b8214611ebf565b50600960f91b8214611eb8565b50601160f81b8214611eb1565b5091611f5d828b8d61251a565b9050899691989594999a9792939a5060001461237f576001995b815185810190811161236b575b61223a818a611bef565b518a81015115158061235f575b61225a575061225590611da9565b612230565b9b90919493989b9a95969992979a5160058082101561213a57821015612014570361233d578585528b5160019081810180911161234b5760806122ae848f859460606122a68484611bef565b510152611bef565b5101521561233d57805b6122fc575b80156122c95750611f17565b6122d3818c611bef565b5182810151151590816122ef575b5015611f7757845238611f77565b60809150015115386122e1565b612306818c611bef565b518281015115159081612330575b506123285761232290611da9565b806122b8565b8085526122bd565b6080915001511538612314565b5060019a5050505050505050565b634e487b7160e01b8c52601160045260248cfd5b50608081015115612247565b634e487b7160e01b88526011600452602488fd5b600299612223565b50605d60f81b8214611e92565b9361239f9150611be0565b926123aa8b8d612485565b9190156124315785518c88820361240b575b5050156124045760015b60058110156123f05781528b518882015260019082015285518581019081116121ba578452611f17565b634e487b7160e01b8b52602160045260248bfd5b60026123c6565b60a09161241791611bef565b510160ff61242781835116611d98565b169052388c6123bc565b5060039b505050505050505050565b50605b60f81b8214611e7e565b505093519698505050505050565b612463611d55565b828285010152018690611e35565b634e487b7160e01b89526041600452602489fd5b602090929192612493611d55565b500180518351809110156124fb57506124e8604051936124b285611772565b600080865280602087015280604087015280606087015280608087015260a0860152825190856124e28383611bef565b52611bef565b506124f38151611be0565b905260019190565b919291600019810191508111610fe35761251491611bef565b51600091565b929190835191612528611d55565b506125338551611be0565b85525b8451815181101561272b5761254b9082611d87565b516001600160f81b031990601160f91b9082811682146126d65760f81c605c14806126ab575b6125895750505b6125828551611be0565b8552612536565b816125a06125978951611be0565b808a5285611d87565b51161490811561268f575b8115612673575b8115612657575b811561263b575b811561261f575b8115612603575b81156125e7575b50600003612578575050909152600190565b8651601d60fa1b92506125fa9084611d87565b511614386125d5565b9050603160f91b81612616885185611d87565b511614906125ce565b9050603760f91b81612632885185611d87565b511614906125c7565b9050603960f91b8161264e885185611d87565b511614906125c0565b9050603360f91b8161266a885185611d87565b511614906125b9565b9050601760fa1b81612686885185611d87565b511614906125b2565b9050602f60f81b816126a2885185611d87565b511614906125ab565b508651600181018091116126c157835111612571565b60246000634e487b7160e01b81526011600452fd5b505050506126e690849394612485565b919015612722576001908181018091116126c15760a0935190600384526020840152816040840152606083015260808201526000918291015290565b91905052600390565b505050909152600290565b9291906000845192612746611d55565b505b855181518110156128955761275d9082611d87565b516001600160f81b03198116600160fd1b8114908115612887575b8115612879575b811561286b575b811561285d575b811561284f575b8115612841575b506127db5760f81c602081109081156127d0575b506127c5576127be8651611be0565b8652612748565b505050909152600190565b607f915011386127af565b5050506001939192935b1561283a576127f49082612485565b90156128335760a0908293600093519060048352602083015260016040830152606082015260016080820152015261282c8151611da9565b9052600090565b5052600390565b5052600290565b605d60f81b1490503861279b565b607d60f81b81149150612794565b600b60fa1b8114915061278d565b600d60f81b81149150612786565b600560f91b8114915061277f565b600960f81b81149150612778565b5050939192936127e5565b92916128ac8282611c03565b916128b6836117c9565b926128c460405194856117a8565b8084526128d3601f19916117c9565b01366020850137805b8281106128eb57509193505050565b612922906001600160f81b03196129028289611d87565b511661291c6129118584611c03565b9160001a9187611d87565b53611be0565b6128dc56fea2646970667358221220aa3a7417c93a394ab071bd5ede07053b9562cff27c6042719c401e617ad4533564736f6c63430008110033",
  "devdoc": {
    "author": "arjanjohan",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A smart contract for cross-chain quadratic voting developed during EthDam 24. This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 50,
        "contract": "contracts/Funding.sol:Funding",
        "label": "fundingRounds",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(FundingRound)40_storage)"
      },
      {
        "astId": 53,
        "contract": "contracts/Funding.sol:Funding",
        "label": "roundIds",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/Funding.sol:Funding",
        "label": "gatewayContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IGateway)2436"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IGateway)2436": {
        "encoding": "inplace",
        "label": "contract IGateway",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(FundingRound)40_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Funding.FundingRound)",
        "numberOfBytes": "32",
        "value": "t_struct(FundingRound)40_storage"
      },
      "t_mapping(t_uint256,t_struct(Project)17_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Funding.Project)",
        "numberOfBytes": "32",
        "value": "t_struct(Project)17_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FundingRound)40_storage": {
        "encoding": "inplace",
        "label": "struct Funding.FundingRound",
        "members": [
          {
            "astId": 19,
            "contract": "contracts/Funding.sol:Funding",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21,
            "contract": "contracts/Funding.sol:Funding",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 23,
            "contract": "contracts/Funding.sol:Funding",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 25,
            "contract": "contracts/Funding.sol:Funding",
            "label": "curveType",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 30,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projects",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Project)17_storage)"
          },
          {
            "astId": 33,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projectIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 35,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalContributions",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 37,
            "contract": "contracts/Funding.sol:Funding",
            "label": "isOpen",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 39,
            "contract": "contracts/Funding.sol:Funding",
            "label": "isDistributed",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Project)17_storage": {
        "encoding": "inplace",
        "label": "struct Funding.Project",
        "members": [
          {
            "astId": 6,
            "contract": "contracts/Funding.sol:Funding",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8,
            "contract": "contracts/Funding.sol:Funding",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 10,
            "contract": "contracts/Funding.sol:Funding",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 12,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projectAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          },
          {
            "astId": 14,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalContributions",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalSquareRoots",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}