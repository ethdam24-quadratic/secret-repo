{
  "address": "0xd15dbaB3A09aEFfDD179AC645f375658F0B11B01",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "ContributionReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "ContributionReceivedInSecret",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundClosedInSecret",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        }
      ],
      "name": "RoundCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        }
      ],
      "name": "RoundCreatedInSecret",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sendToSecret",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "closeFundingRound",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "closedFundingRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "curveType",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "projectNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "projectDescriptions",
          "type": "string[]"
        },
        {
          "internalType": "address payable[]",
          "name": "projectAddresses",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "sendToSecret",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "createFundingRound",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        }
      ],
      "name": "createdFundingRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "json",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "distributeFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fundingRounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "curveType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalContributions",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayAddressSepolia",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayContract",
      "outputs": [
        {
          "internalType": "contract IGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcc27d1ca426ee8c210804e8692b3c3a5a6a8cde695dbf075fd0ef7aae7ede12e",
  "receipt": {
    "to": null,
    "from": "0xbb1DF1ab33786Ac6B91d9D16b445c7b66825979e",
    "contractAddress": "0xd15dbaB3A09aEFfDD179AC645f375658F0B11B01",
    "transactionIndex": 29,
    "gasUsed": "2235732",
    "logsBloom": "0x
    "blockHash": "0x319b3d9311996425ac0208a3371b045af94f413ee6d13be1ffede29ae4347d1f",
    "transactionHash": "0xcc27d1ca426ee8c210804e8692b3c3a5a6a8cde695dbf075fd0ef7aae7ede12e",
    "logs": [],
    "blockNumber": 5690326,
    "cumulativeGasUsed": "5210205",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 11,
  "solcInputHash": "92d153bb5d48f8448302ac0df2a50d10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"ContributionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"ContributionReceivedInSecret\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundClosedInSecret\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"}],\"name\":\"RoundCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"}],\"name\":\"RoundCreatedInSecret\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendToSecret\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"closeFundingRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"closedFundingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"curveType\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"projectNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"projectDescriptions\",\"type\":\"string[]\"},{\"internalType\":\"address payable[]\",\"name\":\"projectAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"sendToSecret\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"createFundingRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"}],\"name\":\"createdFundingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"distributeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundingRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"curveType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalContributions\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayAddressSepolia\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayContract\",\"outputs\":[{\"internalType\":\"contract IGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"arjanjohan\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A smart contract for cross-chain quadratic voting developed during EthDam 24. This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Funding.sol\":\"Funding\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"abdk-libraries-solidity/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (x << 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    unchecked {\\n      return int64 (x >> 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (int256 (x << 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    unchecked {\\n      require (x >= 0);\\n      return uint64 (uint128 (x >> 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = x >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    unchecked {\\n      return int256 (x) << 64;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) + y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) - y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) * y >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    unchecked {\\n      if (x == MIN_64x64) {\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\n        return -y << 63;\\n      } else {\\n        bool negativeResult = false;\\n        if (x < 0) {\\n          x = -x;\\n          negativeResult = true;\\n        }\\n        if (y < 0) {\\n          y = -y; // We rely on overflow behavior here\\n          negativeResult = !negativeResult;\\n        }\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\n        if (negativeResult) {\\n          require (absoluteResult <=\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n          require (absoluteResult <=\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n          return int256 (absoluteResult);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    unchecked {\\n      if (y == 0) return 0;\\n\\n      require (x >= 0);\\n\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\n\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      hi <<= 64;\\n\\n      require (hi <=\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n      return hi + lo;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      int256 result = (int256 (x) << 64) / y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x; // We rely on overflow behavior here\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      uint128 result = divuu (x, y);\\n      require (result <= uint128 (MAX_64x64));\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return -x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return x < 0 ? -x : x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != 0);\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 m = int256 (x) * int256 (y);\\n      require (m >= 0);\\n      require (m <\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\n      return int128 (sqrtu (uint256 (m)));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      bool negative = x < 0 && y & 1 == 1;\\n\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\n      uint256 absResult;\\n      absResult = 0x100000000000000000000000000000000;\\n\\n      if (absX <= 0x10000000000000000) {\\n        absX <<= 63;\\n        while (y != 0) {\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x2 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x4 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x8 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          y >>= 4;\\n        }\\n\\n        absResult >>= 64;\\n      } else {\\n        uint256 absXShift = 63;\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n        uint256 resultShift = 0;\\n        while (y != 0) {\\n          require (absXShift < 64);\\n\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n            resultShift += absXShift;\\n            if (absResult > 0x100000000000000000000000000000000) {\\n              absResult >>= 1;\\n              resultShift += 1;\\n            }\\n          }\\n          absX = absX * absX >> 127;\\n          absXShift <<= 1;\\n          if (absX >= 0x100000000000000000000000000000000) {\\n              absX >>= 1;\\n              absXShift += 1;\\n          }\\n\\n          y >>= 1;\\n        }\\n\\n        require (resultShift < 64);\\n        absResult >>= 64 - resultShift;\\n      }\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= 0);\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      int256 msb = 0;\\n      int256 xc = x;\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 result = msb - 64 << 64;\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n        ux *= ux;\\n        uint256 b = ux >> 255;\\n        ux >>= 127 + b;\\n        result += bit * int256 (b);\\n      }\\n\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      return int128 (int256 (\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n\\n      if (x & 0x8000000000000000 > 0)\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n      if (x & 0x4000000000000000 > 0)\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n      if (x & 0x2000000000000000 > 0)\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n      if (x & 0x1000000000000000 > 0)\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n      if (x & 0x800000000000000 > 0)\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n      if (x & 0x400000000000000 > 0)\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n      if (x & 0x200000000000000 > 0)\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n      if (x & 0x100000000000000 > 0)\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n      if (x & 0x80000000000000 > 0)\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n      if (x & 0x40000000000000 > 0)\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n      if (x & 0x20000000000000 > 0)\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n      if (x & 0x10000000000000 > 0)\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n      if (x & 0x8000000000000 > 0)\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n      if (x & 0x4000000000000 > 0)\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n      if (x & 0x2000000000000 > 0)\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n      if (x & 0x1000000000000 > 0)\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n      if (x & 0x800000000000 > 0)\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n      if (x & 0x400000000000 > 0)\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n      if (x & 0x200000000000 > 0)\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n      if (x & 0x100000000000 > 0)\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n      if (x & 0x80000000000 > 0)\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n      if (x & 0x40000000000 > 0)\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n      if (x & 0x20000000000 > 0)\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n      if (x & 0x10000000000 > 0)\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n      if (x & 0x8000000000 > 0)\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n      if (x & 0x4000000000 > 0)\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n      if (x & 0x2000000000 > 0)\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n      if (x & 0x1000000000 > 0)\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n      if (x & 0x800000000 > 0)\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n      if (x & 0x400000000 > 0)\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n      if (x & 0x200000000 > 0)\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n      if (x & 0x100000000 > 0)\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n      if (x & 0x80000000 > 0)\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n      if (x & 0x40000000 > 0)\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n      if (x & 0x20000000 > 0)\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n      if (x & 0x10000000 > 0)\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n      if (x & 0x8000000 > 0)\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n      if (x & 0x4000000 > 0)\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n      if (x & 0x2000000 > 0)\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n      if (x & 0x1000000 > 0)\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n      if (x & 0x800000 > 0)\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n      if (x & 0x400000 > 0)\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n      if (x & 0x200000 > 0)\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n      if (x & 0x100000 > 0)\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n      if (x & 0x80000 > 0)\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n      if (x & 0x40000 > 0)\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n      if (x & 0x20000 > 0)\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n      if (x & 0x10000 > 0)\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n      if (x & 0x8000 > 0)\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n      if (x & 0x4000 > 0)\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n      if (x & 0x2000 > 0)\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n      if (x & 0x1000 > 0)\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n      if (x & 0x800 > 0)\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n      if (x & 0x400 > 0)\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n      if (x & 0x200 > 0)\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n      if (x & 0x100 > 0)\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n      if (x & 0x80 > 0)\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n      if (x & 0x40 > 0)\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n      if (x & 0x20 > 0)\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n      if (x & 0x10 > 0)\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n      if (x & 0x8 > 0)\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n      if (x & 0x4 > 0)\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n      if (x & 0x2 > 0)\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n      if (x & 0x1 > 0)\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\n      require (result <= uint256 (int256 (MAX_64x64)));\\n\\n      return int128 (int256 (result));\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      return exp_2 (\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      uint256 result;\\n\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        result = (x << 64) / y;\\n      else {\\n        uint256 msb = 192;\\n        uint256 xc = x >> 192;\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 hi = result * (y >> 128);\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 xh = x >> 192;\\n        uint256 xl = x << 64;\\n\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n        lo = hi << 128;\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n\\n        result += xh == hi >> 128 ? xl / y : 1;\\n      }\\n\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return uint128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    unchecked {\\n      if (x == 0) return 0;\\n      else {\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n        if (xx >= 0x4) { r <<= 1; }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return uint128 (r < r1 ? r : r1);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1364fdc24192b982f647c7fc68dcb2f6fc1b5e201843e773144bd23a76cb3b97\",\"license\":\"BSD-4-Clause\"},\"contracts/Funding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\nimport \\\"../interfaces/IGateway.sol\\\";\\nimport \\\"./JsmnSolLib.sol\\\";\\n\\n/**\\n * A smart contract for cross-chain quadratic voting developed during EthDam 24.\\n * This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.\\n * @author arjanjohan\\n */\\ncontract Funding {\\n\\t// ========================================\\n\\t//     ENUM, STRUCTS AND MAPPINGS\\n\\t// ========================================\\n\\n\\tstruct Project {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\taddress payable projectAddress;\\n\\t\\tuint256 totalContributions;\\n\\t\\tuint256 totalSquareRoots;\\n\\t}\\n\\n\\tstruct FundingRound {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\tstring curveType;\\n\\t\\tmapping(uint256 => Project) projects;\\n\\t\\tuint256[] projectIds;\\n\\t\\tuint256 totalContributions;\\n\\t\\tbool isOpen;\\n\\t}\\n\\n\\tmapping(uint256 => FundingRound) public fundingRounds;\\n\\tuint256[] public roundIds;\\n\\n\\t// ========================================\\n\\t//     CONSTRUCTOR AND VALUES\\n\\t// ========================================\\n\\n\\tIGateway public gatewayContract;\\n\\taddress public gatewayAddressSepolia =\\n\\t\\taddress(0x3879E146140b627a5C858a08e507B171D9E43139);\\n\\n\\tconstructor() {\\n\\t\\tgatewayContract = IGateway(gatewayAddressSepolia);\\n\\t}\\n\\n\\t// ========================================\\n\\t//     EVENTS\\n\\t// ========================================\\n\\tevent RoundCreated(\\n\\t\\tuint256 indexed roundId,\\n\\t\\tstring name,\\n\\t\\tuint256[] projectIds\\n\\t);\\n\\n\\tevent RoundCreatedInSecret(\\n\\t\\tuint256 indexed roundId,\\n\\t\\tstring name,\\n\\t\\tuint256[] projectIds\\n\\t);\\n\\n\\tevent ContributionReceived(address indexed contributor);\\n\\n\\tevent ContributionReceivedInSecret(\\n\\t\\taddress indexed contributor,\\n\\t\\tuint256 indexed roundId\\n\\t);\\n\\n\\tevent RoundClosed(uint256 indexed roundId);\\n\\n\\tevent RoundClosedInSecret(uint256 indexed roundId);\\n\\n\\t// ========================================\\n\\t//     CORE FUNCTIONS\\n\\t// ========================================\\n\\n\\tfunction createFundingRound(\\n\\t\\tuint256 id,\\n\\t\\tstring memory name,\\n\\t\\tstring memory description,\\n\\t\\tstring memory curveType,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses,\\n\\t\\tbool sendToSecret,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\tvalidateProjectParameters(\\n\\t\\t\\tprojectIds,\\n\\t\\t\\tprojectNames,\\n\\t\\t\\tprojectDescriptions,\\n\\t\\t\\tprojectAddresses\\n\\t\\t);\\n\\t\\trequire(fundingRounds[id].id == 0, \\\"Round ID exists\\\");\\n\\n\\t\\tif (sendToSecret) {\\n\\t\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\t\\tpayloadHash,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\troutingInfo,\\n\\t\\t\\t\\tinfo\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tFundingRound storage round = fundingRounds[id];\\n\\t\\tsetupFundingRound(\\n\\t\\t\\tround,\\n\\t\\t\\tid,\\n\\t\\t\\tname,\\n\\t\\t\\tdescription,\\n\\t\\t\\tcurveType,\\n\\t\\t\\tprojectIds,\\n\\t\\t\\tprojectNames,\\n\\t\\t\\tprojectDescriptions,\\n\\t\\t\\tprojectAddresses\\n\\t\\t);\\n\\t\\troundIds.push(id);\\n\\t\\temit RoundCreated(id, name, projectIds);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction createdFundingRound(\\n\\t\\tuint256 id,\\n\\t\\tstring memory name,\\n\\t\\tuint256[] memory projectIds\\n\\t) public {\\n\\t\\temit RoundCreatedInSecret(id, name, projectIds);\\n\\t}\\n\\n\\tfunction contribute(\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\tgatewayContract.send{ value: msg.value }( // todo change this value\\n\\t\\t\\tpayloadHash,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\troutingInfo,\\n\\t\\t\\tinfo\\n\\t\\t);\\n\\t\\temit ContributionReceived(msg.sender);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction contribute(uint256 roundId) public {\\n\\t\\temit ContributionReceivedInSecret(msg.sender, roundId);\\n\\t}\\n\\n\\tfunction closeFundingRound(\\n\\t\\tuint256 roundId,\\n\\t\\tbool sendToSecret,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\trequire(fundingRounds[roundId].isOpen, \\\"Round closed\\\");\\n\\t\\tfundingRounds[roundId].isOpen = false;\\n\\n\\t\\tstring memory json = \\\"\\\"; // todo update this from secret\\n\\t\\tif (sendToSecret) {\\n\\t\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\t\\tpayloadHash,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\troutingInfo,\\n\\t\\t\\t\\tinfo\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\t// Different function to retrieve results\\n\\t\\t}\\n\\t\\tdistributeFunds(json, roundId);\\n\\t\\temit RoundClosed(roundId);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction closedFundingRound(uint256 roundId) public {\\n\\t\\temit RoundClosedInSecret(roundId);\\n\\t}\\n\\n\\t// ========================================\\n\\t//     HELPER FUNCTIONS\\n\\t// ========================================\\n\\n\\tfunction validateProjectParameters(\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses\\n\\t) private pure {\\n\\t\\trequire(\\n\\t\\t\\tprojectIds.length == projectNames.length &&\\n\\t\\t\\t\\tprojectNames.length == projectDescriptions.length &&\\n\\t\\t\\t\\tprojectDescriptions.length == projectAddresses.length,\\n\\t\\t\\t\\\"Mismatched input arrays\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setupFundingRound(\\n\\t\\tFundingRound storage round,\\n\\t\\tuint256 id,\\n\\t\\tstring memory name,\\n\\t\\tstring memory description,\\n\\t\\tstring memory curveType,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses\\n\\t) private {\\n\\t\\tround.id = id;\\n\\t\\tround.name = name;\\n\\t\\tround.description = description;\\n\\t\\tround.curveType = curveType;\\n\\t\\tround.isOpen = true;\\n\\n\\t\\tfor (uint256 i = 0; i < projectIds.length; i++) {\\n\\t\\t\\trequire(round.projects[projectIds[i]].id == 0, \\\"Project ID exists\\\");\\n\\t\\t\\tround.projects[projectIds[i]] = Project({\\n\\t\\t\\t\\tid: projectIds[i],\\n\\t\\t\\t\\tname: projectNames[i],\\n\\t\\t\\t\\tdescription: projectDescriptions[i],\\n\\t\\t\\t\\tprojectAddress: projectAddresses[i],\\n\\t\\t\\t\\ttotalContributions: 0,\\n\\t\\t\\t\\ttotalSquareRoots: 0\\n\\t\\t\\t});\\n\\t\\t\\tround.projectIds.push(projectIds[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction validRound(uint256 roundId) private view returns (bool) {\\n\\t\\treturn fundingRounds[roundId].isOpen && fundingRounds[roundId].id != 0;\\n\\t}\\n\\n\\tfunction processContributions(\\n\\t\\tuint256 roundId,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tuint256[] memory amounts\\n\\t) private view returns (uint256 totalContributed) {\\n\\t\\tfor (uint256 i = 0; i < amounts.length; i++) {\\n\\t\\t\\tProject storage project = fundingRounds[roundId].projects[\\n\\t\\t\\t\\tprojectIds[i]\\n\\t\\t\\t];\\n\\t\\t\\trequire(project.id != 0, \\\"Project not found\\\");\\n\\t\\t\\ttotalContributed += amounts[i];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction distributeFunds(string memory json, uint256 roundId) public {\\n\\t\\t// Parse the JSON input\\n\\t\\tuint256 numTokens;\\n\\t\\tJsmnSolLib.Token[] memory tokens;\\n\\t\\t(, tokens, numTokens) = JsmnSolLib.parse(json, 20);\\n\\n\\t\\t// Ensure JSON parsing succeeded\\n\\t\\trequire(numTokens > 0, \\\"JSON parsing failed or no data found\\\");\\n\\n\\t\\tuint256 totalFunds = fundingRounds[roundId].totalContributions;\\n\\n\\t\\t// Iterate over each project in the round\\n\\t\\tfor (uint256 i = 0; i < fundingRounds[roundId].projectIds.length; i++) {\\n\\t\\t\\tProject storage project = fundingRounds[roundId].projects[\\n\\t\\t\\t\\tfundingRounds[roundId].projectIds[i]\\n\\t\\t\\t];\\n\\n\\t\\t\\t// Find matching project ID in JSON and calculate the payout\\n\\t\\t\\tuint256 payout = 0;\\n\\t\\t\\tfor (uint256 j = 1; j < numTokens - 1; j += 3) {\\n\\t\\t\\t\\t// Using getBytes to extract the project id from json\\n\\t\\t\\t\\tstring memory projectId = JsmnSolLib.getBytes(\\n\\t\\t\\t\\t\\tjson,\\n\\t\\t\\t\\t\\ttokens[j].start,\\n\\t\\t\\t\\t\\ttokens[j].end\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\tkeccak256(bytes(projectId)) ==\\n\\t\\t\\t\\t\\tkeccak256(bytes(project.name))\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t// Calculate payout based on the funding percentage extracted using getBytes\\n\\t\\t\\t\\t\\tstring memory fundingStr = JsmnSolLib.getBytes(\\n\\t\\t\\t\\t\\t\\tjson,\\n\\t\\t\\t\\t\\t\\ttokens[j + 1].start,\\n\\t\\t\\t\\t\\t\\ttokens[j + 1].end\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\tuint256 fundingPercentage = uint256(\\n\\t\\t\\t\\t\\t\\tJsmnSolLib.parseInt(fundingStr)\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\tpayout =\\n\\t\\t\\t\\t\\t\\t(project.totalContributions * fundingPercentage) /\\n\\t\\t\\t\\t\\t\\t100;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Transfer payout to project address and decrement total funds\\n\\t\\t\\tproject.projectAddress.transfer(payout);\\n\\t\\t\\ttotalFunds -= payout;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xc0fc05379421a319cd14edbb743b75e821852c1455211b03893b624ac6c9ddef\",\"license\":\"MIT\"},\"contracts/JsmnSolLib.sol\":{\"content\":\"/*\\nCopyright (c) 2017 Christoph Niemann\\nPermission is hereby granted, free of charge, to any person obtaining a copy of\\nthis software and associated documentation files (the \\\"Software\\\"), to deal in\\nthe Software without restriction, including without limitation the rights to\\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\nof the Software, and to permit persons to whom the Software is furnished to do\\nso, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary JsmnSolLib {\\n\\tenum JsmnType {\\n\\t\\tUNDEFINED,\\n\\t\\tOBJECT,\\n\\t\\tARRAY,\\n\\t\\tSTRING,\\n\\t\\tPRIMITIVE\\n\\t}\\n\\n\\tuint constant RETURN_SUCCESS = 0;\\n\\tuint constant RETURN_ERROR_INVALID_JSON = 1;\\n\\tuint constant RETURN_ERROR_PART = 2;\\n\\tuint constant RETURN_ERROR_NO_MEM = 3;\\n\\n\\tstruct Token {\\n\\t\\tJsmnType jsmnType;\\n\\t\\tuint start;\\n\\t\\tbool startSet;\\n\\t\\tuint end;\\n\\t\\tbool endSet;\\n\\t\\tuint8 size;\\n\\t}\\n\\n\\tstruct Parser {\\n\\t\\tuint pos;\\n\\t\\tuint toknext;\\n\\t\\tint toksuper;\\n\\t}\\n\\n\\tfunction init(\\n\\t\\tuint length\\n\\t) internal pure returns (Parser memory, Token[] memory) {\\n\\t\\tParser memory p = Parser(0, 0, -1);\\n\\t\\tToken[] memory t = new Token[](length);\\n\\t\\treturn (p, t);\\n\\t}\\n\\n\\tfunction allocateToken(\\n\\t\\tParser memory parser,\\n\\t\\tToken[] memory tokens\\n\\t) internal pure returns (bool, Token memory) {\\n\\t\\tif (parser.toknext >= tokens.length) {\\n\\t\\t\\t// no more space in tokens\\n\\t\\t\\treturn (false, tokens[tokens.length - 1]);\\n\\t\\t}\\n\\t\\tToken memory token = Token(JsmnType.UNDEFINED, 0, false, 0, false, 0);\\n\\t\\ttokens[parser.toknext] = token;\\n\\t\\tparser.toknext++;\\n\\t\\treturn (true, token);\\n\\t}\\n\\n\\tfunction fillToken(\\n\\t\\tToken memory token,\\n\\t\\tJsmnType jsmnType,\\n\\t\\tuint start,\\n\\t\\tuint end\\n\\t) internal pure {\\n\\t\\ttoken.jsmnType = jsmnType;\\n\\t\\ttoken.start = start;\\n\\t\\ttoken.startSet = true;\\n\\t\\ttoken.end = end;\\n\\t\\ttoken.endSet = true;\\n\\t\\ttoken.size = 0;\\n\\t}\\n\\n\\tfunction parseString(\\n\\t\\tParser memory parser,\\n\\t\\tToken[] memory tokens,\\n\\t\\tbytes memory s\\n\\t) internal pure returns (uint) {\\n\\t\\tuint start = parser.pos;\\n\\t\\tbool success;\\n\\t\\tToken memory token;\\n\\t\\tparser.pos++;\\n\\n\\t\\tfor (; parser.pos < s.length; parser.pos++) {\\n\\t\\t\\tbytes1 c = s[parser.pos];\\n\\n\\t\\t\\t// Quote -> end of string\\n\\t\\t\\tif (c == '\\\"') {\\n\\t\\t\\t\\t(success, token) = allocateToken(parser, tokens);\\n\\t\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t\\tparser.pos = start;\\n\\t\\t\\t\\t\\treturn RETURN_ERROR_NO_MEM;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfillToken(token, JsmnType.STRING, start + 1, parser.pos);\\n\\t\\t\\t\\treturn RETURN_SUCCESS;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (uint8(c) == 92 && parser.pos + 1 < s.length) {\\n\\t\\t\\t\\t// handle escaped characters: skip over it\\n\\t\\t\\t\\tparser.pos++;\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\ts[parser.pos] == '\\\"' ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"/\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"\\\\\\\\\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"f\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"r\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"n\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"b\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"t\\\"\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// all other values are INVALID\\n\\t\\t\\t\\t\\tparser.pos = start;\\n\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tparser.pos = start;\\n\\t\\treturn RETURN_ERROR_PART;\\n\\t}\\n\\n\\tfunction parsePrimitive(\\n\\t\\tParser memory parser,\\n\\t\\tToken[] memory tokens,\\n\\t\\tbytes memory s\\n\\t) internal pure returns (uint) {\\n\\t\\tbool found = false;\\n\\t\\tuint start = parser.pos;\\n\\t\\tbytes1 c;\\n\\t\\tbool success;\\n\\t\\tToken memory token;\\n\\t\\tfor (; parser.pos < s.length; parser.pos++) {\\n\\t\\t\\tc = s[parser.pos];\\n\\t\\t\\tif (\\n\\t\\t\\t\\tc == \\\" \\\" ||\\n\\t\\t\\t\\tc == \\\"\\\\t\\\" ||\\n\\t\\t\\t\\tc == \\\"\\\\n\\\" ||\\n\\t\\t\\t\\tc == \\\"\\\\r\\\" ||\\n\\t\\t\\t\\tc == \\\",\\\" ||\\n\\t\\t\\t\\tc == 0x7d ||\\n\\t\\t\\t\\tc == 0x5d\\n\\t\\t\\t) {\\n\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tif (uint8(c) < 32 || uint8(c) > 127) {\\n\\t\\t\\t\\tparser.pos = start;\\n\\t\\t\\t\\treturn RETURN_ERROR_INVALID_JSON;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (!found) {\\n\\t\\t\\tparser.pos = start;\\n\\t\\t\\treturn RETURN_ERROR_PART;\\n\\t\\t}\\n\\n\\t\\t// found the end\\n\\t\\t(success, token) = allocateToken(parser, tokens);\\n\\t\\tif (!success) {\\n\\t\\t\\tparser.pos = start;\\n\\t\\t\\treturn RETURN_ERROR_NO_MEM;\\n\\t\\t}\\n\\t\\tfillToken(token, JsmnType.PRIMITIVE, start, parser.pos);\\n\\t\\tparser.pos--;\\n\\t\\treturn RETURN_SUCCESS;\\n\\t}\\n\\n\\tfunction parse(\\n\\t\\tstring memory json,\\n\\t\\tuint numberElements\\n\\t) internal pure returns (uint, Token[] memory tokens, uint) {\\n\\t\\tbytes memory s = bytes(json);\\n\\t\\tbool success;\\n\\t\\tParser memory parser;\\n\\t\\t(parser, tokens) = init(numberElements);\\n\\n\\t\\t// Token memory token;\\n\\t\\tuint r;\\n\\t\\tuint count = parser.toknext;\\n\\t\\tuint i;\\n\\t\\tToken memory token;\\n\\n\\t\\tfor (; parser.pos < s.length; parser.pos++) {\\n\\t\\t\\tbytes1 c = s[parser.pos];\\n\\n\\t\\t\\t// 0x7b, 0x5b opening curly parentheses or brackets\\n\\t\\t\\tif (c == 0x7b || c == 0x5b) {\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\t(success, token) = allocateToken(parser, tokens);\\n\\t\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t\\treturn (RETURN_ERROR_NO_MEM, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (parser.toksuper != -1) {\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].size++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\ttoken.jsmnType = (c == 0x7b ? JsmnType.OBJECT : JsmnType.ARRAY);\\n\\t\\t\\t\\ttoken.start = parser.pos;\\n\\t\\t\\t\\ttoken.startSet = true;\\n\\t\\t\\t\\tparser.toksuper = int(parser.toknext - 1);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// closing curly parentheses or brackets\\n\\t\\t\\tif (c == 0x7d || c == 0x5d) {\\n\\t\\t\\t\\tJsmnType tokenType = (\\n\\t\\t\\t\\t\\tc == 0x7d ? JsmnType.OBJECT : JsmnType.ARRAY\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tbool isUpdated = false;\\n\\t\\t\\t\\tfor (i = parser.toknext - 1; i >= 0; i--) {\\n\\t\\t\\t\\t\\ttoken = tokens[i];\\n\\t\\t\\t\\t\\tif (token.startSet && !token.endSet) {\\n\\t\\t\\t\\t\\t\\tif (token.jsmnType != tokenType) {\\n\\t\\t\\t\\t\\t\\t\\t// found a token that hasn't been closed but from a different type\\n\\t\\t\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tparser.toksuper = -1;\\n\\t\\t\\t\\t\\t\\ttokens[i].end = parser.pos + 1;\\n\\t\\t\\t\\t\\t\\ttokens[i].endSet = true;\\n\\t\\t\\t\\t\\t\\tisUpdated = true;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (!isUpdated) {\\n\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfor (; i > 0; i--) {\\n\\t\\t\\t\\t\\ttoken = tokens[i];\\n\\t\\t\\t\\t\\tif (token.startSet && !token.endSet) {\\n\\t\\t\\t\\t\\t\\tparser.toksuper = int(i);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (i == 0) {\\n\\t\\t\\t\\t\\ttoken = tokens[i];\\n\\t\\t\\t\\t\\tif (token.startSet && !token.endSet) {\\n\\t\\t\\t\\t\\t\\tparser.toksuper = int(i);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 0x42\\n\\t\\t\\tif (c == '\\\"') {\\n\\t\\t\\t\\tr = parseString(parser, tokens, s);\\n\\n\\t\\t\\t\\tif (r != RETURN_SUCCESS) {\\n\\t\\t\\t\\t\\treturn (r, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t//JsmnError.INVALID;\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\tif (parser.toksuper != -1) tokens[uint(parser.toksuper)].size++;\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ' ', \\\\r, \\\\t, \\\\n\\n\\t\\t\\tif (c == \\\" \\\" || c == 0x11 || c == 0x12 || c == 0x14) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 0x3a\\n\\t\\t\\tif (c == \\\":\\\") {\\n\\t\\t\\t\\tparser.toksuper = int(parser.toknext - 1);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (c == \\\",\\\") {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\tparser.toksuper != -1 &&\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].jsmnType != JsmnType.ARRAY &&\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].jsmnType != JsmnType.OBJECT\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tfor (i = parser.toknext - 1; i >= 0; i--) {\\n\\t\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\t\\ttokens[i].jsmnType == JsmnType.ARRAY ||\\n\\t\\t\\t\\t\\t\\t\\ttokens[i].jsmnType == JsmnType.OBJECT\\n\\t\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\t\\tif (tokens[i].startSet && !tokens[i].endSet) {\\n\\t\\t\\t\\t\\t\\t\\t\\tparser.toksuper = int(i);\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Primitive\\n\\t\\t\\tif (\\n\\t\\t\\t\\t(c >= \\\"0\\\" && c <= \\\"9\\\") ||\\n\\t\\t\\t\\tc == \\\"-\\\" ||\\n\\t\\t\\t\\tc == \\\"f\\\" ||\\n\\t\\t\\t\\tc == \\\"t\\\" ||\\n\\t\\t\\t\\tc == \\\"n\\\"\\n\\t\\t\\t) {\\n\\t\\t\\t\\tif (parser.toksuper != -1) {\\n\\t\\t\\t\\t\\ttoken = tokens[uint(parser.toksuper)];\\n\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\ttoken.jsmnType == JsmnType.OBJECT ||\\n\\t\\t\\t\\t\\t\\t(token.jsmnType == JsmnType.STRING && token.size != 0)\\n\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tr = parsePrimitive(parser, tokens, s);\\n\\t\\t\\t\\tif (r != RETURN_SUCCESS) {\\n\\t\\t\\t\\t\\treturn (r, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\tif (parser.toksuper != -1) {\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].size++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// printable char\\n\\t\\t\\tif (c >= 0x20 && c <= 0x7e) {\\n\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn (RETURN_SUCCESS, tokens, parser.toknext);\\n\\t}\\n\\n\\tfunction getBytes(\\n\\t\\tstring memory json,\\n\\t\\tuint start,\\n\\t\\tuint end\\n\\t) internal pure returns (string memory) {\\n\\t\\tbytes memory s = bytes(json);\\n\\t\\tbytes memory result = new bytes(end - start);\\n\\t\\tfor (uint i = start; i < end; i++) {\\n\\t\\t\\tresult[i - start] = s[i];\\n\\t\\t}\\n\\t\\treturn string(result);\\n\\t}\\n\\n\\t// parseInt\\n\\tfunction parseInt(string memory _a) internal pure returns (int) {\\n\\t\\treturn parseInt(_a, 0);\\n\\t}\\n\\n\\t// parseInt(parseFloat*10^_b)\\n\\tfunction parseInt(string memory _a, uint _b) internal pure returns (int) {\\n\\t\\tbytes memory bresult = bytes(_a);\\n\\t\\tint mint = 0;\\n\\t\\tbool decimals = false;\\n\\t\\tbool negative = false;\\n\\t\\tfor (uint i = 0; i < bresult.length; i++) {\\n\\t\\t\\tif ((i == 0) && (bresult[i] == \\\"-\\\")) {\\n\\t\\t\\t\\tnegative = true;\\n\\t\\t\\t}\\n\\t\\t\\tif ((uint8(bresult[i]) >= 48) && (uint8(bresult[i]) <= 57)) {\\n\\t\\t\\t\\tif (decimals) {\\n\\t\\t\\t\\t\\tif (_b == 0) break;\\n\\t\\t\\t\\t\\telse _b--;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tmint *= 10;\\n\\t\\t\\t\\tmint += int(uint256(uint8(bresult[i]))) - 48;\\n\\t\\t\\t} else if (uint8(bresult[i]) == 46) decimals = true;\\n\\t\\t}\\n\\t\\tif (_b > 0) mint *= int(10 ** _b);\\n\\t\\tif (negative) mint *= -1;\\n\\t\\treturn mint;\\n\\t}\\n\\n\\tfunction uint2str(uint i) internal pure returns (string memory) {\\n\\t\\tif (i == 0) return \\\"0\\\";\\n\\t\\tuint j = i;\\n\\t\\tuint len;\\n\\t\\twhile (j != 0) {\\n\\t\\t\\tlen++;\\n\\t\\t\\tj /= 10;\\n\\t\\t}\\n\\t\\tbytes memory bstr = new bytes(len);\\n\\t\\tuint k = len - 1;\\n\\t\\twhile (i != 0) {\\n\\t\\t\\tbstr[k--] = bytes1(uint8(48 + (i % 10)));\\n\\t\\t\\ti /= 10;\\n\\t\\t}\\n\\t\\treturn string(bstr);\\n\\t}\\n\\n\\tfunction parseBool(string memory _a) internal pure returns (bool) {\\n\\t\\tif (strCompare(_a, \\\"true\\\") == 0) {\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction strCompare(\\n\\t\\tstring memory _a,\\n\\t\\tstring memory _b\\n\\t) internal pure returns (int) {\\n\\t\\tbytes memory a = bytes(_a);\\n\\t\\tbytes memory b = bytes(_b);\\n\\t\\tuint minLength = a.length;\\n\\t\\tif (b.length < minLength) minLength = b.length;\\n\\t\\tfor (uint i = 0; i < minLength; i++)\\n\\t\\t\\tif (a[i] < b[i]) return -1;\\n\\t\\t\\telse if (a[i] > b[i]) return 1;\\n\\t\\tif (a.length < b.length) return -1;\\n\\t\\telse if (a.length > b.length) return 1;\\n\\t\\telse return 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0xea51e519ec3c809b9b7b1b4cf46616641a5c65bf99f7b89c98f6c3501f1e0330\"},\"interfaces/IGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IGateway {\\n\\tstruct ExecutionInfo {\\n\\t\\tbytes user_key;\\n\\t\\tbytes user_pubkey;\\n\\t\\tstring routing_code_hash;\\n\\t\\tstring task_destination_network;\\n\\t\\tstring handle;\\n\\t\\tbytes12 nonce;\\n\\t\\tuint32 callback_gas_limit;\\n\\t\\tbytes payload;\\n\\t\\tbytes payload_signature;\\n\\t}\\n\\n\\tfunction send(\\n\\t\\tbytes32 _payloadHash,\\n\\t\\taddress _userAddress,\\n\\t\\tstring calldata _routingInfo,\\n\\t\\tExecutionInfo calldata _info\\n\\t) external payable;\\n}\\n\",\"keccak256\":\"0x0a9d680f18372c00a8e706f4656647edc7a3973a1d1974bf2a59fe319a3150ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461004557733879e146140b627a5c858a08e507b171d9e4313960018060a01b03198181600354161760035560025416176002556126a2908161004b8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c80636a15c788146105cd57806390a4cb9b1461057b578063979c17831461053f578063998f404c14610455578063c06d5ba914610297578063c1cbbca71461025a578063c428a278146101b7578063c9640c091461018e578063eb0cde1d14610165578063f7a22314146100dc5763fa2f53c61461009657600080fd5b346100d95760403660031901126100d9576004356001600160401b0381116100d5576100c96100d2913690600401611135565b60243590611604565b80f35b5080fd5b80fd5b50346100d95760603660031901126100d9576001600160401b036024358181116101615761010e903690600401611135565b906044359081116101615761015b61014b7fd2d3da9dad19c719463d609b0153dcd2470b4c48d6504ac8e94e56a782e539d5923690600401611193565b6040519182916004359583611571565b0390a280f35b8280fd5b50346100d957806003193601126100d9576002546040516001600160a01b039091168152602090f35b50346100d957806003193601126100d9576003546040516001600160a01b039091168152602090f35b50346100d95760203660031901126100d9576040906004358152806020522080546101e4600183016112f0565b916101f1600282016112f0565b610249610200600384016112f0565b61023b60ff60076006870154960154169361022d604051988998895260c060208a015260c0890190611396565b908782036040890152611396565b908582036060870152611396565b916080840152151560a08301520390f35b50346100d95760203660031901126100d957600435337f0f341c4538c3af5f6f9502b5cb2e1ada31e4d65ec8f829cbe8ee009b6568b36b8380a380f35b5060031960a0368201126100d55760043590602435908115158203610450576001600160401b039160643583811161044c576102d7903690600401611271565b92906084359185831161044857610120908336030112610444578587528660205260ff600760408920015416156104105785875260208781526040808920600701805460ff191690555195908601908111868210176103fa5760405286855286928690156103ec57506002546001600160a01b0316803b156103e85761037e948493604051968794859384936339624a6b60e21b8552600401913360443560048701611428565b039134905af19182156103db5784926103c4575b505061039d91611604565b7fe9f7d7fd0b133404f0ccff737d6f3594748e04bc5507adfaed35835ef98937118280a280f35b6103cf9192506110b0565b61016157818338610392565b50604051903d90823e3d90fd5b8380fd5b935050505061039d91611604565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152600c60248201526b149bdd5b990818db1bdcd95960a21b6044820152606490fd5b8680fd5b8780fd5b8580fd5b600080fd5b508060031960603682011261053c576001600160401b0360243581811161053757610484903690600401611271565b9260443592831161053357610120908336030112610537576002546001600160a01b0316803b15610533576104da938593604051958694859384936339624a6b60e21b8552600401913360043560048701611428565b039134905af1801561052857610514575b50337f9ca0de0709c575c61710159cf212e68fa7f9bd8d600cb008ae8c028b7e54b7058280a280f35b61051d906110b0565b6100d95780386104eb565b6040513d84823e3d90fd5b8480fd5b505050fd5b50fd5b50346100d95760203660031901126100d9576004357fdcad6660d3e34a68718474b3d2dfb7da8a012d967dfe595b0123a6112667f0688280a280f35b50346100d95760203660031901126100d9576004356001548110156100d55760209060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154604051908152f35b506101803660031901126100d9576024356001600160401b0381116100d5576105fa903690600401611135565b6044356001600160401b03811161016157610619903690600401611135565b906064356001600160401b0381116103e857610639903690600401611135565b926084356001600160401b0381116100d557610659903690600401611193565b60a4356001600160401b038111610161576106789036906004016111f1565b9460c4356001600160401b0381116103e8576106989036906004016111f1565b9060e435906001600160401b03821161053357366023830112156105335781600401356106c48161117c565b926106d260405194856110f9565b8184526024602085019260051b8201019036821161044857602401915b81831061108c57505050610104351515610104350361053357610144356001600160401b03811161044c57610728903690600401611271565b6001600160401b0361016435116104445761012061016435360360031901126104445785518a518091149081611081575b5080611076575b15611031576004358752866020526040872054610ffa5761010435610f81575b50506004358552846020526040852096600435885586516001600160401b038111610eb2576107b260018a01546112b6565b601f8111610f3c575b50806020601f8211600114610ed1578891610ec6575b508160011b916000199060031b1c19161760018901555b8051906001600160401b038211610eb257819061080860028b01546112b6565b601f8111610e61575b50602090601f8311600114610df2578892610de7575b50508160011b916000199060031b1c19161760028801555b8051906001600160401b038211610dd357819061085f60038a01546112b6565b601f8111610d82575b50602090601f8311600114610d13578792610d08575b50508160011b916000199060031b1c19161760038701555b60078601805460ff19166001179055835b8351811015610c6f576108ba81856115e3565b518552600487016020526040852054610c36576108d781856115e3565b516108e2828a6115e3565b51906108ee83866115e3565b516001600160a01b0361090185876115e3565b51169060405192610911846110c3565b835260208301938452604083015260608201528660808201528660a082015261093a83876115e3565b51875260048901602052604087209181518355518051906001600160401b038211610b5757819061096e60018601546112b6565b601f8111610be5575b50602090601f8311600114610b76578a92610b6b575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211610b57576109c860028501546112b6565b601f8111610b12575b50602090601f8311600114610aa05791806005949260a0948c92610a95575b50508160011b916000199060031b1c19161760028501555b60038401600180841b036060830151166bffffffffffffffffffffffff841b825416179055608081015160048501550151910155610a4681856115e3565b5190600588015491600160401b8310156103fa57610a73836001610a90950160058c015560058b0161129e565b819291549060031b600019811b9283911b169119161790556115be565b6108a7565b0151905038806109f0565b90600285018a5260208a20918a5b601f1985168110610afa5750926005949260019260a09583601f19811610610ae1575b505050811b016002850155610a08565b015160001960f88460031b161c19169055388080610ad1565b91926020600181928685015181550194019201610aae565b600285018a5260208a20601f840160051c810160208510610b50575b601f830160051c82018110610b445750506109d1565b60008155600101610b2e565b5080610b2e565b634e487b7160e01b89526041600452602489fd5b01519050388061098d565b9250600185018a5260208a20908a935b601f1984168510610bca576001945083601f19811610610bb1575b505050811b0160018301556109a5565b015160001960f88460031b161c19169055388080610ba1565b81810151835560209485019460019093019290910190610b86565b909150600185018a5260208a20601f840160051c810160208510610c2f575b90849392915b601f830160051c82018110610c20575050610977565b60008155859450600101610c0a565b5080610c04565b60405162461bcd60e51b815260206004820152601160248201527050726f6a6563742049442065786973747360781b6044820152606490fd5b848685600154600160401b8110156103fa576001810180600155811015610cf2577f2fceaf42a6664f3294222799a359650844542179732d12b26b6926bd338479a59161015b916001600052600435907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601556040519182916004359583611571565b634e487b7160e01b600052603260045260246000fd5b01519050388061087e565b9250600389018752602087209087935b601f1984168510610d67576001945083601f19811610610d4e575b505050811b016003870155610896565b015160001960f88460031b161c19169055388080610d3e565b81810151835560209485019460019093019290910190610d23565b90915060038901875260208720601f840160051c810160208510610dcc575b90849392915b601f830160051c82018110610dbd575050610868565b60008155859450600101610da7565b5080610da1565b634e487b7160e01b86526041600452602486fd5b015190503880610827565b925060028a018852602088209088935b601f1984168510610e46576001945083601f19811610610e2d575b505050811b01600288015561083f565b015160001960f88460031b161c19169055388080610e1d565b81810151835560209485019460019093019290910190610e02565b90915060028a01885260208820601f840160051c810160208510610eab575b90849392915b601f830160051c82018110610e9c575050610811565b60008155859450600101610e86565b5080610e80565b634e487b7160e01b87526041600452602487fd5b9050880151386107d1565b915060018a0188526020882088925b8a601f1984168510610f2557506001935082601f19811610610f0c575b5050811b0160018901556107e8565b8a015160001960f88460031b161c191690553880610efd565b810151825560209384019360019092019101610ee0565b60018a01885260208820601f830160051c810160208410610f7a575b601f830160051c82018110610f6e5750506107bb565b60008155600101610f58565b5080610f58565b6002546001600160a01b031690813b1561044857918791610fc5936040518095819482936339624a6b60e21b84526101643560040191336101243560048701611428565b039134905af18015610fef57610fdc575b80610780565b610fe8909591956110b0565b9338610fd6565b6040513d88823e3d90fd5b60405162461bcd60e51b815260206004820152600f60248201526e526f756e642049442065786973747360881b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4d69736d61746368656420696e707574206172726179730000000000000000006044820152606490fd5b508451845114610760565b905085511438610759565b82356001600160a01b03811681036110ac578152602092830192016106ef565b8880fd5b6001600160401b0381116103fa57604052565b60c081019081106001600160401b038211176103fa57604052565b606081019081106001600160401b038211176103fa57604052565b90601f801991011681019081106001600160401b038211176103fa57604052565b6001600160401b0381116103fa57601f01601f191660200190565b81601f820112156104505780359061114c8261111a565b9261115a60405194856110f9565b8284526020838301011161045057816000926020809301838601378301015290565b6001600160401b0381116103fa5760051b60200190565b81601f82011215610450578035916111aa8361117c565b926111b860405194856110f9565b808452602092838086019260051b820101928311610450578301905b8282106111e2575050505090565b813581529083019083016111d4565b9080601f83011215610450578135906112098261117c565b9261121760405194856110f9565b828452602092838086019160051b8301019280841161045057848301915b8483106112455750505050505090565b82356001600160401b03811161045057869161126684848094890101611135565b815201920191611235565b9181601f84011215610450578235916001600160401b038311610450576020838186019501011161045057565b8054821015610cf25760005260206000200190600090565b90600182811c921680156112e6575b60208310146112d057565b634e487b7160e01b600052602260045260246000fd5b91607f16916112c5565b9060405191826000825492611304846112b6565b9081845260019485811690816000146113735750600114611330575b505061132e925003836110f9565b565b9093915060005260209081600020936000915b81831061135b57505061132e93508201013880611320565b85548884018501529485019487945091830191611343565b91505061132e94506020925060ff191682840152151560051b8201013880611320565b919082519283825260005b8481106113c2575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016113a1565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e19823603018112156104505701602081359101916001600160401b03821161045057813603831361045057565b9081526001600160a01b03909116602082015260806040820181905290939261145492918501916113d6565b9160608184039101526114f06114d56114ba61149f61148461147686806113f7565b610120808a528901916113d6565b61149160208701876113f7565b9088830360208a01526113d6565b6114ac60408601866113f7565b9087830360408901526113d6565b6114c760608501856113f7565b9086830360608801526113d6565b6114e260808401846113f7565b9085830360808701526113d6565b9160a08201356bffffffffffffffffffffffff60a01b81168091036104505760a082015260c082013563ffffffff81168091036104505761156e9361154f9160c084015261154160e08501856113f7565b9084830360e08601526113d6565b9161156061010091828101906113f7565b9290918185039101526113d6565b90565b9061158490604083526040830190611396565b81810360209283015282518082529082019282019160005b8281106115aa575050505090565b83518552938101939281019260010161159c565b60001981146115cd5760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015610cf25760209160051b010190565b919082039182116115cd57565b909161160f82611b1e565b8095925093909315611a2a5781600094939294526000602052600660406000200154926000925b856000526000602052600560406000200154841015611a2157600460406000200161166885600560406000200161129e565b90549060031b1c600052602052604060002095600060019081890193845493838516935b6000198d018d81116115cd57811015611a09576116c760206116ae838b6115e3565b51015160606116bd848c6115e3565b510151908b6125e5565b602081519101206040516000816116dd8a6112b6565b808252918980156119eb576001146119aa575b6116fc925003826110f9565b602081519101201461172a57600381018091111561168c57634e487b7160e01b600052601160045260246000fd5b935099979694509794925050600181018091116115cd57806060611760602061175661176a95876115e3565b51015192856115e3565b51015190846125e5565b976000906000926000996000956000945b8d51861015611997578c8e871580611976575b61196d575b603061179f8983611acc565b5160f81c101580611955575b15611928575061181e575b600a9080828102058214811517156115cd576117d38f8890611acc565b5160f81c80602f198101136001166115cd57602f198101602f19828585020101126000848402129080158216911516176115cd57910201602f190194611818906115be565b9461177b565b939c9199969486939c91999b98961560001461190c575050505b806118da575b50906118b1575b60048301548181029181830414901517156115cd5760008080606481940480965b600301546001600160a01b03168282156118a8575bf11561189c576118949161188e916115f7565b946115be565b929490611636565b6040513d6000823e3d90fd5b506108fc61187b565b80600003908082056000191490151761184557634e487b7160e01b600052601160045260246000fd5b604d81116115cd57600a0a818102919060008212600160ff1b8214166115cd5781830514901517156115cd573861183e565b949699919c9395979a98909b9261192290611aee565b956117b6565b602e91508761193991989398611acc565b5160f81c1461194c575b611818906115be565b60019c50611943565b5060396119628983611acc565b5160f81c11156117ab565b60019950611793565b50602d60f81b6001600160f81b031961198f8a84611acc565b51161461178e565b939c5097999694919a5097949250611838565b5050896000526020600020906000915b8183106119d25750508160206116fc928201016116f0565b80546020848601810191909152909201916001016119ba565b505060206116fc9260ff198c1682840152151560051b8201016116f0565b50979893509498819450600080935080928192611866565b95505050505050565b60405162461bcd60e51b8152602060048201526024808201527f4a534f4e2070617273696e67206661696c6564206f72206e6f206461746120666044820152631bdd5b9960e21b6064820152608490fd5b60405190611a88826110de565b60006040838281528260208201520152565b60405190611aa7826110c3565b8160a06000918281528260208201528260408201528260608201528260808201520152565b908151811015610cf2570160200190565b60ff1660ff81146115cd5760010190565b80156115cd576000190190565b516005811015611b085790565b634e487b7160e01b600052602160045260246000fd5b611b26611a7b565b50611b2f611a7b565b506040805192611b3e846110de565b600091828552602090818601908482528087016000199182825280516102a081018181106001600160401b03821117610b575782526014815285885b61028081106121b457505097845191611b91611a9a565b505b8a5182518110156121a6576001600160f81b031990611bb29084611acc565b5116607b60f81b8114808015612199575b6120ed5750607d60f81b81148080156120e0575b611f625750601160f91b8114611f5557600160fd1b8181148015611f48575b8015611f3b575b8015611f2e575b611f2757601d60f91b8214611efe57600b60fa1b8214611daf57600360fc1b82101580611da1575b8015611d94575b8015611d87575b8015611d7a575b8015611d6d575b611c89578110159081611c7a575b50611c6d575b611c668b516115be565b8b52611b93565b5060019950505050505050565b603f60f91b1015905038611c56565b5050918351858103611cf2575b50611ca2828b8d61247b565b80611ce75750611cb1906115be565b918351858103611cc2575b50611c5c565b611cce60a0918c6115e3565b510160ff611cde81835116611add565b16905238611cbc565b9a5050505050505050565b611cfc908b6115e3565b5180519060059081831015611d59576001809314918215611d2a575b505015611c96579a5050505050505050565b8151919250811015611d59576003149081611d48575b503880611d18565b60ff915060a0015116151538611d40565b634e487b7160e01b8c52602160045260248cfd5b50603760f91b8214611c48565b50601d60fa1b8214611c41565b50603360f91b8214611c3a565b50602d60f81b8214611c33565b50603960f81b821115611c2c565b50508351858114159081611edc575b5080611ea7575b15611c5c579592979896939094918251828101908111611e93575b611df3611ded828b6115e3565b51611afb565b60059081811015611e7f57600214908115611e5f575b50611e1d575b611e1890611aee565b611de0565b87611e28828b6115e3565b510151151580611e49575b15611e0f578994979193969295989a9952611c5c565b506080611e56828b6115e3565b51015115611e33565b9050611e6e611ded838c6115e3565b90811015611d595760011438611e09565b634e487b7160e01b8d52602160045260248dfd5b634e487b7160e01b8b52601160045260248bfd5b50611eb6611ded85518c6115e3565b6005811015611ec85760011415611dc5565b634e487b7160e01b8a52602160045260248afd5b611eeb9150611ded908c6115e3565b6005811015611ec8576002141538611dbe565b50508551858101908111611f13578452611c5c565b634e487b7160e01b8a52601160045260248afd5b5050611c5c565b50600560fa1b8214611c04565b50600960f91b8214611bfd565b50601160f81b8214611bf6565b5091611ca2828b8d61225f565b9050899691989594999a9792939a506000146120d8576001995b81518581019081116120c4575b611f93818a6115e3565b518a8101511515806120b8575b611fb35750611fae90611aee565b611f89565b9b90919493989b9a95969992979a51600580821015611e7f57821015611d595703612096578585528b516001908181018091116120a4576080612007848f85946060611fff84846115e3565b5101526115e3565b5101521561209657805b612055575b80156120225750611c5c565b61202c818c6115e3565b518281015115159081612048575b5015611cbc57845238611cbc565b608091500151153861203a565b61205f818c6115e3565b518281015115159081612089575b506120815761207b90611aee565b80612011565b808552612016565b608091500151153861206d565b5060019a5050505050505050565b634e487b7160e01b8c52601160045260248cfd5b50608081015115611fa0565b634e487b7160e01b88526011600452602488fd5b600299611f7c565b50605d60f81b8214611bd7565b936120f891506115be565b926121038b8d6121ca565b91901561218a5785518c888203612164575b50501561215d5760015b60058110156121495781528b51888201526001908201528551858101908111611f13578452611c5c565b634e487b7160e01b8b52602160045260248bfd5b600261211f565b60a091612170916115e3565b510160ff61218081835116611add565b169052388c612115565b5060039b505050505050505050565b50605b60f81b8214611bc3565b505093519698505050505050565b6121bc611a9a565b828285010152018690611b7a565b6020909291926121d8611a9a565b50018051835180911015612240575061222d604051936121f7856110c3565b600080865280602087015280604087015280606087015280608087015260a08601528251908561222783836115e3565b526115e3565b5061223881516115be565b905260019190565b9192916000198101915081116115cd57612259916115e3565b51600091565b92919083519161226d611a9a565b5061227885516115be565b85525b84518151811015612470576122909082611acc565b516001600160f81b031990601160f91b90828116821461241b5760f81c605c14806123f0575b6122ce5750505b6122c785516115be565b855261227b565b816122e56122dc89516115be565b808a5285611acc565b5116149081156123d4575b81156123b8575b811561239c575b8115612380575b8115612364575b8115612348575b811561232c575b506000036122bd575050909152600190565b8651601d60fa1b925061233f9084611acc565b5116143861231a565b9050603160f91b8161235b885185611acc565b51161490612313565b9050603760f91b81612377885185611acc565b5116149061230c565b9050603960f91b81612393885185611acc565b51161490612305565b9050603360f91b816123af885185611acc565b511614906122fe565b9050601760fa1b816123cb885185611acc565b511614906122f7565b9050602f60f81b816123e7885185611acc565b511614906122f0565b50865160018101809111612406578351116122b6565b60246000634e487b7160e01b81526011600452fd5b5050505061242b908493946121ca565b919015612467576001908181018091116124065760a0935190600384526020840152816040840152606083015260808201526000918291015290565b91905052600390565b505050909152600290565b929190600084519261248b611a9a565b505b855181518110156125da576124a29082611acc565b516001600160f81b03198116600160fd1b81149081156125cc575b81156125be575b81156125b0575b81156125a2575b8115612594575b8115612586575b506125205760f81c60208110908115612515575b5061250a5761250386516115be565b865261248d565b505050909152600190565b607f915011386124f4565b5050506001939192935b1561257f5761253990826121ca565b90156125785760a090829360009351906004835260208301526001604083015260608201526001608082015201526125718151611aee565b9052600090565b5052600390565b5052600290565b605d60f81b149050386124e0565b607d60f81b811491506124d9565b600b60fa1b811491506124d2565b600d60f81b811491506124cb565b600560f91b811491506124c4565b600960f81b811491506124bd565b50509391929361252a565b92916125f182826115f7565b916125fb8361111a565b9261260960405194856110f9565b808452612618601f199161111a565b01366020850137805b82811061263057509193505050565b612667906001600160f81b03196126478289611acc565b511661266161265685846115f7565b9160001a9187611acc565b536115be565b61262156fea26469706673582212209ae512d03252a207853be4df276b4ca5c0aa84441acf322903fa53d80e76edc964736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c80636a15c788146105cd57806390a4cb9b1461057b578063979c17831461053f578063998f404c14610455578063c06d5ba914610297578063c1cbbca71461025a578063c428a278146101b7578063c9640c091461018e578063eb0cde1d14610165578063f7a22314146100dc5763fa2f53c61461009657600080fd5b346100d95760403660031901126100d9576004356001600160401b0381116100d5576100c96100d2913690600401611135565b60243590611604565b80f35b5080fd5b80fd5b50346100d95760603660031901126100d9576001600160401b036024358181116101615761010e903690600401611135565b906044359081116101615761015b61014b7fd2d3da9dad19c719463d609b0153dcd2470b4c48d6504ac8e94e56a782e539d5923690600401611193565b6040519182916004359583611571565b0390a280f35b8280fd5b50346100d957806003193601126100d9576002546040516001600160a01b039091168152602090f35b50346100d957806003193601126100d9576003546040516001600160a01b039091168152602090f35b50346100d95760203660031901126100d9576040906004358152806020522080546101e4600183016112f0565b916101f1600282016112f0565b610249610200600384016112f0565b61023b60ff60076006870154960154169361022d604051988998895260c060208a015260c0890190611396565b908782036040890152611396565b908582036060870152611396565b916080840152151560a08301520390f35b50346100d95760203660031901126100d957600435337f0f341c4538c3af5f6f9502b5cb2e1ada31e4d65ec8f829cbe8ee009b6568b36b8380a380f35b5060031960a0368201126100d55760043590602435908115158203610450576001600160401b039160643583811161044c576102d7903690600401611271565b92906084359185831161044857610120908336030112610444578587528660205260ff600760408920015416156104105785875260208781526040808920600701805460ff191690555195908601908111868210176103fa5760405286855286928690156103ec57506002546001600160a01b0316803b156103e85761037e948493604051968794859384936339624a6b60e21b8552600401913360443560048701611428565b039134905af19182156103db5784926103c4575b505061039d91611604565b7fe9f7d7fd0b133404f0ccff737d6f3594748e04bc5507adfaed35835ef98937118280a280f35b6103cf9192506110b0565b61016157818338610392565b50604051903d90823e3d90fd5b8380fd5b935050505061039d91611604565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152600c60248201526b149bdd5b990818db1bdcd95960a21b6044820152606490fd5b8680fd5b8780fd5b8580fd5b600080fd5b508060031960603682011261053c576001600160401b0360243581811161053757610484903690600401611271565b9260443592831161053357610120908336030112610537576002546001600160a01b0316803b15610533576104da938593604051958694859384936339624a6b60e21b8552600401913360043560048701611428565b039134905af1801561052857610514575b50337f9ca0de0709c575c61710159cf212e68fa7f9bd8d600cb008ae8c028b7e54b7058280a280f35b61051d906110b0565b6100d95780386104eb565b6040513d84823e3d90fd5b8480fd5b505050fd5b50fd5b50346100d95760203660031901126100d9576004357fdcad6660d3e34a68718474b3d2dfb7da8a012d967dfe595b0123a6112667f0688280a280f35b50346100d95760203660031901126100d9576004356001548110156100d55760209060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154604051908152f35b506101803660031901126100d9576024356001600160401b0381116100d5576105fa903690600401611135565b6044356001600160401b03811161016157610619903690600401611135565b906064356001600160401b0381116103e857610639903690600401611135565b926084356001600160401b0381116100d557610659903690600401611193565b60a4356001600160401b038111610161576106789036906004016111f1565b9460c4356001600160401b0381116103e8576106989036906004016111f1565b9060e435906001600160401b03821161053357366023830112156105335781600401356106c48161117c565b926106d260405194856110f9565b8184526024602085019260051b8201019036821161044857602401915b81831061108c57505050610104351515610104350361053357610144356001600160401b03811161044c57610728903690600401611271565b6001600160401b0361016435116104445761012061016435360360031901126104445785518a518091149081611081575b5080611076575b15611031576004358752866020526040872054610ffa5761010435610f81575b50506004358552846020526040852096600435885586516001600160401b038111610eb2576107b260018a01546112b6565b601f8111610f3c575b50806020601f8211600114610ed1578891610ec6575b508160011b916000199060031b1c19161760018901555b8051906001600160401b038211610eb257819061080860028b01546112b6565b601f8111610e61575b50602090601f8311600114610df2578892610de7575b50508160011b916000199060031b1c19161760028801555b8051906001600160401b038211610dd357819061085f60038a01546112b6565b601f8111610d82575b50602090601f8311600114610d13578792610d08575b50508160011b916000199060031b1c19161760038701555b60078601805460ff19166001179055835b8351811015610c6f576108ba81856115e3565b518552600487016020526040852054610c36576108d781856115e3565b516108e2828a6115e3565b51906108ee83866115e3565b516001600160a01b0361090185876115e3565b51169060405192610911846110c3565b835260208301938452604083015260608201528660808201528660a082015261093a83876115e3565b51875260048901602052604087209181518355518051906001600160401b038211610b5757819061096e60018601546112b6565b601f8111610be5575b50602090601f8311600114610b76578a92610b6b575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211610b57576109c860028501546112b6565b601f8111610b12575b50602090601f8311600114610aa05791806005949260a0948c92610a95575b50508160011b916000199060031b1c19161760028501555b60038401600180841b036060830151166bffffffffffffffffffffffff841b825416179055608081015160048501550151910155610a4681856115e3565b5190600588015491600160401b8310156103fa57610a73836001610a90950160058c015560058b0161129e565b819291549060031b600019811b9283911b169119161790556115be565b6108a7565b0151905038806109f0565b90600285018a5260208a20918a5b601f1985168110610afa5750926005949260019260a09583601f19811610610ae1575b505050811b016002850155610a08565b015160001960f88460031b161c19169055388080610ad1565b91926020600181928685015181550194019201610aae565b600285018a5260208a20601f840160051c810160208510610b50575b601f830160051c82018110610b445750506109d1565b60008155600101610b2e565b5080610b2e565b634e487b7160e01b89526041600452602489fd5b01519050388061098d565b9250600185018a5260208a20908a935b601f1984168510610bca576001945083601f19811610610bb1575b505050811b0160018301556109a5565b015160001960f88460031b161c19169055388080610ba1565b81810151835560209485019460019093019290910190610b86565b909150600185018a5260208a20601f840160051c810160208510610c2f575b90849392915b601f830160051c82018110610c20575050610977565b60008155859450600101610c0a565b5080610c04565b60405162461bcd60e51b815260206004820152601160248201527050726f6a6563742049442065786973747360781b6044820152606490fd5b848685600154600160401b8110156103fa576001810180600155811015610cf2577f2fceaf42a6664f3294222799a359650844542179732d12b26b6926bd338479a59161015b916001600052600435907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601556040519182916004359583611571565b634e487b7160e01b600052603260045260246000fd5b01519050388061087e565b9250600389018752602087209087935b601f1984168510610d67576001945083601f19811610610d4e575b505050811b016003870155610896565b015160001960f88460031b161c19169055388080610d3e565b81810151835560209485019460019093019290910190610d23565b90915060038901875260208720601f840160051c810160208510610dcc575b90849392915b601f830160051c82018110610dbd575050610868565b60008155859450600101610da7565b5080610da1565b634e487b7160e01b86526041600452602486fd5b015190503880610827565b925060028a018852602088209088935b601f1984168510610e46576001945083601f19811610610e2d575b505050811b01600288015561083f565b015160001960f88460031b161c19169055388080610e1d565b81810151835560209485019460019093019290910190610e02565b90915060028a01885260208820601f840160051c810160208510610eab575b90849392915b601f830160051c82018110610e9c575050610811565b60008155859450600101610e86565b5080610e80565b634e487b7160e01b87526041600452602487fd5b9050880151386107d1565b915060018a0188526020882088925b8a601f1984168510610f2557506001935082601f19811610610f0c575b5050811b0160018901556107e8565b8a015160001960f88460031b161c191690553880610efd565b810151825560209384019360019092019101610ee0565b60018a01885260208820601f830160051c810160208410610f7a575b601f830160051c82018110610f6e5750506107bb565b60008155600101610f58565b5080610f58565b6002546001600160a01b031690813b1561044857918791610fc5936040518095819482936339624a6b60e21b84526101643560040191336101243560048701611428565b039134905af18015610fef57610fdc575b80610780565b610fe8909591956110b0565b9338610fd6565b6040513d88823e3d90fd5b60405162461bcd60e51b815260206004820152600f60248201526e526f756e642049442065786973747360881b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4d69736d61746368656420696e707574206172726179730000000000000000006044820152606490fd5b508451845114610760565b905085511438610759565b82356001600160a01b03811681036110ac578152602092830192016106ef565b8880fd5b6001600160401b0381116103fa57604052565b60c081019081106001600160401b038211176103fa57604052565b606081019081106001600160401b038211176103fa57604052565b90601f801991011681019081106001600160401b038211176103fa57604052565b6001600160401b0381116103fa57601f01601f191660200190565b81601f820112156104505780359061114c8261111a565b9261115a60405194856110f9565b8284526020838301011161045057816000926020809301838601378301015290565b6001600160401b0381116103fa5760051b60200190565b81601f82011215610450578035916111aa8361117c565b926111b860405194856110f9565b808452602092838086019260051b820101928311610450578301905b8282106111e2575050505090565b813581529083019083016111d4565b9080601f83011215610450578135906112098261117c565b9261121760405194856110f9565b828452602092838086019160051b8301019280841161045057848301915b8483106112455750505050505090565b82356001600160401b03811161045057869161126684848094890101611135565b815201920191611235565b9181601f84011215610450578235916001600160401b038311610450576020838186019501011161045057565b8054821015610cf25760005260206000200190600090565b90600182811c921680156112e6575b60208310146112d057565b634e487b7160e01b600052602260045260246000fd5b91607f16916112c5565b9060405191826000825492611304846112b6565b9081845260019485811690816000146113735750600114611330575b505061132e925003836110f9565b565b9093915060005260209081600020936000915b81831061135b57505061132e93508201013880611320565b85548884018501529485019487945091830191611343565b91505061132e94506020925060ff191682840152151560051b8201013880611320565b919082519283825260005b8481106113c2575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016113a1565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e19823603018112156104505701602081359101916001600160401b03821161045057813603831361045057565b9081526001600160a01b03909116602082015260806040820181905290939261145492918501916113d6565b9160608184039101526114f06114d56114ba61149f61148461147686806113f7565b610120808a528901916113d6565b61149160208701876113f7565b9088830360208a01526113d6565b6114ac60408601866113f7565b9087830360408901526113d6565b6114c760608501856113f7565b9086830360608801526113d6565b6114e260808401846113f7565b9085830360808701526113d6565b9160a08201356bffffffffffffffffffffffff60a01b81168091036104505760a082015260c082013563ffffffff81168091036104505761156e9361154f9160c084015261154160e08501856113f7565b9084830360e08601526113d6565b9161156061010091828101906113f7565b9290918185039101526113d6565b90565b9061158490604083526040830190611396565b81810360209283015282518082529082019282019160005b8281106115aa575050505090565b83518552938101939281019260010161159c565b60001981146115cd5760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015610cf25760209160051b010190565b919082039182116115cd57565b909161160f82611b1e565b8095925093909315611a2a5781600094939294526000602052600660406000200154926000925b856000526000602052600560406000200154841015611a2157600460406000200161166885600560406000200161129e565b90549060031b1c600052602052604060002095600060019081890193845493838516935b6000198d018d81116115cd57811015611a09576116c760206116ae838b6115e3565b51015160606116bd848c6115e3565b510151908b6125e5565b602081519101206040516000816116dd8a6112b6565b808252918980156119eb576001146119aa575b6116fc925003826110f9565b602081519101201461172a57600381018091111561168c57634e487b7160e01b600052601160045260246000fd5b935099979694509794925050600181018091116115cd57806060611760602061175661176a95876115e3565b51015192856115e3565b51015190846125e5565b976000906000926000996000956000945b8d51861015611997578c8e871580611976575b61196d575b603061179f8983611acc565b5160f81c101580611955575b15611928575061181e575b600a9080828102058214811517156115cd576117d38f8890611acc565b5160f81c80602f198101136001166115cd57602f198101602f19828585020101126000848402129080158216911516176115cd57910201602f190194611818906115be565b9461177b565b939c9199969486939c91999b98961560001461190c575050505b806118da575b50906118b1575b60048301548181029181830414901517156115cd5760008080606481940480965b600301546001600160a01b03168282156118a8575bf11561189c576118949161188e916115f7565b946115be565b929490611636565b6040513d6000823e3d90fd5b506108fc61187b565b80600003908082056000191490151761184557634e487b7160e01b600052601160045260246000fd5b604d81116115cd57600a0a818102919060008212600160ff1b8214166115cd5781830514901517156115cd573861183e565b949699919c9395979a98909b9261192290611aee565b956117b6565b602e91508761193991989398611acc565b5160f81c1461194c575b611818906115be565b60019c50611943565b5060396119628983611acc565b5160f81c11156117ab565b60019950611793565b50602d60f81b6001600160f81b031961198f8a84611acc565b51161461178e565b939c5097999694919a5097949250611838565b5050896000526020600020906000915b8183106119d25750508160206116fc928201016116f0565b80546020848601810191909152909201916001016119ba565b505060206116fc9260ff198c1682840152151560051b8201016116f0565b50979893509498819450600080935080928192611866565b95505050505050565b60405162461bcd60e51b8152602060048201526024808201527f4a534f4e2070617273696e67206661696c6564206f72206e6f206461746120666044820152631bdd5b9960e21b6064820152608490fd5b60405190611a88826110de565b60006040838281528260208201520152565b60405190611aa7826110c3565b8160a06000918281528260208201528260408201528260608201528260808201520152565b908151811015610cf2570160200190565b60ff1660ff81146115cd5760010190565b80156115cd576000190190565b516005811015611b085790565b634e487b7160e01b600052602160045260246000fd5b611b26611a7b565b50611b2f611a7b565b506040805192611b3e846110de565b600091828552602090818601908482528087016000199182825280516102a081018181106001600160401b03821117610b575782526014815285885b61028081106121b457505097845191611b91611a9a565b505b8a5182518110156121a6576001600160f81b031990611bb29084611acc565b5116607b60f81b8114808015612199575b6120ed5750607d60f81b81148080156120e0575b611f625750601160f91b8114611f5557600160fd1b8181148015611f48575b8015611f3b575b8015611f2e575b611f2757601d60f91b8214611efe57600b60fa1b8214611daf57600360fc1b82101580611da1575b8015611d94575b8015611d87575b8015611d7a575b8015611d6d575b611c89578110159081611c7a575b50611c6d575b611c668b516115be565b8b52611b93565b5060019950505050505050565b603f60f91b1015905038611c56565b5050918351858103611cf2575b50611ca2828b8d61247b565b80611ce75750611cb1906115be565b918351858103611cc2575b50611c5c565b611cce60a0918c6115e3565b510160ff611cde81835116611add565b16905238611cbc565b9a5050505050505050565b611cfc908b6115e3565b5180519060059081831015611d59576001809314918215611d2a575b505015611c96579a5050505050505050565b8151919250811015611d59576003149081611d48575b503880611d18565b60ff915060a0015116151538611d40565b634e487b7160e01b8c52602160045260248cfd5b50603760f91b8214611c48565b50601d60fa1b8214611c41565b50603360f91b8214611c3a565b50602d60f81b8214611c33565b50603960f81b821115611c2c565b50508351858114159081611edc575b5080611ea7575b15611c5c579592979896939094918251828101908111611e93575b611df3611ded828b6115e3565b51611afb565b60059081811015611e7f57600214908115611e5f575b50611e1d575b611e1890611aee565b611de0565b87611e28828b6115e3565b510151151580611e49575b15611e0f578994979193969295989a9952611c5c565b506080611e56828b6115e3565b51015115611e33565b9050611e6e611ded838c6115e3565b90811015611d595760011438611e09565b634e487b7160e01b8d52602160045260248dfd5b634e487b7160e01b8b52601160045260248bfd5b50611eb6611ded85518c6115e3565b6005811015611ec85760011415611dc5565b634e487b7160e01b8a52602160045260248afd5b611eeb9150611ded908c6115e3565b6005811015611ec8576002141538611dbe565b50508551858101908111611f13578452611c5c565b634e487b7160e01b8a52601160045260248afd5b5050611c5c565b50600560fa1b8214611c04565b50600960f91b8214611bfd565b50601160f81b8214611bf6565b5091611ca2828b8d61225f565b9050899691989594999a9792939a506000146120d8576001995b81518581019081116120c4575b611f93818a6115e3565b518a8101511515806120b8575b611fb35750611fae90611aee565b611f89565b9b90919493989b9a95969992979a51600580821015611e7f57821015611d595703612096578585528b516001908181018091116120a4576080612007848f85946060611fff84846115e3565b5101526115e3565b5101521561209657805b612055575b80156120225750611c5c565b61202c818c6115e3565b518281015115159081612048575b5015611cbc57845238611cbc565b608091500151153861203a565b61205f818c6115e3565b518281015115159081612089575b506120815761207b90611aee565b80612011565b808552612016565b608091500151153861206d565b5060019a5050505050505050565b634e487b7160e01b8c52601160045260248cfd5b50608081015115611fa0565b634e487b7160e01b88526011600452602488fd5b600299611f7c565b50605d60f81b8214611bd7565b936120f891506115be565b926121038b8d6121ca565b91901561218a5785518c888203612164575b50501561215d5760015b60058110156121495781528b51888201526001908201528551858101908111611f13578452611c5c565b634e487b7160e01b8b52602160045260248bfd5b600261211f565b60a091612170916115e3565b510160ff61218081835116611add565b169052388c612115565b5060039b505050505050505050565b50605b60f81b8214611bc3565b505093519698505050505050565b6121bc611a9a565b828285010152018690611b7a565b6020909291926121d8611a9a565b50018051835180911015612240575061222d604051936121f7856110c3565b600080865280602087015280604087015280606087015280608087015260a08601528251908561222783836115e3565b526115e3565b5061223881516115be565b905260019190565b9192916000198101915081116115cd57612259916115e3565b51600091565b92919083519161226d611a9a565b5061227885516115be565b85525b84518151811015612470576122909082611acc565b516001600160f81b031990601160f91b90828116821461241b5760f81c605c14806123f0575b6122ce5750505b6122c785516115be565b855261227b565b816122e56122dc89516115be565b808a5285611acc565b5116149081156123d4575b81156123b8575b811561239c575b8115612380575b8115612364575b8115612348575b811561232c575b506000036122bd575050909152600190565b8651601d60fa1b925061233f9084611acc565b5116143861231a565b9050603160f91b8161235b885185611acc565b51161490612313565b9050603760f91b81612377885185611acc565b5116149061230c565b9050603960f91b81612393885185611acc565b51161490612305565b9050603360f91b816123af885185611acc565b511614906122fe565b9050601760fa1b816123cb885185611acc565b511614906122f7565b9050602f60f81b816123e7885185611acc565b511614906122f0565b50865160018101809111612406578351116122b6565b60246000634e487b7160e01b81526011600452fd5b5050505061242b908493946121ca565b919015612467576001908181018091116124065760a0935190600384526020840152816040840152606083015260808201526000918291015290565b91905052600390565b505050909152600290565b929190600084519261248b611a9a565b505b855181518110156125da576124a29082611acc565b516001600160f81b03198116600160fd1b81149081156125cc575b81156125be575b81156125b0575b81156125a2575b8115612594575b8115612586575b506125205760f81c60208110908115612515575b5061250a5761250386516115be565b865261248d565b505050909152600190565b607f915011386124f4565b5050506001939192935b1561257f5761253990826121ca565b90156125785760a090829360009351906004835260208301526001604083015260608201526001608082015201526125718151611aee565b9052600090565b5052600390565b5052600290565b605d60f81b149050386124e0565b607d60f81b811491506124d9565b600b60fa1b811491506124d2565b600d60f81b811491506124cb565b600560f91b811491506124c4565b600960f81b811491506124bd565b50509391929361252a565b92916125f182826115f7565b916125fb8361111a565b9261260960405194856110f9565b808452612618601f199161111a565b01366020850137805b82811061263057509193505050565b612667906001600160f81b03196126478289611acc565b511661266161265685846115f7565b9160001a9187611acc565b536115be565b61262156fea26469706673582212209ae512d03252a207853be4df276b4ca5c0aa84441acf322903fa53d80e76edc964736f6c63430008110033",
  "devdoc": {
    "author": "arjanjohan",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A smart contract for cross-chain quadratic voting developed during EthDam 24. This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2857,
        "contract": "contracts/Funding.sol:Funding",
        "label": "fundingRounds",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(FundingRound)2852_storage)"
      },
      {
        "astId": 2860,
        "contract": "contracts/Funding.sol:Funding",
        "label": "roundIds",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2863,
        "contract": "contracts/Funding.sol:Funding",
        "label": "gatewayContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IGateway)5137"
      },
      {
        "astId": 2869,
        "contract": "contracts/Funding.sol:Funding",
        "label": "gatewayAddressSepolia",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IGateway)5137": {
        "encoding": "inplace",
        "label": "contract IGateway",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(FundingRound)2852_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Funding.FundingRound)",
        "numberOfBytes": "32",
        "value": "t_struct(FundingRound)2852_storage"
      },
      "t_mapping(t_uint256,t_struct(Project)2831_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Funding.Project)",
        "numberOfBytes": "32",
        "value": "t_struct(Project)2831_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FundingRound)2852_storage": {
        "encoding": "inplace",
        "label": "struct Funding.FundingRound",
        "members": [
          {
            "astId": 2833,
            "contract": "contracts/Funding.sol:Funding",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2835,
            "contract": "contracts/Funding.sol:Funding",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2837,
            "contract": "contracts/Funding.sol:Funding",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2839,
            "contract": "contracts/Funding.sol:Funding",
            "label": "curveType",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2844,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projects",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Project)2831_storage)"
          },
          {
            "astId": 2847,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projectIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2849,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalContributions",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2851,
            "contract": "contracts/Funding.sol:Funding",
            "label": "isOpen",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Project)2831_storage": {
        "encoding": "inplace",
        "label": "struct Funding.Project",
        "members": [
          {
            "astId": 2820,
            "contract": "contracts/Funding.sol:Funding",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2822,
            "contract": "contracts/Funding.sol:Funding",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2824,
            "contract": "contracts/Funding.sol:Funding",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2826,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projectAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          },
          {
            "astId": 2828,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalContributions",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2830,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalSquareRoots",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}