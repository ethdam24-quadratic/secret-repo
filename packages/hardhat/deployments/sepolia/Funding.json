{
  "address": "0x5D1Fc9da0af509d69a17b6Aa150886dB6597B347",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "ContributionReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "ContributionReceivedInSecret",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "DistributedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "DistributedTokensInSecret",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundClosedInSecret",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        }
      ],
      "name": "RoundCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundCreatedInSecret",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sendToSecret",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "closeFundingRound",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "closedFundingRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "contributed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "curveType",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "projectNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "projectDescriptions",
          "type": "string[]"
        },
        {
          "internalType": "address payable[]",
          "name": "projectAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "sendToSecret",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "createFundingRound",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "createdFundingRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "distributeFunding",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "distributedFunding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fundingRounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "curveType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalContributions",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayAddressSepolia",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayContract",
      "outputs": [
        {
          "internalType": "contract IGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ebed856de5c1b01fd7f0d3e336fdde56bd0cefdacfaecae59984db39ebc6f83",
  "receipt": {
    "to": null,
    "from": "0xbb1DF1ab33786Ac6B91d9D16b445c7b66825979e",
    "contractAddress": "0x5D1Fc9da0af509d69a17b6Aa150886dB6597B347",
    "transactionIndex": 24,
    "gasUsed": "2338236",
    "logsBloom": "0x
    "blockHash": "0xc6745ba4b9b12af48860d0213e4b8822560e706bda69960e36e93752ea560709",
    "transactionHash": "0x6ebed856de5c1b01fd7f0d3e336fdde56bd0cefdacfaecae59984db39ebc6f83",
    "logs": [],
    "blockNumber": 5691717,
    "cumulativeGasUsed": "4872060",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 17,
  "solcInputHash": "9887b1a2e0de89d5c0a1d495577a83a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"ContributionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"ContributionReceivedInSecret\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"DistributedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"DistributedTokensInSecret\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundClosedInSecret\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"}],\"name\":\"RoundCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundCreatedInSecret\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendToSecret\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"closeFundingRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"closedFundingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"contributed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"curveType\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"projectNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"projectDescriptions\",\"type\":\"string[]\"},{\"internalType\":\"address payable[]\",\"name\":\"projectAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sendToSecret\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"createFundingRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"createdFundingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"distributeFunding\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"distributedFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundingRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"curveType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalContributions\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayAddressSepolia\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayContract\",\"outputs\":[{\"internalType\":\"contract IGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"arjanjohan\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A smart contract for cross-chain quadratic voting developed during EthDam 24. This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Funding.sol\":\"Funding\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Funding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"../interfaces/IGateway.sol\\\";\\nimport \\\"./JsmnSolLib.sol\\\";\\n\\n/**\\n * A smart contract for cross-chain quadratic voting developed during EthDam 24.\\n * This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.\\n * @author arjanjohan\\n */\\ncontract Funding {\\n\\t// ========================================\\n\\t//     ENUM, STRUCTS AND MAPPINGS\\n\\t// ========================================\\n\\n\\tstruct Project {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\taddress payable projectAddress;\\n\\t\\tuint256 totalContributions;\\n\\t\\tuint256 totalSquareRoots;\\n\\t}\\n\\n\\tstruct FundingRound {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\tstring curveType;\\n\\t\\tmapping(uint256 => Project) projects;\\n\\t\\tuint256[] projectIds;\\n\\t\\tuint256 totalContributions;\\n\\t\\tbool isOpen;\\n\\t}\\n\\n\\tstruct ProjectFundingData {\\n\\t\\tstring projectId;\\n\\t\\tuint256 fundingPercentage;\\n\\t}\\n\\n\\tmapping(uint256 => FundingRound) public fundingRounds;\\n\\tuint256[] public roundIds;\\n\\n\\t// ========================================\\n\\t//     CONSTRUCTOR AND VALUES\\n\\t// ========================================\\n\\n\\tIGateway public gatewayContract;\\n\\taddress public constant gatewayAddressSepolia =\\n\\t\\taddress(0x3879E146140b627a5C858a08e507B171D9E43139);\\n\\n\\tconstructor() {\\n\\t\\tgatewayContract = IGateway(gatewayAddressSepolia);\\n\\t}\\n\\n\\t// ========================================\\n\\t//     EVENTS\\n\\t// ========================================\\n\\tevent RoundCreated(\\n\\t\\tuint256 indexed roundId,\\n\\t\\tstring name,\\n\\t\\tuint256[] projectIds\\n\\t);\\n\\n\\tevent RoundCreatedInSecret(uint256 indexed roundId);\\n\\n\\tevent ContributionReceived(address indexed contributor);\\n\\n\\tevent ContributionReceivedInSecret(uint256 indexed roundId);\\n\\n\\tevent RoundClosed(uint256 indexed roundId);\\n\\n\\tevent RoundClosedInSecret(uint256 indexed roundId);\\n\\n\\tevent DistributedTokens(uint256 indexed roundId);\\n\\n\\tevent DistributedTokensInSecret(uint256 indexed roundId);\\n\\n\\t// ========================================\\n\\t//     CORE FUNCTIONS\\n\\t// ========================================\\n\\n\\tfunction createFundingRound(\\n\\t\\tuint256 id,\\n\\t\\tstring memory name,\\n\\t\\tstring memory description,\\n\\t\\tstring memory curveType,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses,\\n\\t\\taddress userAddress,\\n\\t\\tbool sendToSecret,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\tvalidateProjectParameters(\\n\\t\\t\\tprojectIds,\\n\\t\\t\\tprojectNames,\\n\\t\\t\\tprojectDescriptions,\\n\\t\\t\\tprojectAddresses\\n\\t\\t);\\n\\t\\trequire(fundingRounds[id].id == 0, \\\"Round ID exists\\\");\\n\\n\\t\\tif (sendToSecret) {\\n\\t\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\t\\tpayloadHash,\\n\\t\\t\\t\\tuserAddress,\\n\\t\\t\\t\\troutingInfo,\\n\\t\\t\\t\\tinfo\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tFundingRound storage round = fundingRounds[id];\\n\\t\\tsetupFundingRound(\\n\\t\\t\\tround,\\n\\t\\t\\tid,\\n\\t\\t\\tname,\\n\\t\\t\\tdescription,\\n\\t\\t\\tcurveType,\\n\\t\\t\\tprojectIds,\\n\\t\\t\\tprojectNames,\\n\\t\\t\\tprojectDescriptions,\\n\\t\\t\\tprojectAddresses\\n\\t\\t);\\n\\t\\troundIds.push(id);\\n\\t\\temit RoundCreated(id, name, projectIds);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction createdFundingRound(uint256 roundId, bytes memory json) public {\\n\\t\\temit RoundCreatedInSecret(roundId);\\n\\t}\\n\\n\\tfunction contribute(\\n\\t\\taddress userAddress,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\tgatewayContract.send{ value: msg.value }( // todo change this value\\n\\t\\t\\tpayloadHash,\\n\\t\\t\\tuserAddress,\\n\\t\\t\\troutingInfo,\\n\\t\\t\\tinfo\\n\\t\\t);\\n\\t\\temit ContributionReceived(userAddress);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction contributed(uint256 roundId, bytes memory json) public {\\n\\t\\temit ContributionReceivedInSecret(roundId);\\n\\t}\\n\\n\\tfunction closeFundingRound(\\n\\t\\tuint256 roundId,\\n\\t\\tbool sendToSecret,\\n\\t\\taddress userAddress,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\trequire(fundingRounds[roundId].isOpen, \\\"Round closed\\\");\\n\\t\\tfundingRounds[roundId].isOpen = false;\\n\\n\\t\\tif (sendToSecret) {\\n\\t\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\t\\tpayloadHash,\\n\\t\\t\\t\\tuserAddress,\\n\\t\\t\\t\\troutingInfo,\\n\\t\\t\\t\\tinfo\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\temit RoundClosed(roundId);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction closedFundingRound(uint256 roundId, bytes memory json) public {\\n\\t\\temit RoundClosedInSecret(roundId);\\n\\t}\\n\\n\\tfunction distributeFunding(\\n\\t\\tuint256 roundId,\\n\\t\\taddress userAddress,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\trequire(!fundingRounds[roundId].isOpen, \\\"Round is not closed\\\");\\n\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\tpayloadHash,\\n\\t\\t\\tuserAddress,\\n\\t\\t\\troutingInfo,\\n\\t\\t\\tinfo\\n\\t\\t);\\n\\n\\t\\temit RoundClosed(roundId);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction distributedFunding(uint256 roundId, bytes memory json) public {\\n\\t\\tProjectFundingData[] memory fundingData = parseFundingData(\\n\\t\\t\\tstring(json)\\n\\t\\t);\\n\\t\\tprocessFundingRound(fundingData, roundId);\\n\\t\\temit RoundClosedInSecret(roundId);\\n\\t}\\n\\n\\t// ========================================\\n\\t//     HELPER FUNCTIONS\\n\\t// ========================================\\n\\n\\tfunction validateProjectParameters(\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses\\n\\t) private pure {\\n\\t\\trequire(\\n\\t\\t\\tprojectIds.length == projectNames.length &&\\n\\t\\t\\t\\tprojectNames.length == projectDescriptions.length &&\\n\\t\\t\\t\\tprojectDescriptions.length == projectAddresses.length,\\n\\t\\t\\t\\\"Mismatched input arrays\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setupFundingRound(\\n\\t\\tFundingRound storage round,\\n\\t\\tuint256 id,\\n\\t\\tstring memory name,\\n\\t\\tstring memory description,\\n\\t\\tstring memory curveType,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses\\n\\t) private {\\n\\t\\tround.id = id;\\n\\t\\tround.name = name;\\n\\t\\tround.description = description;\\n\\t\\tround.curveType = curveType;\\n\\t\\tround.isOpen = true;\\n\\n\\t\\tfor (uint256 i = 0; i < projectIds.length; i++) {\\n\\t\\t\\trequire(round.projects[projectIds[i]].id == 0, \\\"Project ID exists\\\");\\n\\t\\t\\tround.projects[projectIds[i]] = Project({\\n\\t\\t\\t\\tid: projectIds[i],\\n\\t\\t\\t\\tname: projectNames[i],\\n\\t\\t\\t\\tdescription: projectDescriptions[i],\\n\\t\\t\\t\\tprojectAddress: projectAddresses[i],\\n\\t\\t\\t\\ttotalContributions: 0,\\n\\t\\t\\t\\ttotalSquareRoots: 0\\n\\t\\t\\t});\\n\\t\\t\\tround.projectIds.push(projectIds[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction validRound(uint256 roundId) private view returns (bool) {\\n\\t\\treturn fundingRounds[roundId].isOpen && fundingRounds[roundId].id != 0;\\n\\t}\\n\\n\\t// Parses the JSON and extracts funding data\\n\\tfunction parseFundingData(\\n\\t\\tstring memory json\\n\\t) internal pure returns (ProjectFundingData[] memory) {\\n\\t\\tuint256 numTokens;\\n\\t\\tJsmnSolLib.Token[] memory tokens;\\n\\t\\t(, tokens, numTokens) = JsmnSolLib.parse(json, 20);\\n\\t\\trequire(numTokens > 0, \\\"JSON parsing failed or no data found\\\");\\n\\n\\t\\tProjectFundingData[] memory results = new ProjectFundingData[](\\n\\t\\t\\t(numTokens - 1) / 3\\n\\t\\t);\\n\\t\\tfor (uint256 i = 0; i < results.length; i++) {\\n\\t\\t\\tstring memory projectId = JsmnSolLib.getBytes(\\n\\t\\t\\t\\tjson,\\n\\t\\t\\t\\ttokens[1 + 3 * i].start,\\n\\t\\t\\t\\ttokens[1 + 3 * i].end\\n\\t\\t\\t);\\n\\t\\t\\tstring memory percentageStr = JsmnSolLib.getBytes(\\n\\t\\t\\t\\tjson,\\n\\t\\t\\t\\ttokens[2 + 3 * i].start,\\n\\t\\t\\t\\ttokens[2 + 3 * i].end\\n\\t\\t\\t);\\n\\t\\t\\tuint256 fundingPercentage = uint256(\\n\\t\\t\\t\\tJsmnSolLib.parseInt(percentageStr)\\n\\t\\t\\t);\\n\\t\\t\\tresults[i] = ProjectFundingData(projectId, fundingPercentage);\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\n\\t// Processes each project's funding based on parsed data\\n\\tfunction processFundingRound(\\n\\t\\tProjectFundingData[] memory fundingData,\\n\\t\\tuint256 roundId\\n\\t) internal {\\n\\t\\tuint256 totalFunds = fundingRounds[roundId].totalContributions;\\n\\t\\tfor (uint256 i = 0; i < fundingRounds[roundId].projectIds.length; i++) {\\n\\t\\t\\tProject storage project = fundingRounds[roundId].projects[\\n\\t\\t\\t\\tfundingRounds[roundId].projectIds[i]\\n\\t\\t\\t];\\n\\t\\t\\tuint256 payout = calculatePayout(project, fundingData);\\n\\t\\t\\tproject.projectAddress.transfer(payout);\\n\\t\\t\\ttotalFunds -= payout;\\n\\t\\t}\\n\\t}\\n\\n\\t// Calculates the payout for a given project\\n\\tfunction calculatePayout(\\n\\t\\tProject storage project,\\n\\t\\tProjectFundingData[] memory fundingData\\n\\t) internal view returns (uint256) {\\n\\t\\tfor (uint256 i = 0; i < fundingData.length; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(fundingData[i].projectId)) ==\\n\\t\\t\\t\\tkeccak256(bytes(project.name))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn\\n\\t\\t\\t\\t\\t(project.totalContributions *\\n\\t\\t\\t\\t\\t\\tfundingData[i].fundingPercentage) / 100;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0xddb61106a7c6f414b6af775dd801bc7c269fc15bf3f0c45ea82bf4b3911b356e\",\"license\":\"MIT\"},\"contracts/JsmnSolLib.sol\":{\"content\":\"/*\\nCopyright (c) 2017 Christoph Niemann\\nPermission is hereby granted, free of charge, to any person obtaining a copy of\\nthis software and associated documentation files (the \\\"Software\\\"), to deal in\\nthe Software without restriction, including without limitation the rights to\\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\nof the Software, and to permit persons to whom the Software is furnished to do\\nso, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary JsmnSolLib {\\n\\tenum JsmnType {\\n\\t\\tUNDEFINED,\\n\\t\\tOBJECT,\\n\\t\\tARRAY,\\n\\t\\tSTRING,\\n\\t\\tPRIMITIVE\\n\\t}\\n\\n\\tuint constant RETURN_SUCCESS = 0;\\n\\tuint constant RETURN_ERROR_INVALID_JSON = 1;\\n\\tuint constant RETURN_ERROR_PART = 2;\\n\\tuint constant RETURN_ERROR_NO_MEM = 3;\\n\\n\\tstruct Token {\\n\\t\\tJsmnType jsmnType;\\n\\t\\tuint start;\\n\\t\\tbool startSet;\\n\\t\\tuint end;\\n\\t\\tbool endSet;\\n\\t\\tuint8 size;\\n\\t}\\n\\n\\tstruct Parser {\\n\\t\\tuint pos;\\n\\t\\tuint toknext;\\n\\t\\tint toksuper;\\n\\t}\\n\\n\\tfunction init(\\n\\t\\tuint length\\n\\t) internal pure returns (Parser memory, Token[] memory) {\\n\\t\\tParser memory p = Parser(0, 0, -1);\\n\\t\\tToken[] memory t = new Token[](length);\\n\\t\\treturn (p, t);\\n\\t}\\n\\n\\tfunction allocateToken(\\n\\t\\tParser memory parser,\\n\\t\\tToken[] memory tokens\\n\\t) internal pure returns (bool, Token memory) {\\n\\t\\tif (parser.toknext >= tokens.length) {\\n\\t\\t\\t// no more space in tokens\\n\\t\\t\\treturn (false, tokens[tokens.length - 1]);\\n\\t\\t}\\n\\t\\tToken memory token = Token(JsmnType.UNDEFINED, 0, false, 0, false, 0);\\n\\t\\ttokens[parser.toknext] = token;\\n\\t\\tparser.toknext++;\\n\\t\\treturn (true, token);\\n\\t}\\n\\n\\tfunction fillToken(\\n\\t\\tToken memory token,\\n\\t\\tJsmnType jsmnType,\\n\\t\\tuint start,\\n\\t\\tuint end\\n\\t) internal pure {\\n\\t\\ttoken.jsmnType = jsmnType;\\n\\t\\ttoken.start = start;\\n\\t\\ttoken.startSet = true;\\n\\t\\ttoken.end = end;\\n\\t\\ttoken.endSet = true;\\n\\t\\ttoken.size = 0;\\n\\t}\\n\\n\\tfunction parseString(\\n\\t\\tParser memory parser,\\n\\t\\tToken[] memory tokens,\\n\\t\\tbytes memory s\\n\\t) internal pure returns (uint) {\\n\\t\\tuint start = parser.pos;\\n\\t\\tbool success;\\n\\t\\tToken memory token;\\n\\t\\tparser.pos++;\\n\\n\\t\\tfor (; parser.pos < s.length; parser.pos++) {\\n\\t\\t\\tbytes1 c = s[parser.pos];\\n\\n\\t\\t\\t// Quote -> end of string\\n\\t\\t\\tif (c == '\\\"') {\\n\\t\\t\\t\\t(success, token) = allocateToken(parser, tokens);\\n\\t\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t\\tparser.pos = start;\\n\\t\\t\\t\\t\\treturn RETURN_ERROR_NO_MEM;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfillToken(token, JsmnType.STRING, start + 1, parser.pos);\\n\\t\\t\\t\\treturn RETURN_SUCCESS;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (uint8(c) == 92 && parser.pos + 1 < s.length) {\\n\\t\\t\\t\\t// handle escaped characters: skip over it\\n\\t\\t\\t\\tparser.pos++;\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\ts[parser.pos] == '\\\"' ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"/\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"\\\\\\\\\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"f\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"r\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"n\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"b\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"t\\\"\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// all other values are INVALID\\n\\t\\t\\t\\t\\tparser.pos = start;\\n\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tparser.pos = start;\\n\\t\\treturn RETURN_ERROR_PART;\\n\\t}\\n\\n\\tfunction parsePrimitive(\\n\\t\\tParser memory parser,\\n\\t\\tToken[] memory tokens,\\n\\t\\tbytes memory s\\n\\t) internal pure returns (uint) {\\n\\t\\tbool found = false;\\n\\t\\tuint start = parser.pos;\\n\\t\\tbytes1 c;\\n\\t\\tbool success;\\n\\t\\tToken memory token;\\n\\t\\tfor (; parser.pos < s.length; parser.pos++) {\\n\\t\\t\\tc = s[parser.pos];\\n\\t\\t\\tif (\\n\\t\\t\\t\\tc == \\\" \\\" ||\\n\\t\\t\\t\\tc == \\\"\\\\t\\\" ||\\n\\t\\t\\t\\tc == \\\"\\\\n\\\" ||\\n\\t\\t\\t\\tc == \\\"\\\\r\\\" ||\\n\\t\\t\\t\\tc == \\\",\\\" ||\\n\\t\\t\\t\\tc == 0x7d ||\\n\\t\\t\\t\\tc == 0x5d\\n\\t\\t\\t) {\\n\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tif (uint8(c) < 32 || uint8(c) > 127) {\\n\\t\\t\\t\\tparser.pos = start;\\n\\t\\t\\t\\treturn RETURN_ERROR_INVALID_JSON;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (!found) {\\n\\t\\t\\tparser.pos = start;\\n\\t\\t\\treturn RETURN_ERROR_PART;\\n\\t\\t}\\n\\n\\t\\t// found the end\\n\\t\\t(success, token) = allocateToken(parser, tokens);\\n\\t\\tif (!success) {\\n\\t\\t\\tparser.pos = start;\\n\\t\\t\\treturn RETURN_ERROR_NO_MEM;\\n\\t\\t}\\n\\t\\tfillToken(token, JsmnType.PRIMITIVE, start, parser.pos);\\n\\t\\tparser.pos--;\\n\\t\\treturn RETURN_SUCCESS;\\n\\t}\\n\\n\\tfunction parse(\\n\\t\\tstring memory json,\\n\\t\\tuint numberElements\\n\\t) internal pure returns (uint, Token[] memory tokens, uint) {\\n\\t\\tbytes memory s = bytes(json);\\n\\t\\tbool success;\\n\\t\\tParser memory parser;\\n\\t\\t(parser, tokens) = init(numberElements);\\n\\n\\t\\t// Token memory token;\\n\\t\\tuint r;\\n\\t\\tuint count = parser.toknext;\\n\\t\\tuint i;\\n\\t\\tToken memory token;\\n\\n\\t\\tfor (; parser.pos < s.length; parser.pos++) {\\n\\t\\t\\tbytes1 c = s[parser.pos];\\n\\n\\t\\t\\t// 0x7b, 0x5b opening curly parentheses or brackets\\n\\t\\t\\tif (c == 0x7b || c == 0x5b) {\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\t(success, token) = allocateToken(parser, tokens);\\n\\t\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t\\treturn (RETURN_ERROR_NO_MEM, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (parser.toksuper != -1) {\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].size++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\ttoken.jsmnType = (c == 0x7b ? JsmnType.OBJECT : JsmnType.ARRAY);\\n\\t\\t\\t\\ttoken.start = parser.pos;\\n\\t\\t\\t\\ttoken.startSet = true;\\n\\t\\t\\t\\tparser.toksuper = int(parser.toknext - 1);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// closing curly parentheses or brackets\\n\\t\\t\\tif (c == 0x7d || c == 0x5d) {\\n\\t\\t\\t\\tJsmnType tokenType = (\\n\\t\\t\\t\\t\\tc == 0x7d ? JsmnType.OBJECT : JsmnType.ARRAY\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tbool isUpdated = false;\\n\\t\\t\\t\\tfor (i = parser.toknext - 1; i >= 0; i--) {\\n\\t\\t\\t\\t\\ttoken = tokens[i];\\n\\t\\t\\t\\t\\tif (token.startSet && !token.endSet) {\\n\\t\\t\\t\\t\\t\\tif (token.jsmnType != tokenType) {\\n\\t\\t\\t\\t\\t\\t\\t// found a token that hasn't been closed but from a different type\\n\\t\\t\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tparser.toksuper = -1;\\n\\t\\t\\t\\t\\t\\ttokens[i].end = parser.pos + 1;\\n\\t\\t\\t\\t\\t\\ttokens[i].endSet = true;\\n\\t\\t\\t\\t\\t\\tisUpdated = true;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (!isUpdated) {\\n\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfor (; i > 0; i--) {\\n\\t\\t\\t\\t\\ttoken = tokens[i];\\n\\t\\t\\t\\t\\tif (token.startSet && !token.endSet) {\\n\\t\\t\\t\\t\\t\\tparser.toksuper = int(i);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (i == 0) {\\n\\t\\t\\t\\t\\ttoken = tokens[i];\\n\\t\\t\\t\\t\\tif (token.startSet && !token.endSet) {\\n\\t\\t\\t\\t\\t\\tparser.toksuper = int(i);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 0x42\\n\\t\\t\\tif (c == '\\\"') {\\n\\t\\t\\t\\tr = parseString(parser, tokens, s);\\n\\n\\t\\t\\t\\tif (r != RETURN_SUCCESS) {\\n\\t\\t\\t\\t\\treturn (r, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t//JsmnError.INVALID;\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\tif (parser.toksuper != -1) tokens[uint(parser.toksuper)].size++;\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ' ', \\\\r, \\\\t, \\\\n\\n\\t\\t\\tif (c == \\\" \\\" || c == 0x11 || c == 0x12 || c == 0x14) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 0x3a\\n\\t\\t\\tif (c == \\\":\\\") {\\n\\t\\t\\t\\tparser.toksuper = int(parser.toknext - 1);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (c == \\\",\\\") {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\tparser.toksuper != -1 &&\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].jsmnType != JsmnType.ARRAY &&\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].jsmnType != JsmnType.OBJECT\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tfor (i = parser.toknext - 1; i >= 0; i--) {\\n\\t\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\t\\ttokens[i].jsmnType == JsmnType.ARRAY ||\\n\\t\\t\\t\\t\\t\\t\\ttokens[i].jsmnType == JsmnType.OBJECT\\n\\t\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\t\\tif (tokens[i].startSet && !tokens[i].endSet) {\\n\\t\\t\\t\\t\\t\\t\\t\\tparser.toksuper = int(i);\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Primitive\\n\\t\\t\\tif (\\n\\t\\t\\t\\t(c >= \\\"0\\\" && c <= \\\"9\\\") ||\\n\\t\\t\\t\\tc == \\\"-\\\" ||\\n\\t\\t\\t\\tc == \\\"f\\\" ||\\n\\t\\t\\t\\tc == \\\"t\\\" ||\\n\\t\\t\\t\\tc == \\\"n\\\"\\n\\t\\t\\t) {\\n\\t\\t\\t\\tif (parser.toksuper != -1) {\\n\\t\\t\\t\\t\\ttoken = tokens[uint(parser.toksuper)];\\n\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\ttoken.jsmnType == JsmnType.OBJECT ||\\n\\t\\t\\t\\t\\t\\t(token.jsmnType == JsmnType.STRING && token.size != 0)\\n\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tr = parsePrimitive(parser, tokens, s);\\n\\t\\t\\t\\tif (r != RETURN_SUCCESS) {\\n\\t\\t\\t\\t\\treturn (r, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\tif (parser.toksuper != -1) {\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].size++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// printable char\\n\\t\\t\\tif (c >= 0x20 && c <= 0x7e) {\\n\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn (RETURN_SUCCESS, tokens, parser.toknext);\\n\\t}\\n\\n\\tfunction getBytes(\\n\\t\\tstring memory json,\\n\\t\\tuint start,\\n\\t\\tuint end\\n\\t) internal pure returns (string memory) {\\n\\t\\tbytes memory s = bytes(json);\\n\\t\\tbytes memory result = new bytes(end - start);\\n\\t\\tfor (uint i = start; i < end; i++) {\\n\\t\\t\\tresult[i - start] = s[i];\\n\\t\\t}\\n\\t\\treturn string(result);\\n\\t}\\n\\n\\t// parseInt\\n\\tfunction parseInt(string memory _a) internal pure returns (int) {\\n\\t\\treturn parseInt(_a, 0);\\n\\t}\\n\\n\\t// parseInt(parseFloat*10^_b)\\n\\tfunction parseInt(string memory _a, uint _b) internal pure returns (int) {\\n\\t\\tbytes memory bresult = bytes(_a);\\n\\t\\tint mint = 0;\\n\\t\\tbool decimals = false;\\n\\t\\tbool negative = false;\\n\\t\\tfor (uint i = 0; i < bresult.length; i++) {\\n\\t\\t\\tif ((i == 0) && (bresult[i] == \\\"-\\\")) {\\n\\t\\t\\t\\tnegative = true;\\n\\t\\t\\t}\\n\\t\\t\\tif ((uint8(bresult[i]) >= 48) && (uint8(bresult[i]) <= 57)) {\\n\\t\\t\\t\\tif (decimals) {\\n\\t\\t\\t\\t\\tif (_b == 0) break;\\n\\t\\t\\t\\t\\telse _b--;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tmint *= 10;\\n\\t\\t\\t\\tmint += int(uint256(uint8(bresult[i]))) - 48;\\n\\t\\t\\t} else if (uint8(bresult[i]) == 46) decimals = true;\\n\\t\\t}\\n\\t\\tif (_b > 0) mint *= int(10 ** _b);\\n\\t\\tif (negative) mint *= -1;\\n\\t\\treturn mint;\\n\\t}\\n\\n\\tfunction uint2str(uint i) internal pure returns (string memory) {\\n\\t\\tif (i == 0) return \\\"0\\\";\\n\\t\\tuint j = i;\\n\\t\\tuint len;\\n\\t\\twhile (j != 0) {\\n\\t\\t\\tlen++;\\n\\t\\t\\tj /= 10;\\n\\t\\t}\\n\\t\\tbytes memory bstr = new bytes(len);\\n\\t\\tuint k = len - 1;\\n\\t\\twhile (i != 0) {\\n\\t\\t\\tbstr[k--] = bytes1(uint8(48 + (i % 10)));\\n\\t\\t\\ti /= 10;\\n\\t\\t}\\n\\t\\treturn string(bstr);\\n\\t}\\n\\n\\tfunction parseBool(string memory _a) internal pure returns (bool) {\\n\\t\\tif (strCompare(_a, \\\"true\\\") == 0) {\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction strCompare(\\n\\t\\tstring memory _a,\\n\\t\\tstring memory _b\\n\\t) internal pure returns (int) {\\n\\t\\tbytes memory a = bytes(_a);\\n\\t\\tbytes memory b = bytes(_b);\\n\\t\\tuint minLength = a.length;\\n\\t\\tif (b.length < minLength) minLength = b.length;\\n\\t\\tfor (uint i = 0; i < minLength; i++)\\n\\t\\t\\tif (a[i] < b[i]) return -1;\\n\\t\\t\\telse if (a[i] > b[i]) return 1;\\n\\t\\tif (a.length < b.length) return -1;\\n\\t\\telse if (a.length > b.length) return 1;\\n\\t\\telse return 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0xea51e519ec3c809b9b7b1b4cf46616641a5c65bf99f7b89c98f6c3501f1e0330\"},\"interfaces/IGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IGateway {\\n\\tstruct ExecutionInfo {\\n\\t\\tbytes user_key;\\n\\t\\tbytes user_pubkey;\\n\\t\\tstring routing_code_hash;\\n\\t\\tstring task_destination_network;\\n\\t\\tstring handle;\\n\\t\\tbytes12 nonce;\\n\\t\\tuint32 callback_gas_limit;\\n\\t\\tbytes payload;\\n\\t\\tbytes payload_signature;\\n\\t}\\n\\n\\tfunction send(\\n\\t\\tbytes32 _payloadHash,\\n\\t\\taddress _userAddress,\\n\\t\\tstring calldata _routingInfo,\\n\\t\\tExecutionInfo calldata _info\\n\\t) external payable;\\n}\\n\",\"keccak256\":\"0x0a9d680f18372c00a8e706f4656647edc7a3973a1d1974bf2a59fe319a3150ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461003c57600280546001600160a01b031916733879e146140b627a5c858a08e507b171d9e431391790556128e190816100428239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c9081634a98b9021461153f5750806355aa2f8c14611409578063763a3df61461131b5780637faf8dcf14610e7e5780638b3b57a414610e4757806390a4cb9b14610df5578063b239a41214610dbe578063c428a27814610d1b578063c5ad404314610ce4578063c9640c0914610cb5578063e09a1094146100d05763eb0cde1d146100a557600080fd5b346100cd57806003193601126100cd576002546040516001600160a01b039091168152602090f35b80fd5b506101a03660031901126100cd576024356001600160401b038111610cb1576100fd90369060040161191a565b6044356001600160401b038111610cad5761011c90369060040161191a565b906064356001600160401b038111610c995761013c90369060040161191a565b926001600160401b03608435116100cd573660236084350112156100cd576084356004013561016a81611935565b90610178604051928361172c565b8082526020820190813660248360051b608435010111610c9557602460843501905b60248360051b60843501018210610c9d5750505060a4356001600160401b038111610c99576101cd90369060040161194c565b9560c4356001600160401b038111610c95576101ed90369060040161194c565b916001600160401b0360e43511610c955736602360e435011215610c955760e435600401359161021c83611935565b9261022a604051948561172c565b80845260208401903660248260051b60e435010111610c6657602460e43501915b60248260051b60e43501018310610c7357505050610104356001600160a01b0381169003610c6e576101243515156101243503610c6e57610164356001600160401b038111610c6a576102a290369060040161169b565b6001600160401b036101843511610c66576101206101843536036003190112610c665786518b518091149081610c5b575b5080610c50575b15610c0b576004358852876020526040882054610bd45761012435610b52575b50506004358652856020526040862097600435895587516001600160401b038111610a835761032c60018b01546117fa565b601f8111610b0d575b50806020601f8211600114610aa2578991610a97575b508160011b916000199060031b1c19161760018a01555b8051906001600160401b038211610a8357819061038260028c01546117fa565b601f8111610a32575b50602090601f83116001146109c35789926109b8575b50508160011b916000199060031b1c19161760028901555b8051906001600160401b0382116109a45781906103d960038b01546117fa565b601f8111610953575b50602090601f83116001146108e45788926108d9575b50508160011b916000199060031b1c19161760038801555b60078701805460ff19166001179055845b84518110156107ff576104348186611b73565b5186526004880160205260408620546107c6576104518186611b73565b5161045c828b611b73565b51906104688387611b73565b516001600160a01b0361047b8588611b73565b5116906040519261048b846116f6565b835260208301938452604083015260608201528760808201528760a08201526104b48388611b73565b51885260048a01602052604088209181518355518051906001600160401b0382116106e75781906104e860018601546117fa565b601f8111610775575b50602090601f8311600114610706578b926106fb575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b0382116106e75761054260028501546117fa565b601f81116106a2575b50602090601f83116001146106305791806005949260a0948d92610625575b50508160011b916000199060031b1c19161760028501555b60038401600180841b036060830151166bffffffffffffffffffffffff841b8254161790556080810151600485015501519101556105c08186611b73565b5190600589015491600160401b83101561060f576105ed83600161060a950160058d015560058c016117e2565b819291549060031b600019811b9283911b16911916179055611b64565b610421565b634e487b7160e01b600052604160045260246000fd5b01519050388061056a565b90600285018b5260208b20918b5b601f198516811061068a5750926005949260019260a09583601f19811610610671575b505050811b016002850155610582565b015160001960f88460031b161c19169055388080610661565b9192602060018192868501518155019401920161063e565b600285018b5260208b20601f840160051c8101602085106106e0575b601f830160051c820181106106d457505061054b565b600081556001016106be565b50806106be565b634e487b7160e01b8a52604160045260248afd5b015190503880610507565b9250600185018b5260208b20908b935b601f198416851061075a576001945083601f19811610610741575b505050811b01600183015561051f565b015160001960f88460031b161c19169055388080610731565b81810151835560209485019460019093019290910190610716565b909150600185018b5260208b20601f840160051c8101602085106107bf575b90849392915b601f830160051c820181106107b05750506104f1565b6000815585945060010161079a565b5080610794565b60405162461bcd60e51b815260206004820152601160248201527050726f6a6563742049442065786973747360781b6044820152606490fd5b85828887600154600160401b81101561060f5760018101806001558110156108c3576001600052600435907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601556020610864604051936040855260408501906118da565b91838303828501525191828152019290845b8181106108ad57505050807f2fceaf42a6664f3294222799a359650844542179732d12b26b6926bd338479a591600435930390a280f35b8251855260209485019490920191600101610876565b634e487b7160e01b600052603260045260246000fd5b0151905038806103f8565b925060038a018852602088209088935b601f1984168510610938576001945083601f1981161061091f575b505050811b016003880155610410565b015160001960f88460031b161c1916905538808061090f565b818101518355602094850194600190930192909101906108f4565b90915060038a01885260208820601f840160051c81016020851061099d575b90849392915b601f830160051c8201811061098e5750506103e2565b60008155859450600101610978565b5080610972565b634e487b7160e01b87526041600452602487fd5b0151905038806103a1565b925060028b018952602089209089935b601f1984168510610a17576001945083601f198116106109fe575b505050811b0160028901556103b9565b015160001960f88460031b161c191690553880806109ee565b818101518355602094850194600190930192909101906109d3565b90915060028b01895260208920601f840160051c810160208510610a7c575b90849392915b601f830160051c82018110610a6d57505061038b565b60008155859450600101610a57565b5080610a51565b634e487b7160e01b88526041600452602488fd5b90508901513861034b565b915060018b0189526020892089925b8b601f1984168510610af657506001935082601f19811610610add575b5050811b0160018a0155610362565b8b015160001960f88460031b161c191690553880610ace565b810151825560209384019360019092019101610ab1565b60018b01895260208920601f830160051c810160208410610b4b575b601f830160051c82018110610b3f575050610335565b60008155600101610b29565b5080610b29565b6002546001600160a01b031690813b15610bd057918891610b99936040518095819482936339624a6b60e21b84526101843560040191610104356101443560048701611a1e565b039134905af18015610bc557908791156102fa57610bb6906116c8565b610bc15785386102fa565b8580fd5b6040513d89823e3d90fd5b8880fd5b60405162461bcd60e51b815260206004820152600f60248201526e526f756e642049442065786973747360881b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4d69736d61746368656420696e707574206172726179730000000000000000006044820152606490fd5b5085518551146102da565b9050865114386102d3565b8780fd5b8680fd5b600080fd5b82356001600160a01b0381169003610bd057823581526020928301920161024b565b8480fd5b8380fd5b813581526020918201910161019a565b8280fd5b5080fd5b50346100cd57806003193601126100cd576020604051733879e146140b627a5c858a08e507b171d9e431398152f35b50346100cd57610cf33661179f565b507f0de2355f73246cb2852175af9385f91c8205be026c831a20ada4062931abdec08280a280f35b50346100cd5760203660031901126100cd57604090600435815280602052208054610d4860018301611834565b91610d5560028201611834565b610dad610d6460038401611834565b610d9f60ff600760068701549601541693610d91604051988998895260c060208a015260c08901906118da565b9087820360408901526118da565b9085820360608701526118da565b916080840152151560a08301520390f35b50346100cd57610dcd3661179f565b507f0e82eab4cbddb8a38b9fb81ba86a4a05ec8aa2c55dbea69d2e72857b4f90e9548280a280f35b50346100cd5760203660031901126100cd57600435600154811015610cb15760209060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154604051908152f35b50346100cd57610e563661179f565b507fdcad6660d3e34a68718474b3d2dfb7da8a012d967dfe595b0123a6112667f0688280a280f35b50346100cd57610e8d3661179f565b91610e9783611d5d565b80959250156112ca576000198581019586116112b657600380960493610ebc85611935565b94610eca604051968761172c565b808652610ed9601f1991611935565b01815b818110611292575050805b85518110156111bd578088029088820481036111a957600191808301908184116111955790610f3091610f3a60209283610f21828c611b73565b5101519060609586918c611b73565b510151908b612824565b9260029182018092116110225790610f6e91610f6484610f5a848d611b73565b510151928b611b73565b510151908a612824565b858695808889948a935b611036575b5050505080610fec575b50610fc4575b92610fbf9360405192610f9f846116db565b8352820152610fae8289611b73565b52610fb98188611b73565b50611b64565b610ee7565b83600003938085058714901517610f8d575b634e487b7160e01b600052601160045260246000fd5b604d819692961161102257600a0a818102919060008212600160ff1b821416610fd6578183051490151715610fd6579338610f87565b634e487b7160e01b87526011600452602487fd5b9091929881518a101561118f5789158061116e575b611165575b61105a8a83611d0b565b51603060f891821c10158061114e575b1561112257836110f9575b600a91828102928184051490151715610fd6576110928b84611d0b565b51901c90602f198083019280841387166110e557908d9183010192831291129080158216911516176110d157906110cb8493929a611b64565b93610f78565b634e487b7160e01b8b52601160045260248bfd5b634e487b7160e01b8e52601160045260248efd5b9290999391851560001461110d5750610f7d565b91939990929461111c90611d2d565b94611075565b99602e83929b61113483889796611d0b565b51901c14611146575b6110cb90611b64565b83925061113d565b50603961115b8c85611d0b565b51821c111561106a565b94508294611050565b50602d60f81b6001600160f81b03196111878c85611d0b565b51161461104b565b98610f7d565b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b83526011600452602483fd5b8588888481815260209281845260066040832001549282935b8184528386526005806040862001548610156112695761120286600460408820019260408820016117e2565b905490851b1c8552865260408420908480808061121f8c87611b94565b9588015486906001600160a01b0316828215611260575bf1156112555761124f9161124991611b87565b94611b64565b936111d6565b6040513d86823e3d90fd5b506108fc611236565b84837fdcad6660d3e34a68718474b3d2dfb7da8a012d967dfe595b0123a6112667f0688280a280f35b6020906040516112a1816116db565b60608152828581830152828a01015201610edc565b634e487b7160e01b84526011600452602484fd5b60405162461bcd60e51b8152602060048201526024808201527f4a534f4e2070617273696e67206661696c6564206f72206e6f206461746120666044820152631bdd5b9960e21b6064820152608490fd5b50600319608036820112610cb1576001600160a01b0360043581811692838203610c6e5784926001600160401b0391604435838111610bc15761136290369060040161169b565b929091606435948511610c6a57610120908536030112610bc1576002541690813b15610bc15785936113b1604051968795869485946339624a6b60e21b86526004019260243560048701611a1e565b039134905af180156113fe576113ea575b50807f9ca0de0709c575c61710159cf212e68fa7f9bd8d600cb008ae8c028b7e54b70591a280f35b6113f3906116c8565b610cb15781386113c2565b6040513d84823e3d90fd5b5060031960a036820112610cb157600435906001600160a01b0390602435908282168203610c6e576001600160401b0390606435828111610c6a5761145290369060040161169b565b91608435938411610c6657610120908436030112610c6a578587528660205260ff6007604089200154166115045786946002541690813b15610bc15785936114b7604051968795869485946339624a6b60e21b86526004019260443560048701611a1e565b039134905af180156113fe576114f0575b50807fe9f7d7fd0b133404f0ccff737d6f3594748e04bc5507adfaed35835ef989371191a280f35b6114f9906116c8565b610cb15781386114c8565b60405162461bcd60e51b8152602060048201526013602482015272149bdd5b99081a5cc81b9bdd0818db1bdcd959606a1b6044820152606490fd5b8260031960c036820112610cb157600435926024358015158103610c9957604435926001600160a01b038085168503610bc1576001600160401b0392608435848111610c665761159390369060040161169b565b95909360a435958611610bd057610120908636030112610c66578888528760205260ff600760408a200154161561166a5750878752866020526007604088200160ff198154169055611609575b85877fe9f7d7fd0b133404f0ccff737d6f3594748e04bc5507adfaed35835ef98937118280a280f35b6002541691823b15610bc1579085939291611641604051968795869485946339624a6b60e21b86526004019260643560048701611a1e565b039134905af180156113fe5761165b575b808080806115e0565b611664906116c8565b82611652565b62461bcd60e51b815260206004820152600c60248201526b149bdd5b990818db1bdcd95960a21b6044820152606490fd5b9181601f84011215610c6e578235916001600160401b038311610c6e5760208381860195010111610c6e57565b6001600160401b03811161060f57604052565b604081019081106001600160401b0382111761060f57604052565b60c081019081106001600160401b0382111761060f57604052565b606081019081106001600160401b0382111761060f57604052565b90601f801991011681019081106001600160401b0382111761060f57604052565b6001600160401b03811161060f57601f01601f191660200190565b9291926117748261174d565b91611782604051938461172c565b829481845281830111610c6e578281602093846000960137010152565b906040600319830112610c6e5760043591602435906001600160401b038211610c6e5780602383011215610c6e578160246117df93600401359101611768565b90565b80548210156108c35760005260206000200190600090565b90600182811c9216801561182a575b602083101461181457565b634e487b7160e01b600052602260045260246000fd5b91607f1691611809565b9060405191826000825492611848846117fa565b9081845260019485811690816000146118b75750600114611874575b50506118729250038361172c565b565b9093915060005260209081600020936000915b81831061189f57505061187293508201013880611864565b85548884018501529485019487945091830191611887565b91505061187294506020925060ff191682840152151560051b8201013880611864565b919082519283825260005b848110611906575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016118e5565b9080601f83011215610c6e578160206117df93359101611768565b6001600160401b03811161060f5760051b60200190565b9080601f83011215610c6e5781359061196482611935565b92611972604051948561172c565b828452602092838086019160051b83010192808411610c6e57848301915b8483106119a05750505050505090565b82356001600160401b038111610c6e5786916119c18484809489010161191a565b815201920191611990565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e1982360301811215610c6e5701602081359101916001600160401b038211610c6e578136038313610c6e57565b9081526001600160a01b039091166020820152608060408201819052909392611a4a92918501916119cc565b916060818403910152611ae6611acb611ab0611a95611a7a611a6c86806119ed565b610120808a528901916119cc565b611a8760208701876119ed565b9088830360208a01526119cc565b611aa260408601866119ed565b9087830360408901526119cc565b611abd60608501856119ed565b9086830360608801526119cc565b611ad860808401846119ed565b9085830360808701526119cc565b9160a08201356bffffffffffffffffffffffff60a01b8116809103610c6e5760a082015260c082013563ffffffff8116809103610c6e576117df93611b459160c0840152611b3760e08501856119ed565b9084830360e08601526119cc565b91611b5661010091828101906119ed565b9290918185039101526119cc565b6000198114610fd65760010190565b80518210156108c35760209160051b010190565b91908203918211610fd657565b9060005b8151811015611cb257611bab8183611b73565b5151805160208092012060018086019060405190816000845494611bce866117fa565b9081845288840196898682169182600014611c93575050600114611c56575b5050611bfb9250038261172c565b51902014611c125750611c0d90611b64565b611b98565b60049384015493929091611c2591611b73565b51015191828102928184041490151715611c4157506064900490565b601190634e487b7160e01b6000525260246000fd5b9150915060005285600020916000925b828410611c80575050508185611bfb928201013880611bed565b8054858501890152928701928101611c66565b9250935050611bfb945060ff19168652151560051b8201013880611bed565b505050600090565b60405190611cc782611711565b60006040838281528260208201520152565b60405190611ce6826116f6565b8160a06000918281528260208201528260408201528260608201528260808201520152565b9081518110156108c3570160200190565b60ff1660ff8114610fd65760010190565b8015610fd6576000190190565b516005811015611d475790565b634e487b7160e01b600052602160045260246000fd5b611d65611cba565b50611d6e611cba565b506040805192611d7d84611711565b600091828552602090818601908482528087016000199182825280516102a081018181106001600160401b038211176123f55782526014815285885b61028081106123df57505097845191611dd0611cd9565b505b8a5182518110156123d1576001600160f81b031990611df19084611d0b565b5116607b60f81b81148080156123c4575b6123185750607d60f81b811480801561230b575b61218d5750601160f91b811461218057600160fd1b8181148015612173575b8015612166575b8015612159575b61215257601d60f91b821461212957600b60fa1b8214611fee57600360fc1b82101580611fe0575b8015611fd3575b8015611fc6575b8015611fb9575b8015611fac575b611ec8578110159081611eb9575b50611eac575b611ea58b51611b64565b8b52611dd2565b5060019950505050505050565b603f60f91b1015905038611e95565b5050918351858103611f31575b50611ee1828b8d6126ba565b80611f265750611ef090611b64565b918351858103611f01575b50611e9b565b611f0d60a0918c611b73565b510160ff611f1d81835116611d1c565b16905238611efb565b9a5050505050505050565b611f3b908b611b73565b5180519060059081831015611f98576001809314918215611f69575b505015611ed5579a5050505050505050565b8151919250811015611f98576003149081611f87575b503880611f57565b60ff915060a0015116151538611f7f565b634e487b7160e01b8c52602160045260248cfd5b50603760f91b8214611e87565b50601d60fa1b8214611e80565b50603360f91b8214611e79565b50602d60f81b8214611e72565b50603960f81b821115611e6b565b50508351858114159081612107575b50806120d2575b15611e9b5795929798969390949182518281019081116110d1575b61203261202c828b611b73565b51611d3a565b600590818110156120be5760021490811561209e575b5061205c575b61205790611d2d565b61201f565b87612067828b611b73565b510151151580612088575b1561204e578994979193969295989a9952611e9b565b506080612095828b611b73565b51015115612072565b90506120ad61202c838c611b73565b90811015611f985760011438612048565b634e487b7160e01b8d52602160045260248dfd5b506120e161202c85518c611b73565b60058110156120f35760011415612004565b634e487b7160e01b8a52602160045260248afd5b612116915061202c908c611b73565b60058110156120f3576002141538611ffd565b5050855185810190811161213e578452611e9b565b634e487b7160e01b8a52601160045260248afd5b5050611e9b565b50600560fa1b8214611e43565b50600960f91b8214611e3c565b50601160f81b8214611e35565b5091611ee1828b8d61249e565b9050899691989594999a9792939a50600014612303576001995b81518581019081116122ef575b6121be818a611b73565b518a8101511515806122e3575b6121de57506121d990611d2d565b6121b4565b9b90919493989b9a95969992979a516005808210156120be57821015611f9857036122c1578585528b516001908181018091116122cf576080612232848f8594606061222a8484611b73565b510152611b73565b510152156122c157805b612280575b801561224d5750611e9b565b612257818c611b73565b518281015115159081612273575b5015611efb57845238611efb565b6080915001511538612265565b61228a818c611b73565b5182810151151590816122b4575b506122ac576122a690611d2d565b8061223c565b808552612241565b6080915001511538612298565b5060019a5050505050505050565b634e487b7160e01b8c52601160045260248cfd5b506080810151156121cb565b634e487b7160e01b88526011600452602488fd5b6002996121a7565b50605d60f81b8214611e16565b936123239150611b64565b9261232e8b8d612409565b9190156123b55785518c88820361238f575b5050156123885760015b60058110156123745781528b5188820152600190820152855185810190811161213e578452611e9b565b634e487b7160e01b8b52602160045260248bfd5b600261234a565b60a09161239b91611b73565b510160ff6123ab81835116611d1c565b169052388c612340565b5060039b505050505050505050565b50605b60f81b8214611e02565b505093519698505050505050565b6123e7611cd9565b828285010152018690611db9565b634e487b7160e01b89526041600452602489fd5b602090929192612417611cd9565b5001805183518091101561247f575061246c60405193612436856116f6565b600080865280602087015280604087015280606087015280608087015260a0860152825190856124668383611b73565b52611b73565b506124778151611b64565b905260019190565b919291600019810191508111610fd65761249891611b73565b51600091565b9291908351916124ac611cd9565b506124b78551611b64565b85525b845181518110156126af576124cf9082611d0b565b516001600160f81b031990601160f91b90828116821461265a5760f81c605c148061262f575b61250d5750505b6125068551611b64565b85526124ba565b8161252461251b8951611b64565b808a5285611d0b565b511614908115612613575b81156125f7575b81156125db575b81156125bf575b81156125a3575b8115612587575b811561256b575b506000036124fc575050909152600190565b8651601d60fa1b925061257e9084611d0b565b51161438612559565b9050603160f91b8161259a885185611d0b565b51161490612552565b9050603760f91b816125b6885185611d0b565b5116149061254b565b9050603960f91b816125d2885185611d0b565b51161490612544565b9050603360f91b816125ee885185611d0b565b5116149061253d565b9050601760fa1b8161260a885185611d0b565b51161490612536565b9050602f60f81b81612626885185611d0b565b5116149061252f565b50865160018101809111612645578351116124f5565b60246000634e487b7160e01b81526011600452fd5b5050505061266a90849394612409565b9190156126a6576001908181018091116126455760a0935190600384526020840152816040840152606083015260808201526000918291015290565b91905052600390565b505050909152600290565b92919060008451926126ca611cd9565b505b85518151811015612819576126e19082611d0b565b516001600160f81b03198116600160fd1b811490811561280b575b81156127fd575b81156127ef575b81156127e1575b81156127d3575b81156127c5575b5061275f5760f81c60208110908115612754575b50612749576127428651611b64565b86526126cc565b505050909152600190565b607f91501138612733565b5050506001939192935b156127be576127789082612409565b90156127b75760a090829360009351906004835260208301526001604083015260608201526001608082015201526127b08151611d2d565b9052600090565b5052600390565b5052600290565b605d60f81b1490503861271f565b607d60f81b81149150612718565b600b60fa1b81149150612711565b600d60f81b8114915061270a565b600560f91b81149150612703565b600960f81b811491506126fc565b505093919293612769565b92916128308282611b87565b9161283a8361174d565b92612848604051948561172c565b808452612857601f199161174d565b01366020850137805b82811061286f57509193505050565b6128a6906001600160f81b03196128868289611d0b565b51166128a06128958584611b87565b9160001a9187611d0b565b53611b64565b61286056fea2646970667358221220ce1aa4f9338925ecf5a4162593d3f5479a9e7335c3bdc05ae17cc37bb42c38ac64736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c9081634a98b9021461153f5750806355aa2f8c14611409578063763a3df61461131b5780637faf8dcf14610e7e5780638b3b57a414610e4757806390a4cb9b14610df5578063b239a41214610dbe578063c428a27814610d1b578063c5ad404314610ce4578063c9640c0914610cb5578063e09a1094146100d05763eb0cde1d146100a557600080fd5b346100cd57806003193601126100cd576002546040516001600160a01b039091168152602090f35b80fd5b506101a03660031901126100cd576024356001600160401b038111610cb1576100fd90369060040161191a565b6044356001600160401b038111610cad5761011c90369060040161191a565b906064356001600160401b038111610c995761013c90369060040161191a565b926001600160401b03608435116100cd573660236084350112156100cd576084356004013561016a81611935565b90610178604051928361172c565b8082526020820190813660248360051b608435010111610c9557602460843501905b60248360051b60843501018210610c9d5750505060a4356001600160401b038111610c99576101cd90369060040161194c565b9560c4356001600160401b038111610c95576101ed90369060040161194c565b916001600160401b0360e43511610c955736602360e435011215610c955760e435600401359161021c83611935565b9261022a604051948561172c565b80845260208401903660248260051b60e435010111610c6657602460e43501915b60248260051b60e43501018310610c7357505050610104356001600160a01b0381169003610c6e576101243515156101243503610c6e57610164356001600160401b038111610c6a576102a290369060040161169b565b6001600160401b036101843511610c66576101206101843536036003190112610c665786518b518091149081610c5b575b5080610c50575b15610c0b576004358852876020526040882054610bd45761012435610b52575b50506004358652856020526040862097600435895587516001600160401b038111610a835761032c60018b01546117fa565b601f8111610b0d575b50806020601f8211600114610aa2578991610a97575b508160011b916000199060031b1c19161760018a01555b8051906001600160401b038211610a8357819061038260028c01546117fa565b601f8111610a32575b50602090601f83116001146109c35789926109b8575b50508160011b916000199060031b1c19161760028901555b8051906001600160401b0382116109a45781906103d960038b01546117fa565b601f8111610953575b50602090601f83116001146108e45788926108d9575b50508160011b916000199060031b1c19161760038801555b60078701805460ff19166001179055845b84518110156107ff576104348186611b73565b5186526004880160205260408620546107c6576104518186611b73565b5161045c828b611b73565b51906104688387611b73565b516001600160a01b0361047b8588611b73565b5116906040519261048b846116f6565b835260208301938452604083015260608201528760808201528760a08201526104b48388611b73565b51885260048a01602052604088209181518355518051906001600160401b0382116106e75781906104e860018601546117fa565b601f8111610775575b50602090601f8311600114610706578b926106fb575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b0382116106e75761054260028501546117fa565b601f81116106a2575b50602090601f83116001146106305791806005949260a0948d92610625575b50508160011b916000199060031b1c19161760028501555b60038401600180841b036060830151166bffffffffffffffffffffffff841b8254161790556080810151600485015501519101556105c08186611b73565b5190600589015491600160401b83101561060f576105ed83600161060a950160058d015560058c016117e2565b819291549060031b600019811b9283911b16911916179055611b64565b610421565b634e487b7160e01b600052604160045260246000fd5b01519050388061056a565b90600285018b5260208b20918b5b601f198516811061068a5750926005949260019260a09583601f19811610610671575b505050811b016002850155610582565b015160001960f88460031b161c19169055388080610661565b9192602060018192868501518155019401920161063e565b600285018b5260208b20601f840160051c8101602085106106e0575b601f830160051c820181106106d457505061054b565b600081556001016106be565b50806106be565b634e487b7160e01b8a52604160045260248afd5b015190503880610507565b9250600185018b5260208b20908b935b601f198416851061075a576001945083601f19811610610741575b505050811b01600183015561051f565b015160001960f88460031b161c19169055388080610731565b81810151835560209485019460019093019290910190610716565b909150600185018b5260208b20601f840160051c8101602085106107bf575b90849392915b601f830160051c820181106107b05750506104f1565b6000815585945060010161079a565b5080610794565b60405162461bcd60e51b815260206004820152601160248201527050726f6a6563742049442065786973747360781b6044820152606490fd5b85828887600154600160401b81101561060f5760018101806001558110156108c3576001600052600435907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601556020610864604051936040855260408501906118da565b91838303828501525191828152019290845b8181106108ad57505050807f2fceaf42a6664f3294222799a359650844542179732d12b26b6926bd338479a591600435930390a280f35b8251855260209485019490920191600101610876565b634e487b7160e01b600052603260045260246000fd5b0151905038806103f8565b925060038a018852602088209088935b601f1984168510610938576001945083601f1981161061091f575b505050811b016003880155610410565b015160001960f88460031b161c1916905538808061090f565b818101518355602094850194600190930192909101906108f4565b90915060038a01885260208820601f840160051c81016020851061099d575b90849392915b601f830160051c8201811061098e5750506103e2565b60008155859450600101610978565b5080610972565b634e487b7160e01b87526041600452602487fd5b0151905038806103a1565b925060028b018952602089209089935b601f1984168510610a17576001945083601f198116106109fe575b505050811b0160028901556103b9565b015160001960f88460031b161c191690553880806109ee565b818101518355602094850194600190930192909101906109d3565b90915060028b01895260208920601f840160051c810160208510610a7c575b90849392915b601f830160051c82018110610a6d57505061038b565b60008155859450600101610a57565b5080610a51565b634e487b7160e01b88526041600452602488fd5b90508901513861034b565b915060018b0189526020892089925b8b601f1984168510610af657506001935082601f19811610610add575b5050811b0160018a0155610362565b8b015160001960f88460031b161c191690553880610ace565b810151825560209384019360019092019101610ab1565b60018b01895260208920601f830160051c810160208410610b4b575b601f830160051c82018110610b3f575050610335565b60008155600101610b29565b5080610b29565b6002546001600160a01b031690813b15610bd057918891610b99936040518095819482936339624a6b60e21b84526101843560040191610104356101443560048701611a1e565b039134905af18015610bc557908791156102fa57610bb6906116c8565b610bc15785386102fa565b8580fd5b6040513d89823e3d90fd5b8880fd5b60405162461bcd60e51b815260206004820152600f60248201526e526f756e642049442065786973747360881b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4d69736d61746368656420696e707574206172726179730000000000000000006044820152606490fd5b5085518551146102da565b9050865114386102d3565b8780fd5b8680fd5b600080fd5b82356001600160a01b0381169003610bd057823581526020928301920161024b565b8480fd5b8380fd5b813581526020918201910161019a565b8280fd5b5080fd5b50346100cd57806003193601126100cd576020604051733879e146140b627a5c858a08e507b171d9e431398152f35b50346100cd57610cf33661179f565b507f0de2355f73246cb2852175af9385f91c8205be026c831a20ada4062931abdec08280a280f35b50346100cd5760203660031901126100cd57604090600435815280602052208054610d4860018301611834565b91610d5560028201611834565b610dad610d6460038401611834565b610d9f60ff600760068701549601541693610d91604051988998895260c060208a015260c08901906118da565b9087820360408901526118da565b9085820360608701526118da565b916080840152151560a08301520390f35b50346100cd57610dcd3661179f565b507f0e82eab4cbddb8a38b9fb81ba86a4a05ec8aa2c55dbea69d2e72857b4f90e9548280a280f35b50346100cd5760203660031901126100cd57600435600154811015610cb15760209060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154604051908152f35b50346100cd57610e563661179f565b507fdcad6660d3e34a68718474b3d2dfb7da8a012d967dfe595b0123a6112667f0688280a280f35b50346100cd57610e8d3661179f565b91610e9783611d5d565b80959250156112ca576000198581019586116112b657600380960493610ebc85611935565b94610eca604051968761172c565b808652610ed9601f1991611935565b01815b818110611292575050805b85518110156111bd578088029088820481036111a957600191808301908184116111955790610f3091610f3a60209283610f21828c611b73565b5101519060609586918c611b73565b510151908b612824565b9260029182018092116110225790610f6e91610f6484610f5a848d611b73565b510151928b611b73565b510151908a612824565b858695808889948a935b611036575b5050505080610fec575b50610fc4575b92610fbf9360405192610f9f846116db565b8352820152610fae8289611b73565b52610fb98188611b73565b50611b64565b610ee7565b83600003938085058714901517610f8d575b634e487b7160e01b600052601160045260246000fd5b604d819692961161102257600a0a818102919060008212600160ff1b821416610fd6578183051490151715610fd6579338610f87565b634e487b7160e01b87526011600452602487fd5b9091929881518a101561118f5789158061116e575b611165575b61105a8a83611d0b565b51603060f891821c10158061114e575b1561112257836110f9575b600a91828102928184051490151715610fd6576110928b84611d0b565b51901c90602f198083019280841387166110e557908d9183010192831291129080158216911516176110d157906110cb8493929a611b64565b93610f78565b634e487b7160e01b8b52601160045260248bfd5b634e487b7160e01b8e52601160045260248efd5b9290999391851560001461110d5750610f7d565b91939990929461111c90611d2d565b94611075565b99602e83929b61113483889796611d0b565b51901c14611146575b6110cb90611b64565b83925061113d565b50603961115b8c85611d0b565b51821c111561106a565b94508294611050565b50602d60f81b6001600160f81b03196111878c85611d0b565b51161461104b565b98610f7d565b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b83526011600452602483fd5b8588888481815260209281845260066040832001549282935b8184528386526005806040862001548610156112695761120286600460408820019260408820016117e2565b905490851b1c8552865260408420908480808061121f8c87611b94565b9588015486906001600160a01b0316828215611260575bf1156112555761124f9161124991611b87565b94611b64565b936111d6565b6040513d86823e3d90fd5b506108fc611236565b84837fdcad6660d3e34a68718474b3d2dfb7da8a012d967dfe595b0123a6112667f0688280a280f35b6020906040516112a1816116db565b60608152828581830152828a01015201610edc565b634e487b7160e01b84526011600452602484fd5b60405162461bcd60e51b8152602060048201526024808201527f4a534f4e2070617273696e67206661696c6564206f72206e6f206461746120666044820152631bdd5b9960e21b6064820152608490fd5b50600319608036820112610cb1576001600160a01b0360043581811692838203610c6e5784926001600160401b0391604435838111610bc15761136290369060040161169b565b929091606435948511610c6a57610120908536030112610bc1576002541690813b15610bc15785936113b1604051968795869485946339624a6b60e21b86526004019260243560048701611a1e565b039134905af180156113fe576113ea575b50807f9ca0de0709c575c61710159cf212e68fa7f9bd8d600cb008ae8c028b7e54b70591a280f35b6113f3906116c8565b610cb15781386113c2565b6040513d84823e3d90fd5b5060031960a036820112610cb157600435906001600160a01b0390602435908282168203610c6e576001600160401b0390606435828111610c6a5761145290369060040161169b565b91608435938411610c6657610120908436030112610c6a578587528660205260ff6007604089200154166115045786946002541690813b15610bc15785936114b7604051968795869485946339624a6b60e21b86526004019260443560048701611a1e565b039134905af180156113fe576114f0575b50807fe9f7d7fd0b133404f0ccff737d6f3594748e04bc5507adfaed35835ef989371191a280f35b6114f9906116c8565b610cb15781386114c8565b60405162461bcd60e51b8152602060048201526013602482015272149bdd5b99081a5cc81b9bdd0818db1bdcd959606a1b6044820152606490fd5b8260031960c036820112610cb157600435926024358015158103610c9957604435926001600160a01b038085168503610bc1576001600160401b0392608435848111610c665761159390369060040161169b565b95909360a435958611610bd057610120908636030112610c66578888528760205260ff600760408a200154161561166a5750878752866020526007604088200160ff198154169055611609575b85877fe9f7d7fd0b133404f0ccff737d6f3594748e04bc5507adfaed35835ef98937118280a280f35b6002541691823b15610bc1579085939291611641604051968795869485946339624a6b60e21b86526004019260643560048701611a1e565b039134905af180156113fe5761165b575b808080806115e0565b611664906116c8565b82611652565b62461bcd60e51b815260206004820152600c60248201526b149bdd5b990818db1bdcd95960a21b6044820152606490fd5b9181601f84011215610c6e578235916001600160401b038311610c6e5760208381860195010111610c6e57565b6001600160401b03811161060f57604052565b604081019081106001600160401b0382111761060f57604052565b60c081019081106001600160401b0382111761060f57604052565b606081019081106001600160401b0382111761060f57604052565b90601f801991011681019081106001600160401b0382111761060f57604052565b6001600160401b03811161060f57601f01601f191660200190565b9291926117748261174d565b91611782604051938461172c565b829481845281830111610c6e578281602093846000960137010152565b906040600319830112610c6e5760043591602435906001600160401b038211610c6e5780602383011215610c6e578160246117df93600401359101611768565b90565b80548210156108c35760005260206000200190600090565b90600182811c9216801561182a575b602083101461181457565b634e487b7160e01b600052602260045260246000fd5b91607f1691611809565b9060405191826000825492611848846117fa565b9081845260019485811690816000146118b75750600114611874575b50506118729250038361172c565b565b9093915060005260209081600020936000915b81831061189f57505061187293508201013880611864565b85548884018501529485019487945091830191611887565b91505061187294506020925060ff191682840152151560051b8201013880611864565b919082519283825260005b848110611906575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016118e5565b9080601f83011215610c6e578160206117df93359101611768565b6001600160401b03811161060f5760051b60200190565b9080601f83011215610c6e5781359061196482611935565b92611972604051948561172c565b828452602092838086019160051b83010192808411610c6e57848301915b8483106119a05750505050505090565b82356001600160401b038111610c6e5786916119c18484809489010161191a565b815201920191611990565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e1982360301811215610c6e5701602081359101916001600160401b038211610c6e578136038313610c6e57565b9081526001600160a01b039091166020820152608060408201819052909392611a4a92918501916119cc565b916060818403910152611ae6611acb611ab0611a95611a7a611a6c86806119ed565b610120808a528901916119cc565b611a8760208701876119ed565b9088830360208a01526119cc565b611aa260408601866119ed565b9087830360408901526119cc565b611abd60608501856119ed565b9086830360608801526119cc565b611ad860808401846119ed565b9085830360808701526119cc565b9160a08201356bffffffffffffffffffffffff60a01b8116809103610c6e5760a082015260c082013563ffffffff8116809103610c6e576117df93611b459160c0840152611b3760e08501856119ed565b9084830360e08601526119cc565b91611b5661010091828101906119ed565b9290918185039101526119cc565b6000198114610fd65760010190565b80518210156108c35760209160051b010190565b91908203918211610fd657565b9060005b8151811015611cb257611bab8183611b73565b5151805160208092012060018086019060405190816000845494611bce866117fa565b9081845288840196898682169182600014611c93575050600114611c56575b5050611bfb9250038261172c565b51902014611c125750611c0d90611b64565b611b98565b60049384015493929091611c2591611b73565b51015191828102928184041490151715611c4157506064900490565b601190634e487b7160e01b6000525260246000fd5b9150915060005285600020916000925b828410611c80575050508185611bfb928201013880611bed565b8054858501890152928701928101611c66565b9250935050611bfb945060ff19168652151560051b8201013880611bed565b505050600090565b60405190611cc782611711565b60006040838281528260208201520152565b60405190611ce6826116f6565b8160a06000918281528260208201528260408201528260608201528260808201520152565b9081518110156108c3570160200190565b60ff1660ff8114610fd65760010190565b8015610fd6576000190190565b516005811015611d475790565b634e487b7160e01b600052602160045260246000fd5b611d65611cba565b50611d6e611cba565b506040805192611d7d84611711565b600091828552602090818601908482528087016000199182825280516102a081018181106001600160401b038211176123f55782526014815285885b61028081106123df57505097845191611dd0611cd9565b505b8a5182518110156123d1576001600160f81b031990611df19084611d0b565b5116607b60f81b81148080156123c4575b6123185750607d60f81b811480801561230b575b61218d5750601160f91b811461218057600160fd1b8181148015612173575b8015612166575b8015612159575b61215257601d60f91b821461212957600b60fa1b8214611fee57600360fc1b82101580611fe0575b8015611fd3575b8015611fc6575b8015611fb9575b8015611fac575b611ec8578110159081611eb9575b50611eac575b611ea58b51611b64565b8b52611dd2565b5060019950505050505050565b603f60f91b1015905038611e95565b5050918351858103611f31575b50611ee1828b8d6126ba565b80611f265750611ef090611b64565b918351858103611f01575b50611e9b565b611f0d60a0918c611b73565b510160ff611f1d81835116611d1c565b16905238611efb565b9a5050505050505050565b611f3b908b611b73565b5180519060059081831015611f98576001809314918215611f69575b505015611ed5579a5050505050505050565b8151919250811015611f98576003149081611f87575b503880611f57565b60ff915060a0015116151538611f7f565b634e487b7160e01b8c52602160045260248cfd5b50603760f91b8214611e87565b50601d60fa1b8214611e80565b50603360f91b8214611e79565b50602d60f81b8214611e72565b50603960f81b821115611e6b565b50508351858114159081612107575b50806120d2575b15611e9b5795929798969390949182518281019081116110d1575b61203261202c828b611b73565b51611d3a565b600590818110156120be5760021490811561209e575b5061205c575b61205790611d2d565b61201f565b87612067828b611b73565b510151151580612088575b1561204e578994979193969295989a9952611e9b565b506080612095828b611b73565b51015115612072565b90506120ad61202c838c611b73565b90811015611f985760011438612048565b634e487b7160e01b8d52602160045260248dfd5b506120e161202c85518c611b73565b60058110156120f35760011415612004565b634e487b7160e01b8a52602160045260248afd5b612116915061202c908c611b73565b60058110156120f3576002141538611ffd565b5050855185810190811161213e578452611e9b565b634e487b7160e01b8a52601160045260248afd5b5050611e9b565b50600560fa1b8214611e43565b50600960f91b8214611e3c565b50601160f81b8214611e35565b5091611ee1828b8d61249e565b9050899691989594999a9792939a50600014612303576001995b81518581019081116122ef575b6121be818a611b73565b518a8101511515806122e3575b6121de57506121d990611d2d565b6121b4565b9b90919493989b9a95969992979a516005808210156120be57821015611f9857036122c1578585528b516001908181018091116122cf576080612232848f8594606061222a8484611b73565b510152611b73565b510152156122c157805b612280575b801561224d5750611e9b565b612257818c611b73565b518281015115159081612273575b5015611efb57845238611efb565b6080915001511538612265565b61228a818c611b73565b5182810151151590816122b4575b506122ac576122a690611d2d565b8061223c565b808552612241565b6080915001511538612298565b5060019a5050505050505050565b634e487b7160e01b8c52601160045260248cfd5b506080810151156121cb565b634e487b7160e01b88526011600452602488fd5b6002996121a7565b50605d60f81b8214611e16565b936123239150611b64565b9261232e8b8d612409565b9190156123b55785518c88820361238f575b5050156123885760015b60058110156123745781528b5188820152600190820152855185810190811161213e578452611e9b565b634e487b7160e01b8b52602160045260248bfd5b600261234a565b60a09161239b91611b73565b510160ff6123ab81835116611d1c565b169052388c612340565b5060039b505050505050505050565b50605b60f81b8214611e02565b505093519698505050505050565b6123e7611cd9565b828285010152018690611db9565b634e487b7160e01b89526041600452602489fd5b602090929192612417611cd9565b5001805183518091101561247f575061246c60405193612436856116f6565b600080865280602087015280604087015280606087015280608087015260a0860152825190856124668383611b73565b52611b73565b506124778151611b64565b905260019190565b919291600019810191508111610fd65761249891611b73565b51600091565b9291908351916124ac611cd9565b506124b78551611b64565b85525b845181518110156126af576124cf9082611d0b565b516001600160f81b031990601160f91b90828116821461265a5760f81c605c148061262f575b61250d5750505b6125068551611b64565b85526124ba565b8161252461251b8951611b64565b808a5285611d0b565b511614908115612613575b81156125f7575b81156125db575b81156125bf575b81156125a3575b8115612587575b811561256b575b506000036124fc575050909152600190565b8651601d60fa1b925061257e9084611d0b565b51161438612559565b9050603160f91b8161259a885185611d0b565b51161490612552565b9050603760f91b816125b6885185611d0b565b5116149061254b565b9050603960f91b816125d2885185611d0b565b51161490612544565b9050603360f91b816125ee885185611d0b565b5116149061253d565b9050601760fa1b8161260a885185611d0b565b51161490612536565b9050602f60f81b81612626885185611d0b565b5116149061252f565b50865160018101809111612645578351116124f5565b60246000634e487b7160e01b81526011600452fd5b5050505061266a90849394612409565b9190156126a6576001908181018091116126455760a0935190600384526020840152816040840152606083015260808201526000918291015290565b91905052600390565b505050909152600290565b92919060008451926126ca611cd9565b505b85518151811015612819576126e19082611d0b565b516001600160f81b03198116600160fd1b811490811561280b575b81156127fd575b81156127ef575b81156127e1575b81156127d3575b81156127c5575b5061275f5760f81c60208110908115612754575b50612749576127428651611b64565b86526126cc565b505050909152600190565b607f91501138612733565b5050506001939192935b156127be576127789082612409565b90156127b75760a090829360009351906004835260208301526001604083015260608201526001608082015201526127b08151611d2d565b9052600090565b5052600390565b5052600290565b605d60f81b1490503861271f565b607d60f81b81149150612718565b600b60fa1b81149150612711565b600d60f81b8114915061270a565b600560f91b81149150612703565b600960f81b811491506126fc565b505093919293612769565b92916128308282611b87565b9161283a8361174d565b92612848604051948561172c565b808452612857601f199161174d565b01366020850137805b82811061286f57509193505050565b6128a6906001600160f81b03196128868289611d0b565b51166128a06128958584611b87565b9160001a9187611d0b565b53611b64565b61286056fea2646970667358221220ce1aa4f9338925ecf5a4162593d3f5479a9e7335c3bdc05ae17cc37bb42c38ac64736f6c63430008110033",
  "devdoc": {
    "author": "arjanjohan",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A smart contract for cross-chain quadratic voting developed during EthDam 24. This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 48,
        "contract": "contracts/Funding.sol:Funding",
        "label": "fundingRounds",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(FundingRound)38_storage)"
      },
      {
        "astId": 51,
        "contract": "contracts/Funding.sol:Funding",
        "label": "roundIds",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 54,
        "contract": "contracts/Funding.sol:Funding",
        "label": "gatewayContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IGateway)2418"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IGateway)2418": {
        "encoding": "inplace",
        "label": "contract IGateway",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(FundingRound)38_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Funding.FundingRound)",
        "numberOfBytes": "32",
        "value": "t_struct(FundingRound)38_storage"
      },
      "t_mapping(t_uint256,t_struct(Project)17_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Funding.Project)",
        "numberOfBytes": "32",
        "value": "t_struct(Project)17_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FundingRound)38_storage": {
        "encoding": "inplace",
        "label": "struct Funding.FundingRound",
        "members": [
          {
            "astId": 19,
            "contract": "contracts/Funding.sol:Funding",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21,
            "contract": "contracts/Funding.sol:Funding",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 23,
            "contract": "contracts/Funding.sol:Funding",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 25,
            "contract": "contracts/Funding.sol:Funding",
            "label": "curveType",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 30,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projects",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Project)17_storage)"
          },
          {
            "astId": 33,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projectIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 35,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalContributions",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 37,
            "contract": "contracts/Funding.sol:Funding",
            "label": "isOpen",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Project)17_storage": {
        "encoding": "inplace",
        "label": "struct Funding.Project",
        "members": [
          {
            "astId": 6,
            "contract": "contracts/Funding.sol:Funding",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8,
            "contract": "contracts/Funding.sol:Funding",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 10,
            "contract": "contracts/Funding.sol:Funding",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 12,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projectAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          },
          {
            "astId": 14,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalContributions",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalSquareRoots",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}