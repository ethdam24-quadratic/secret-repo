{
  "address": "0xF3626FD6d6487593dF4F65B3339D7DA2a76A7573",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "ContributionReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "ContributionReceivedInSecret",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "DistributedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "DistributedTokensInSecret",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundClosedInSecret",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        }
      ],
      "name": "RoundCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundCreatedInSecret",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sendToSecret",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "closeFundingRound",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "closedFundingRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "contributed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "curveType",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "projectNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "projectDescriptions",
          "type": "string[]"
        },
        {
          "internalType": "address payable[]",
          "name": "projectAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "sendToSecret",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "createFundingRound",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "createdFundingRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "distributeFunding",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "distributedFunding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fundingRounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "curveType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalContributions",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isDistributed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayAddressSepolia",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayContract",
      "outputs": [
        {
          "internalType": "contract IGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xebbcc7f1340afa97733937c2dd01aeb6575287c2db90a70fd09449a722739d0a",
  "receipt": {
    "to": null,
    "from": "0xbb1DF1ab33786Ac6B91d9D16b445c7b66825979e",
    "contractAddress": "0xF3626FD6d6487593dF4F65B3339D7DA2a76A7573",
    "transactionIndex": 37,
    "gasUsed": "2278428",
    "logsBloom": "0x
    "blockHash": "0x07ce885e1b560cfacd21477c155c21483eadfaada451508a63f48a819389130c",
    "transactionHash": "0xebbcc7f1340afa97733937c2dd01aeb6575287c2db90a70fd09449a722739d0a",
    "logs": [],
    "blockNumber": 5692106,
    "cumulativeGasUsed": "9084778",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 21,
  "solcInputHash": "02f0300bdac51d457870f272e1c57ad7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"ContributionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"ContributionReceivedInSecret\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"DistributedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"DistributedTokensInSecret\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundClosedInSecret\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"}],\"name\":\"RoundCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundCreatedInSecret\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendToSecret\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"closeFundingRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"closedFundingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"contributed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"curveType\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"projectNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"projectDescriptions\",\"type\":\"string[]\"},{\"internalType\":\"address payable[]\",\"name\":\"projectAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sendToSecret\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"createFundingRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"createdFundingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"distributeFunding\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"distributedFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundingRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"curveType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalContributions\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDistributed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayAddressSepolia\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayContract\",\"outputs\":[{\"internalType\":\"contract IGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"arjanjohan\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A smart contract for cross-chain quadratic voting developed during EthDam 24. This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Funding.sol\":\"Funding\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Funding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"../interfaces/IGateway.sol\\\";\\nimport \\\"./JsmnSolLib.sol\\\";\\n\\n/**\\n * A smart contract for cross-chain quadratic voting developed during EthDam 24.\\n * This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.\\n * @author arjanjohan\\n */\\ncontract Funding {\\n\\t// ========================================\\n\\t//     ENUM, STRUCTS AND MAPPINGS\\n\\t// ========================================\\n\\n\\tstruct Project {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\taddress payable projectAddress;\\n\\t\\tuint256 totalContributions;\\n\\t\\tuint256 totalSquareRoots;\\n\\t}\\n\\n\\tstruct FundingRound {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\tstring curveType;\\n\\t\\tmapping(uint256 => Project) projects;\\n\\t\\tuint256[] projectIds;\\n\\t\\tuint256 totalContributions;\\n\\t\\tbool isOpen;\\n\\t\\tbool isDistributed;\\n\\t}\\n\\n\\tstruct ProjectFundingData {\\n\\t\\tstring projectId;\\n\\t\\tuint256 fundingPercentage;\\n\\t}\\n\\n\\tmapping(uint256 => FundingRound) public fundingRounds;\\n\\tuint256[] public roundIds;\\n\\n\\t// ========================================\\n\\t//     CONSTRUCTOR AND VALUES\\n\\t// ========================================\\n\\n\\tIGateway public gatewayContract;\\n\\taddress public constant gatewayAddressSepolia =\\n\\t\\taddress(0x3879E146140b627a5C858a08e507B171D9E43139);\\n\\n\\tconstructor() {\\n\\t\\tgatewayContract = IGateway(gatewayAddressSepolia);\\n\\t}\\n\\n\\t// ========================================\\n\\t//     EVENTS\\n\\t// ========================================\\n\\tevent RoundCreated(\\n\\t\\tuint256 indexed roundId,\\n\\t\\tstring name,\\n\\t\\tuint256[] projectIds\\n\\t);\\n\\n\\tevent RoundCreatedInSecret(uint256 indexed roundId);\\n\\n\\tevent ContributionReceived(address indexed contributor);\\n\\n\\tevent ContributionReceivedInSecret(uint256 indexed roundId);\\n\\n\\tevent RoundClosed(uint256 indexed roundId);\\n\\n\\tevent RoundClosedInSecret(uint256 indexed roundId);\\n\\n\\tevent DistributedTokens(uint256 indexed roundId);\\n\\n\\tevent DistributedTokensInSecret(uint256 indexed roundId);\\n\\n\\t// ========================================\\n\\t//     CORE FUNCTIONS\\n\\t// ========================================\\n\\n\\tfunction createFundingRound(\\n\\t\\tuint256 id,\\n\\t\\tstring memory name,\\n\\t\\tstring memory description,\\n\\t\\tstring memory curveType,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses,\\n\\t\\taddress userAddress,\\n\\t\\tbool sendToSecret,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\tvalidateProjectParameters(\\n\\t\\t\\tprojectIds,\\n\\t\\t\\tprojectNames,\\n\\t\\t\\tprojectDescriptions,\\n\\t\\t\\tprojectAddresses\\n\\t\\t);\\n\\t\\t// require(fundingRounds[id].id == 0, \\\"Round ID exists\\\");\\n\\n\\t\\tif (sendToSecret) {\\n\\t\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\t\\tpayloadHash,\\n\\t\\t\\t\\tuserAddress,\\n\\t\\t\\t\\troutingInfo,\\n\\t\\t\\t\\tinfo\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tFundingRound storage round = fundingRounds[id];\\n\\t\\tsetupFundingRound(\\n\\t\\t\\tround,\\n\\t\\t\\tid,\\n\\t\\t\\tname,\\n\\t\\t\\tdescription,\\n\\t\\t\\tcurveType,\\n\\t\\t\\tprojectIds,\\n\\t\\t\\tprojectNames,\\n\\t\\t\\tprojectDescriptions,\\n\\t\\t\\tprojectAddresses\\n\\t\\t);\\n\\t\\troundIds.push(id);\\n\\t\\temit RoundCreated(id, name, projectIds);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction createdFundingRound(uint256 roundId, bytes memory json) public {\\n\\t\\temit RoundCreatedInSecret(roundId);\\n\\t}\\n\\n\\tfunction contribute(\\n\\t\\taddress userAddress,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\tgatewayContract.send{ value: msg.value }( // todo change this value\\n\\t\\t\\tpayloadHash,\\n\\t\\t\\tuserAddress,\\n\\t\\t\\troutingInfo,\\n\\t\\t\\tinfo\\n\\t\\t);\\n\\t\\temit ContributionReceived(userAddress);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction contributed(uint256 roundId, bytes memory json) public {\\n\\t\\temit ContributionReceivedInSecret(roundId);\\n\\t}\\n\\n\\tfunction closeFundingRound(\\n\\t\\tuint256 roundId,\\n\\t\\tbool sendToSecret,\\n\\t\\taddress userAddress,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\trequire(fundingRounds[roundId].isOpen, \\\"Round closed\\\");\\n\\t\\tfundingRounds[roundId].isOpen = false;\\n\\n\\t\\tif (sendToSecret) {\\n\\t\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\t\\tpayloadHash,\\n\\t\\t\\t\\tuserAddress,\\n\\t\\t\\t\\troutingInfo,\\n\\t\\t\\t\\tinfo\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\temit RoundClosed(roundId);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction closedFundingRound(uint256 roundId, bytes memory json) public {\\n\\t\\temit RoundClosedInSecret(roundId);\\n\\t}\\n\\n\\tfunction distributeFunding(\\n\\t\\tuint256 roundId,\\n\\t\\taddress userAddress,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\trequire(!fundingRounds[roundId].isOpen, \\\"Round is not closed\\\");\\n\\t\\trequire(!fundingRounds[roundId].isDistributed, \\\"Already distributed\\\");\\n\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\tpayloadHash,\\n\\t\\t\\tuserAddress,\\n\\t\\t\\troutingInfo,\\n\\t\\t\\tinfo\\n\\t\\t);\\n\\t\\tfundingRounds[roundId].isDistributed = true;\\n\\t\\temit DistributedTokens(roundId);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction distributedFunding(uint256 roundId, bytes memory json) public {\\n\\t\\tProjectFundingData[] memory fundingData = parseFundingData(\\n\\t\\t\\tstring(json)\\n\\t\\t);\\n\\t\\tprocessFundingRound(fundingData, roundId);\\n\\t\\temit DistributedTokensInSecret(roundId);\\n\\t}\\n\\n\\t// ========================================\\n\\t//     HELPER FUNCTIONS\\n\\t// ========================================\\n\\n\\tfunction validateProjectParameters(\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses\\n\\t) private pure {\\n\\t\\t// require(\\n\\t\\t// \\tprojectIds.length == projectNames.length &&\\n\\t\\t// \\t\\tprojectNames.length == projectDescriptions.length &&\\n\\t\\t// \\t\\tprojectDescriptions.length == projectAddresses.length,\\n\\t\\t// \\t\\\"Mismatched input arrays\\\"\\n\\t\\t// );\\n\\t}\\n\\n\\tfunction setupFundingRound(\\n\\t\\tFundingRound storage round,\\n\\t\\tuint256 id,\\n\\t\\tstring memory name,\\n\\t\\tstring memory description,\\n\\t\\tstring memory curveType,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses\\n\\t) private {\\n\\t\\tround.id = id;\\n\\t\\tround.name = name;\\n\\t\\tround.description = description;\\n\\t\\tround.curveType = curveType;\\n\\t\\tround.isOpen = true;\\n\\n\\t\\tfor (uint256 i = 0; i < projectIds.length; i++) {\\n\\t\\t\\t// require(round.projects[projectIds[i]].id == 0, \\\"Project ID exists\\\");\\n\\t\\t\\tround.projects[projectIds[i]] = Project({\\n\\t\\t\\t\\tid: projectIds[i],\\n\\t\\t\\t\\tname: projectNames[i],\\n\\t\\t\\t\\tdescription: projectDescriptions[i],\\n\\t\\t\\t\\tprojectAddress: projectAddresses[i],\\n\\t\\t\\t\\ttotalContributions: 0,\\n\\t\\t\\t\\ttotalSquareRoots: 0\\n\\t\\t\\t});\\n\\t\\t\\tround.projectIds.push(projectIds[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction validRound(uint256 roundId) private view returns (bool) {\\n\\t\\treturn fundingRounds[roundId].isOpen && fundingRounds[roundId].id != 0;\\n\\t}\\n\\n\\t// Parses the JSON and extracts funding data\\n\\tfunction parseFundingData(\\n\\t\\tstring memory json\\n\\t) internal pure returns (ProjectFundingData[] memory) {\\n\\t\\tuint256 numTokens;\\n\\t\\tJsmnSolLib.Token[] memory tokens;\\n\\t\\t(, tokens, numTokens) = JsmnSolLib.parse(json, 20);\\n\\t\\t// require(numTokens > 0, \\\"JSON parsing failed or no data found\\\");\\n\\n\\t\\tProjectFundingData[] memory results = new ProjectFundingData[](\\n\\t\\t\\t(numTokens - 1) / 3\\n\\t\\t);\\n\\t\\tfor (uint256 i = 0; i < results.length; i++) {\\n\\t\\t\\tstring memory projectId = JsmnSolLib.getBytes(\\n\\t\\t\\t\\tjson,\\n\\t\\t\\t\\ttokens[1 + 3 * i].start,\\n\\t\\t\\t\\ttokens[1 + 3 * i].end\\n\\t\\t\\t);\\n\\t\\t\\tstring memory percentageStr = JsmnSolLib.getBytes(\\n\\t\\t\\t\\tjson,\\n\\t\\t\\t\\ttokens[2 + 3 * i].start,\\n\\t\\t\\t\\ttokens[2 + 3 * i].end\\n\\t\\t\\t);\\n\\t\\t\\tuint256 fundingPercentage = uint256(\\n\\t\\t\\t\\tJsmnSolLib.parseInt(percentageStr)\\n\\t\\t\\t);\\n\\t\\t\\tresults[i] = ProjectFundingData(projectId, fundingPercentage);\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\n\\t// Processes each project's funding based on parsed data\\n\\tfunction processFundingRound(\\n\\t\\tProjectFundingData[] memory fundingData,\\n\\t\\tuint256 roundId\\n\\t) internal {\\n\\t\\tuint256 totalFunds = fundingRounds[roundId].totalContributions;\\n\\t\\tfor (uint256 i = 0; i < fundingRounds[roundId].projectIds.length; i++) {\\n\\t\\t\\tProject storage project = fundingRounds[roundId].projects[\\n\\t\\t\\t\\tfundingRounds[roundId].projectIds[i]\\n\\t\\t\\t];\\n\\t\\t\\tuint256 payout = calculatePayout(project, fundingData);\\n\\t\\t\\tproject.projectAddress.transfer(payout);\\n\\t\\t\\ttotalFunds -= payout;\\n\\t\\t}\\n\\t}\\n\\n\\t// Calculates the payout for a given project\\n\\tfunction calculatePayout(\\n\\t\\tProject storage project,\\n\\t\\tProjectFundingData[] memory fundingData\\n\\t) internal view returns (uint256) {\\n\\t\\tfor (uint256 i = 0; i < fundingData.length; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(fundingData[i].projectId)) ==\\n\\t\\t\\t\\tkeccak256(bytes(project.name))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn\\n\\t\\t\\t\\t\\t(project.totalContributions *\\n\\t\\t\\t\\t\\t\\tfundingData[i].fundingPercentage) / 100;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0x01963756c3838c6ef0ad19ec96ffc9519d303ef3fc7b854e9395dc25a17bb706\",\"license\":\"MIT\"},\"contracts/JsmnSolLib.sol\":{\"content\":\"/*\\nCopyright (c) 2017 Christoph Niemann\\nPermission is hereby granted, free of charge, to any person obtaining a copy of\\nthis software and associated documentation files (the \\\"Software\\\"), to deal in\\nthe Software without restriction, including without limitation the rights to\\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\nof the Software, and to permit persons to whom the Software is furnished to do\\nso, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary JsmnSolLib {\\n\\tenum JsmnType {\\n\\t\\tUNDEFINED,\\n\\t\\tOBJECT,\\n\\t\\tARRAY,\\n\\t\\tSTRING,\\n\\t\\tPRIMITIVE\\n\\t}\\n\\n\\tuint constant RETURN_SUCCESS = 0;\\n\\tuint constant RETURN_ERROR_INVALID_JSON = 1;\\n\\tuint constant RETURN_ERROR_PART = 2;\\n\\tuint constant RETURN_ERROR_NO_MEM = 3;\\n\\n\\tstruct Token {\\n\\t\\tJsmnType jsmnType;\\n\\t\\tuint start;\\n\\t\\tbool startSet;\\n\\t\\tuint end;\\n\\t\\tbool endSet;\\n\\t\\tuint8 size;\\n\\t}\\n\\n\\tstruct Parser {\\n\\t\\tuint pos;\\n\\t\\tuint toknext;\\n\\t\\tint toksuper;\\n\\t}\\n\\n\\tfunction init(\\n\\t\\tuint length\\n\\t) internal pure returns (Parser memory, Token[] memory) {\\n\\t\\tParser memory p = Parser(0, 0, -1);\\n\\t\\tToken[] memory t = new Token[](length);\\n\\t\\treturn (p, t);\\n\\t}\\n\\n\\tfunction allocateToken(\\n\\t\\tParser memory parser,\\n\\t\\tToken[] memory tokens\\n\\t) internal pure returns (bool, Token memory) {\\n\\t\\tif (parser.toknext >= tokens.length) {\\n\\t\\t\\t// no more space in tokens\\n\\t\\t\\treturn (false, tokens[tokens.length - 1]);\\n\\t\\t}\\n\\t\\tToken memory token = Token(JsmnType.UNDEFINED, 0, false, 0, false, 0);\\n\\t\\ttokens[parser.toknext] = token;\\n\\t\\tparser.toknext++;\\n\\t\\treturn (true, token);\\n\\t}\\n\\n\\tfunction fillToken(\\n\\t\\tToken memory token,\\n\\t\\tJsmnType jsmnType,\\n\\t\\tuint start,\\n\\t\\tuint end\\n\\t) internal pure {\\n\\t\\ttoken.jsmnType = jsmnType;\\n\\t\\ttoken.start = start;\\n\\t\\ttoken.startSet = true;\\n\\t\\ttoken.end = end;\\n\\t\\ttoken.endSet = true;\\n\\t\\ttoken.size = 0;\\n\\t}\\n\\n\\tfunction parseString(\\n\\t\\tParser memory parser,\\n\\t\\tToken[] memory tokens,\\n\\t\\tbytes memory s\\n\\t) internal pure returns (uint) {\\n\\t\\tuint start = parser.pos;\\n\\t\\tbool success;\\n\\t\\tToken memory token;\\n\\t\\tparser.pos++;\\n\\n\\t\\tfor (; parser.pos < s.length; parser.pos++) {\\n\\t\\t\\tbytes1 c = s[parser.pos];\\n\\n\\t\\t\\t// Quote -> end of string\\n\\t\\t\\tif (c == '\\\"') {\\n\\t\\t\\t\\t(success, token) = allocateToken(parser, tokens);\\n\\t\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t\\tparser.pos = start;\\n\\t\\t\\t\\t\\treturn RETURN_ERROR_NO_MEM;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfillToken(token, JsmnType.STRING, start + 1, parser.pos);\\n\\t\\t\\t\\treturn RETURN_SUCCESS;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (uint8(c) == 92 && parser.pos + 1 < s.length) {\\n\\t\\t\\t\\t// handle escaped characters: skip over it\\n\\t\\t\\t\\tparser.pos++;\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\ts[parser.pos] == '\\\"' ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"/\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"\\\\\\\\\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"f\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"r\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"n\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"b\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"t\\\"\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// all other values are INVALID\\n\\t\\t\\t\\t\\tparser.pos = start;\\n\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tparser.pos = start;\\n\\t\\treturn RETURN_ERROR_PART;\\n\\t}\\n\\n\\tfunction parsePrimitive(\\n\\t\\tParser memory parser,\\n\\t\\tToken[] memory tokens,\\n\\t\\tbytes memory s\\n\\t) internal pure returns (uint) {\\n\\t\\tbool found = false;\\n\\t\\tuint start = parser.pos;\\n\\t\\tbytes1 c;\\n\\t\\tbool success;\\n\\t\\tToken memory token;\\n\\t\\tfor (; parser.pos < s.length; parser.pos++) {\\n\\t\\t\\tc = s[parser.pos];\\n\\t\\t\\tif (\\n\\t\\t\\t\\tc == \\\" \\\" ||\\n\\t\\t\\t\\tc == \\\"\\\\t\\\" ||\\n\\t\\t\\t\\tc == \\\"\\\\n\\\" ||\\n\\t\\t\\t\\tc == \\\"\\\\r\\\" ||\\n\\t\\t\\t\\tc == \\\",\\\" ||\\n\\t\\t\\t\\tc == 0x7d ||\\n\\t\\t\\t\\tc == 0x5d\\n\\t\\t\\t) {\\n\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tif (uint8(c) < 32 || uint8(c) > 127) {\\n\\t\\t\\t\\tparser.pos = start;\\n\\t\\t\\t\\treturn RETURN_ERROR_INVALID_JSON;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (!found) {\\n\\t\\t\\tparser.pos = start;\\n\\t\\t\\treturn RETURN_ERROR_PART;\\n\\t\\t}\\n\\n\\t\\t// found the end\\n\\t\\t(success, token) = allocateToken(parser, tokens);\\n\\t\\tif (!success) {\\n\\t\\t\\tparser.pos = start;\\n\\t\\t\\treturn RETURN_ERROR_NO_MEM;\\n\\t\\t}\\n\\t\\tfillToken(token, JsmnType.PRIMITIVE, start, parser.pos);\\n\\t\\tparser.pos--;\\n\\t\\treturn RETURN_SUCCESS;\\n\\t}\\n\\n\\tfunction parse(\\n\\t\\tstring memory json,\\n\\t\\tuint numberElements\\n\\t) internal pure returns (uint, Token[] memory tokens, uint) {\\n\\t\\tbytes memory s = bytes(json);\\n\\t\\tbool success;\\n\\t\\tParser memory parser;\\n\\t\\t(parser, tokens) = init(numberElements);\\n\\n\\t\\t// Token memory token;\\n\\t\\tuint r;\\n\\t\\tuint count = parser.toknext;\\n\\t\\tuint i;\\n\\t\\tToken memory token;\\n\\n\\t\\tfor (; parser.pos < s.length; parser.pos++) {\\n\\t\\t\\tbytes1 c = s[parser.pos];\\n\\n\\t\\t\\t// 0x7b, 0x5b opening curly parentheses or brackets\\n\\t\\t\\tif (c == 0x7b || c == 0x5b) {\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\t(success, token) = allocateToken(parser, tokens);\\n\\t\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t\\treturn (RETURN_ERROR_NO_MEM, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (parser.toksuper != -1) {\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].size++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\ttoken.jsmnType = (c == 0x7b ? JsmnType.OBJECT : JsmnType.ARRAY);\\n\\t\\t\\t\\ttoken.start = parser.pos;\\n\\t\\t\\t\\ttoken.startSet = true;\\n\\t\\t\\t\\tparser.toksuper = int(parser.toknext - 1);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// closing curly parentheses or brackets\\n\\t\\t\\tif (c == 0x7d || c == 0x5d) {\\n\\t\\t\\t\\tJsmnType tokenType = (\\n\\t\\t\\t\\t\\tc == 0x7d ? JsmnType.OBJECT : JsmnType.ARRAY\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tbool isUpdated = false;\\n\\t\\t\\t\\tfor (i = parser.toknext - 1; i >= 0; i--) {\\n\\t\\t\\t\\t\\ttoken = tokens[i];\\n\\t\\t\\t\\t\\tif (token.startSet && !token.endSet) {\\n\\t\\t\\t\\t\\t\\tif (token.jsmnType != tokenType) {\\n\\t\\t\\t\\t\\t\\t\\t// found a token that hasn't been closed but from a different type\\n\\t\\t\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tparser.toksuper = -1;\\n\\t\\t\\t\\t\\t\\ttokens[i].end = parser.pos + 1;\\n\\t\\t\\t\\t\\t\\ttokens[i].endSet = true;\\n\\t\\t\\t\\t\\t\\tisUpdated = true;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (!isUpdated) {\\n\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfor (; i > 0; i--) {\\n\\t\\t\\t\\t\\ttoken = tokens[i];\\n\\t\\t\\t\\t\\tif (token.startSet && !token.endSet) {\\n\\t\\t\\t\\t\\t\\tparser.toksuper = int(i);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (i == 0) {\\n\\t\\t\\t\\t\\ttoken = tokens[i];\\n\\t\\t\\t\\t\\tif (token.startSet && !token.endSet) {\\n\\t\\t\\t\\t\\t\\tparser.toksuper = int(i);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 0x42\\n\\t\\t\\tif (c == '\\\"') {\\n\\t\\t\\t\\tr = parseString(parser, tokens, s);\\n\\n\\t\\t\\t\\tif (r != RETURN_SUCCESS) {\\n\\t\\t\\t\\t\\treturn (r, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t//JsmnError.INVALID;\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\tif (parser.toksuper != -1) tokens[uint(parser.toksuper)].size++;\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ' ', \\\\r, \\\\t, \\\\n\\n\\t\\t\\tif (c == \\\" \\\" || c == 0x11 || c == 0x12 || c == 0x14) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 0x3a\\n\\t\\t\\tif (c == \\\":\\\") {\\n\\t\\t\\t\\tparser.toksuper = int(parser.toknext - 1);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (c == \\\",\\\") {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\tparser.toksuper != -1 &&\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].jsmnType != JsmnType.ARRAY &&\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].jsmnType != JsmnType.OBJECT\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tfor (i = parser.toknext - 1; i >= 0; i--) {\\n\\t\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\t\\ttokens[i].jsmnType == JsmnType.ARRAY ||\\n\\t\\t\\t\\t\\t\\t\\ttokens[i].jsmnType == JsmnType.OBJECT\\n\\t\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\t\\tif (tokens[i].startSet && !tokens[i].endSet) {\\n\\t\\t\\t\\t\\t\\t\\t\\tparser.toksuper = int(i);\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Primitive\\n\\t\\t\\tif (\\n\\t\\t\\t\\t(c >= \\\"0\\\" && c <= \\\"9\\\") ||\\n\\t\\t\\t\\tc == \\\"-\\\" ||\\n\\t\\t\\t\\tc == \\\"f\\\" ||\\n\\t\\t\\t\\tc == \\\"t\\\" ||\\n\\t\\t\\t\\tc == \\\"n\\\"\\n\\t\\t\\t) {\\n\\t\\t\\t\\tif (parser.toksuper != -1) {\\n\\t\\t\\t\\t\\ttoken = tokens[uint(parser.toksuper)];\\n\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\ttoken.jsmnType == JsmnType.OBJECT ||\\n\\t\\t\\t\\t\\t\\t(token.jsmnType == JsmnType.STRING && token.size != 0)\\n\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tr = parsePrimitive(parser, tokens, s);\\n\\t\\t\\t\\tif (r != RETURN_SUCCESS) {\\n\\t\\t\\t\\t\\treturn (r, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\tif (parser.toksuper != -1) {\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].size++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// printable char\\n\\t\\t\\tif (c >= 0x20 && c <= 0x7e) {\\n\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn (RETURN_SUCCESS, tokens, parser.toknext);\\n\\t}\\n\\n\\tfunction getBytes(\\n\\t\\tstring memory json,\\n\\t\\tuint start,\\n\\t\\tuint end\\n\\t) internal pure returns (string memory) {\\n\\t\\tbytes memory s = bytes(json);\\n\\t\\tbytes memory result = new bytes(end - start);\\n\\t\\tfor (uint i = start; i < end; i++) {\\n\\t\\t\\tresult[i - start] = s[i];\\n\\t\\t}\\n\\t\\treturn string(result);\\n\\t}\\n\\n\\t// parseInt\\n\\tfunction parseInt(string memory _a) internal pure returns (int) {\\n\\t\\treturn parseInt(_a, 0);\\n\\t}\\n\\n\\t// parseInt(parseFloat*10^_b)\\n\\tfunction parseInt(string memory _a, uint _b) internal pure returns (int) {\\n\\t\\tbytes memory bresult = bytes(_a);\\n\\t\\tint mint = 0;\\n\\t\\tbool decimals = false;\\n\\t\\tbool negative = false;\\n\\t\\tfor (uint i = 0; i < bresult.length; i++) {\\n\\t\\t\\tif ((i == 0) && (bresult[i] == \\\"-\\\")) {\\n\\t\\t\\t\\tnegative = true;\\n\\t\\t\\t}\\n\\t\\t\\tif ((uint8(bresult[i]) >= 48) && (uint8(bresult[i]) <= 57)) {\\n\\t\\t\\t\\tif (decimals) {\\n\\t\\t\\t\\t\\tif (_b == 0) break;\\n\\t\\t\\t\\t\\telse _b--;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tmint *= 10;\\n\\t\\t\\t\\tmint += int(uint256(uint8(bresult[i]))) - 48;\\n\\t\\t\\t} else if (uint8(bresult[i]) == 46) decimals = true;\\n\\t\\t}\\n\\t\\tif (_b > 0) mint *= int(10 ** _b);\\n\\t\\tif (negative) mint *= -1;\\n\\t\\treturn mint;\\n\\t}\\n\\n\\tfunction uint2str(uint i) internal pure returns (string memory) {\\n\\t\\tif (i == 0) return \\\"0\\\";\\n\\t\\tuint j = i;\\n\\t\\tuint len;\\n\\t\\twhile (j != 0) {\\n\\t\\t\\tlen++;\\n\\t\\t\\tj /= 10;\\n\\t\\t}\\n\\t\\tbytes memory bstr = new bytes(len);\\n\\t\\tuint k = len - 1;\\n\\t\\twhile (i != 0) {\\n\\t\\t\\tbstr[k--] = bytes1(uint8(48 + (i % 10)));\\n\\t\\t\\ti /= 10;\\n\\t\\t}\\n\\t\\treturn string(bstr);\\n\\t}\\n\\n\\tfunction parseBool(string memory _a) internal pure returns (bool) {\\n\\t\\tif (strCompare(_a, \\\"true\\\") == 0) {\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction strCompare(\\n\\t\\tstring memory _a,\\n\\t\\tstring memory _b\\n\\t) internal pure returns (int) {\\n\\t\\tbytes memory a = bytes(_a);\\n\\t\\tbytes memory b = bytes(_b);\\n\\t\\tuint minLength = a.length;\\n\\t\\tif (b.length < minLength) minLength = b.length;\\n\\t\\tfor (uint i = 0; i < minLength; i++)\\n\\t\\t\\tif (a[i] < b[i]) return -1;\\n\\t\\t\\telse if (a[i] > b[i]) return 1;\\n\\t\\tif (a.length < b.length) return -1;\\n\\t\\telse if (a.length > b.length) return 1;\\n\\t\\telse return 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0xea51e519ec3c809b9b7b1b4cf46616641a5c65bf99f7b89c98f6c3501f1e0330\"},\"interfaces/IGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IGateway {\\n\\tstruct ExecutionInfo {\\n\\t\\tbytes user_key;\\n\\t\\tbytes user_pubkey;\\n\\t\\tstring routing_code_hash;\\n\\t\\tstring task_destination_network;\\n\\t\\tstring handle;\\n\\t\\tbytes12 nonce;\\n\\t\\tuint32 callback_gas_limit;\\n\\t\\tbytes payload;\\n\\t\\tbytes payload_signature;\\n\\t}\\n\\n\\tfunction send(\\n\\t\\tbytes32 _payloadHash,\\n\\t\\taddress _userAddress,\\n\\t\\tstring calldata _routingInfo,\\n\\t\\tExecutionInfo calldata _info\\n\\t) external payable;\\n}\\n\",\"keccak256\":\"0x0a9d680f18372c00a8e706f4656647edc7a3973a1d1974bf2a59fe319a3150ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461003c57600280546001600160a01b031916733879e146140b627a5c858a08e507b171d9e431391790556127cc90816100428239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c9081634a98b9021461142a5750806355aa2f8c14611285578063763a3df6146111935780637faf8dcf14610d4d5780638b3b57a414610d1657806390a4cb9b14610cc4578063b239a41214610c8d578063c428a27814610bdd578063c5ad404314610ba6578063c9640c0914610b77578063e09a1094146100d05763eb0cde1d146100a557600080fd5b346100cd57806003193601126100cd576002546040516001600160a01b039091168152602090f35b80fd5b506101a03660031901126100cd576024356001600160401b038111610b6f576100fd903690600401611805565b6044356001600160401b038111610b735761011c903690600401611805565b906064356001600160401b038111610b5b5761013c903690600401611805565b926084356001600160401b038111610b6f5736602382011215610b6f57806004013561016781611820565b916101756040519384611617565b818352602083016024819360051b83010191368311610b1957602401905b828210610b5f5750505060a4356001600160401b038111610b5b576101bc903690600401611837565b9560c4356001600160401b038111610b57576101dc903690600401611837565b9160e435916001600160401b038311610b195736602384011215610b1957826004013561020881611820565b936102166040519586611617565b8185526024602086019260051b82010190368211610b2857602401915b818310610b3557505050610104356001600160a01b0381169003610b3057610124358015158103610b3057610164356001600160401b038111610b2c5761027e903690600401611586565b90916001600160401b036101843511610b28576101206101843536036003190112610b2857610aaa575b50506004358652856020526040862097600435895587516001600160401b0381116109db576102da60018b01546116e5565b601f8111610a65575b50806020601f82116001146109fa5789916109ef575b508160011b916000199060031b1c19161760018a01555b8051906001600160401b0382116109db57819061033060028c01546116e5565b601f811161098a575b50602090601f831160011461091b578992610910575b50508160011b916000199060031b1c19161760028901555b8051906001600160401b0382116108fc57819061038760038b01546116e5565b601f81116108ab575b50602090601f831160011461083c578892610831575b50508160011b916000199060031b1c19161760038801555b60078701805460ff19166001179055845b8451811015610757576103e28186611a5e565b516103ed828b611a5e565b51906103f98387611a5e565b516001600160a01b0361040c8588611a5e565b5116906040519261041c846115e1565b835260208301938452604083015260608201528760808201528760a08201526104458388611a5e565b51885260048a01602052604088209181518355518051906001600160401b03821161067857819061047960018601546116e5565b601f8111610706575b50602090601f8311600114610697578b9261068c575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211610678576104d360028501546116e5565b601f8111610633575b50602090601f83116001146105c15791806005949260a0948d926105b6575b50508160011b916000199060031b1c19161760028501555b60038401600180841b036060830151166bffffffffffffffffffffffff841b8254161790556080810151600485015501519101556105518186611a5e565b5190600589015491600160401b8310156105a05761057e83600161059b950160058d015560058c016116cd565b819291549060031b600019811b9283911b16911916179055611a4f565b6103cf565b634e487b7160e01b600052604160045260246000fd5b0151905038806104fb565b90600285018b5260208b20918b5b601f198516811061061b5750926005949260019260a09583601f19811610610602575b505050811b016002850155610513565b015160001960f88460031b161c191690553880806105f2565b919260206001819286850151815501940192016105cf565b600285018b5260208b20601f840160051c810160208510610671575b601f830160051c820181106106655750506104dc565b6000815560010161064f565b508061064f565b634e487b7160e01b8a52604160045260248afd5b015190503880610498565b9250600185018b5260208b20908b935b601f19841685106106eb576001945083601f198116106106d2575b505050811b0160018301556104b0565b015160001960f88460031b161c191690553880806106c2565b818101518355602094850194600190930192909101906106a7565b909150600185018b5260208b20601f840160051c810160208510610750575b90849392915b601f830160051c82018110610741575050610482565b6000815585945060010161072b565b5080610725565b85828887600154600160401b8110156105a057600181018060015581101561081b576001600052600435907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015560206107bc604051936040855260408501906117c5565b91838303828501525191828152019290845b81811061080557505050807f2fceaf42a6664f3294222799a359650844542179732d12b26b6926bd338479a591600435930390a280f35b82518552602094850194909201916001016107ce565b634e487b7160e01b600052603260045260246000fd5b0151905038806103a6565b925060038a018852602088209088935b601f1984168510610890576001945083601f19811610610877575b505050811b0160038801556103be565b015160001960f88460031b161c19169055388080610867565b8181015183556020948501946001909301929091019061084c565b90915060038a01885260208820601f840160051c8101602085106108f5575b90849392915b601f830160051c820181106108e6575050610390565b600081558594506001016108d0565b50806108ca565b634e487b7160e01b87526041600452602487fd5b01519050388061034f565b925060028b018952602089209089935b601f198416851061096f576001945083601f19811610610956575b505050811b016002890155610367565b015160001960f88460031b161c19169055388080610946565b8181015183556020948501946001909301929091019061092b565b90915060028b01895260208920601f840160051c8101602085106109d4575b90849392915b601f830160051c820181106109c5575050610339565b600081558594506001016109af565b50806109a9565b634e487b7160e01b88526041600452602488fd5b9050890151386102f9565b915060018b0189526020892089925b8b601f1984168510610a4e57506001935082601f19811610610a35575b5050811b0160018a0155610310565b8b015160001960f88460031b161c191690553880610a26565b810151825560209384019360019092019101610a09565b60018b01895260208920601f830160051c810160208410610aa3575b601f830160051c82018110610a975750506102e3565b60008155600101610a81565b5080610a81565b6002546001600160a01b031690813b15610b2857918891610af1936040518095819482936339624a6b60e21b84526101843560040191610104356101443560048701611909565b039134905af18015610b1d57908791156102a857610b0e906115b3565b610b195785386102a8565b8580fd5b6040513d89823e3d90fd5b8880fd5b8780fd5b600080fd5b82356001600160a01b0381169003610b28578235815260209283019201610233565b8480fd5b8380fd5b8135815260209182019101610193565b5080fd5b8280fd5b50346100cd57806003193601126100cd576020604051733879e146140b627a5c858a08e507b171d9e431398152f35b50346100cd57610bb53661168a565b507f0de2355f73246cb2852175af9385f91c8205be026c831a20ada4062931abdec08280a280f35b50346100cd5760203660031901126100cd57604090600435815280602052208054610c0a6001830161171f565b9160ff610c196002830161171f565b610c6e610c286003850161171f565b610c606007600687015496015493610c52604051998a998a5260e060208b015260e08a01906117c5565b9088820360408a01526117c5565b9086820360608801526117c5565b926080850152818116151560a085015260081c16151560c08301520390f35b50346100cd57610c9c3661168a565b507f0e82eab4cbddb8a38b9fb81ba86a4a05ec8aa2c55dbea69d2e72857b4f90e9548280a280f35b50346100cd5760203660031901126100cd57600435600154811015610b6f5760209060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154604051908152f35b50346100cd57610d253661168a565b507fdcad6660d3e34a68718474b3d2dfb7da8a012d967dfe595b0123a6112667f0688280a280f35b50346100cd57610d5c3661168a565b91610d6683611c48565b60001980820196935090861161117f57600380960493610d8585611820565b94610d936040519687611617565b808652610da2601f1991611820565b01815b81811061115b575050805b855181101561108657808802908882048103611072576001918083019081841161105e5790610df991610e0360209283610dea828c611a5e565b5101519060609586918c611a5e565b510151908b61270f565b926002918201809211610eeb5790610e3791610e2d84610e23848d611a5e565b510151928b611a5e565b510151908a61270f565b858695808889948a935b610eff575b5050505080610eb5575b50610e8d575b92610e889360405192610e68846115c6565b8352820152610e778289611a5e565b52610e828188611a5e565b50611a4f565b610db0565b83600003938085058714901517610e56575b634e487b7160e01b600052601160045260246000fd5b604d8196929611610eeb57600a0a818102919060008212600160ff1b821416610e9f578183051490151715610e9f579338610e50565b634e487b7160e01b87526011600452602487fd5b9091929881518a101561105857891580611037575b61102e575b610f238a83611bf6565b51603060f891821c101580611017575b15610feb5783610fc2575b600a91828102928184051490151715610e9f57610f5b8b84611bf6565b51901c90602f19808301928084138716610fae57908d918301019283129112908015821691151617610f9a5790610f948493929a611a4f565b93610e41565b634e487b7160e01b8b52601160045260248bfd5b634e487b7160e01b8e52601160045260248efd5b92909993918515600014610fd65750610e46565b919399909294610fe590611c18565b94610f3e565b99602e83929b610ffd83889796611bf6565b51901c1461100f575b610f9490611a4f565b839250611006565b5060396110248c85611bf6565b51821c1115610f33565b94508294610f19565b50602d60f81b6001600160f81b03196110508c85611bf6565b511614610f14565b98610e46565b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b83526011600452602483fd5b8588888481815260209281845260066040832001549282935b818452838652600580604086200154861015611132576110cb86600460408820019260408820016116cd565b905490851b1c855286526040842090848080806110e88c87611a7f565b9588015486906001600160a01b0316828215611129575bf11561111e576111189161111291611a72565b94611a4f565b9361109f565b6040513d86823e3d90fd5b506108fc6110ff565b84837faf7b59e6c86cd7c8ea4dfcc3926826a19ee85cd219eaf4e1a1cfca41a9cc798d8280a280f35b60209060405161116a816115c6565b60608152828581830152828a01015201610da5565b634e487b7160e01b84526011600452602484fd5b50600319608036820112610b6f576001600160a01b0360043581811692838203610b305784926001600160401b0391604435838111610b19576111da903690600401611586565b92909160643594851161128157610120908536030112610b19576002541690813b15610b19578593611229604051968795869485946339624a6b60e21b86526004019260243560048701611909565b039134905af1801561127657611262575b50807f9ca0de0709c575c61710159cf212e68fa7f9bd8d600cb008ae8c028b7e54b70591a280f35b61126b906115b3565b610b6f57813861123a565b6040513d84823e3d90fd5b8680fd5b5060031960a036820112610b6f57600435906001600160a01b0390602435908282168203610b30576001600160401b0390606435828111611281576112ce903690600401611586565b91608435938411610b2c57610120908436030112611281578587528660205260ff6007604089200154166113ef578587528660205260ff600760408920015460081c166113b45786946002541690813b15610b1957859361134c604051968795869485946339624a6b60e21b86526004019260443560048701611909565b039134905af18015611276576113a0575b50819052816020526007604083200161010061ff00198254161790557fa9e5ea555a64d717f026f961abe3fa55f2cdfc8f3c9dcb6e9ae55edec249ff318280a280f35b6113a9906115b3565b610b6f57813861135d565b60405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e48191a5cdd1c9a589d5d1959606a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272149bdd5b99081a5cc81b9bdd0818db1bdcd959606a1b6044820152606490fd5b8260031960c036820112610b6f57600435926024358015158103610b5b57604435926001600160a01b038085168503610b19576001600160401b0392608435848111610b2c5761147e903690600401611586565b95909360a435958611610b2857610120908636030112610b2c578888528760205260ff600760408a20015416156115555750878752866020526007604088200160ff1981541690556114f4575b85877fe9f7d7fd0b133404f0ccff737d6f3594748e04bc5507adfaed35835ef98937118280a280f35b6002541691823b15610b1957908593929161152c604051968795869485946339624a6b60e21b86526004019260643560048701611909565b039134905af1801561127657611546575b808080806114cb565b61154f906115b3565b8261153d565b62461bcd60e51b815260206004820152600c60248201526b149bdd5b990818db1bdcd95960a21b6044820152606490fd5b9181601f84011215610b30578235916001600160401b038311610b305760208381860195010111610b3057565b6001600160401b0381116105a057604052565b604081019081106001600160401b038211176105a057604052565b60c081019081106001600160401b038211176105a057604052565b606081019081106001600160401b038211176105a057604052565b90601f801991011681019081106001600160401b038211176105a057604052565b6001600160401b0381116105a057601f01601f191660200190565b92919261165f82611638565b9161166d6040519384611617565b829481845281830111610b30578281602093846000960137010152565b906040600319830112610b305760043591602435906001600160401b038211610b305780602383011215610b30578160246116ca93600401359101611653565b90565b805482101561081b5760005260206000200190600090565b90600182811c92168015611715575b60208310146116ff57565b634e487b7160e01b600052602260045260246000fd5b91607f16916116f4565b9060405191826000825492611733846116e5565b9081845260019485811690816000146117a2575060011461175f575b505061175d92500383611617565b565b9093915060005260209081600020936000915b81831061178a57505061175d9350820101388061174f565b85548884018501529485019487945091830191611772565b91505061175d94506020925060ff191682840152151560051b820101388061174f565b919082519283825260005b8481106117f1575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016117d0565b9080601f83011215610b30578160206116ca93359101611653565b6001600160401b0381116105a05760051b60200190565b9080601f83011215610b305781359061184f82611820565b9261185d6040519485611617565b828452602092838086019160051b83010192808411610b3057848301915b84831061188b5750505050505090565b82356001600160401b038111610b305786916118ac84848094890101611805565b81520192019161187b565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e1982360301811215610b305701602081359101916001600160401b038211610b30578136038313610b3057565b9081526001600160a01b03909116602082015260806040820181905290939261193592918501916118b7565b9160608184039101526119d16119b661199b61198061196561195786806118d8565b610120808a528901916118b7565b61197260208701876118d8565b9088830360208a01526118b7565b61198d60408601866118d8565b9087830360408901526118b7565b6119a860608501856118d8565b9086830360608801526118b7565b6119c360808401846118d8565b9085830360808701526118b7565b9160a08201356bffffffffffffffffffffffff60a01b8116809103610b305760a082015260c082013563ffffffff8116809103610b30576116ca93611a309160c0840152611a2260e08501856118d8565b9084830360e08601526118b7565b91611a4161010091828101906118d8565b9290918185039101526118b7565b6000198114610e9f5760010190565b805182101561081b5760209160051b010190565b91908203918211610e9f57565b9060005b8151811015611b9d57611a968183611a5e565b5151805160208092012060018086019060405190816000845494611ab9866116e5565b9081845288840196898682169182600014611b7e575050600114611b41575b5050611ae692500382611617565b51902014611afd5750611af890611a4f565b611a83565b60049384015493929091611b1091611a5e565b51015191828102928184041490151715611b2c57506064900490565b601190634e487b7160e01b6000525260246000fd5b9150915060005285600020916000925b828410611b6b575050508185611ae6928201013880611ad8565b8054858501890152928701928101611b51565b9250935050611ae6945060ff19168652151560051b8201013880611ad8565b505050600090565b60405190611bb2826115fc565b60006040838281528260208201520152565b60405190611bd1826115e1565b8160a06000918281528260208201528260408201528260608201528260808201520152565b90815181101561081b570160200190565b60ff1660ff8114610e9f5760010190565b8015610e9f576000190190565b516005811015611c325790565b634e487b7160e01b600052602160045260246000fd5b611c50611ba5565b50611c59611ba5565b506040805192611c68846115fc565b600091828552602090818601908482528087016000199182825280516102a081018181106001600160401b038211176122e05782526014815285885b61028081106122ca57505097845191611cbb611bc4565b505b8a5182518110156122bc576001600160f81b031990611cdc9084611bf6565b5116607b60f81b81148080156122af575b6122035750607d60f81b81148080156121f6575b6120785750601160f91b811461206b57600160fd1b818114801561205e575b8015612051575b8015612044575b61203d57601d60f91b821461201457600b60fa1b8214611ed957600360fc1b82101580611ecb575b8015611ebe575b8015611eb1575b8015611ea4575b8015611e97575b611db3578110159081611da4575b50611d97575b611d908b51611a4f565b8b52611cbd565b5060019950505050505050565b603f60f91b1015905038611d80565b5050918351858103611e1c575b50611dcc828b8d6125a5565b80611e115750611ddb90611a4f565b918351858103611dec575b50611d86565b611df860a0918c611a5e565b510160ff611e0881835116611c07565b16905238611de6565b9a5050505050505050565b611e26908b611a5e565b5180519060059081831015611e83576001809314918215611e54575b505015611dc0579a5050505050505050565b8151919250811015611e83576003149081611e72575b503880611e42565b60ff915060a0015116151538611e6a565b634e487b7160e01b8c52602160045260248cfd5b50603760f91b8214611d72565b50601d60fa1b8214611d6b565b50603360f91b8214611d64565b50602d60f81b8214611d5d565b50603960f81b821115611d56565b50508351858114159081611ff2575b5080611fbd575b15611d86579592979896939094918251828101908111610f9a575b611f1d611f17828b611a5e565b51611c25565b60059081811015611fa957600214908115611f89575b50611f47575b611f4290611c18565b611f0a565b87611f52828b611a5e565b510151151580611f73575b15611f39578994979193969295989a9952611d86565b506080611f80828b611a5e565b51015115611f5d565b9050611f98611f17838c611a5e565b90811015611e835760011438611f33565b634e487b7160e01b8d52602160045260248dfd5b50611fcc611f1785518c611a5e565b6005811015611fde5760011415611eef565b634e487b7160e01b8a52602160045260248afd5b6120019150611f17908c611a5e565b6005811015611fde576002141538611ee8565b50508551858101908111612029578452611d86565b634e487b7160e01b8a52601160045260248afd5b5050611d86565b50600560fa1b8214611d2e565b50600960f91b8214611d27565b50601160f81b8214611d20565b5091611dcc828b8d612389565b9050899691989594999a9792939a506000146121ee576001995b81518581019081116121da575b6120a9818a611a5e565b518a8101511515806121ce575b6120c957506120c490611c18565b61209f565b9b90919493989b9a95969992979a51600580821015611fa957821015611e8357036121ac578585528b516001908181018091116121ba57608061211d848f859460606121158484611a5e565b510152611a5e565b510152156121ac57805b61216b575b80156121385750611d86565b612142818c611a5e565b51828101511515908161215e575b5015611de657845238611de6565b6080915001511538612150565b612175818c611a5e565b51828101511515908161219f575b506121975761219190611c18565b80612127565b80855261212c565b6080915001511538612183565b5060019a5050505050505050565b634e487b7160e01b8c52601160045260248cfd5b506080810151156120b6565b634e487b7160e01b88526011600452602488fd5b600299612092565b50605d60f81b8214611d01565b9361220e9150611a4f565b926122198b8d6122f4565b9190156122a05785518c88820361227a575b5050156122735760015b600581101561225f5781528b51888201526001908201528551858101908111612029578452611d86565b634e487b7160e01b8b52602160045260248bfd5b6002612235565b60a09161228691611a5e565b510160ff61229681835116611c07565b169052388c61222b565b5060039b505050505050505050565b50605b60f81b8214611ced565b505093519698505050505050565b6122d2611bc4565b828285010152018690611ca4565b634e487b7160e01b89526041600452602489fd5b602090929192612302611bc4565b5001805183518091101561236a575061235760405193612321856115e1565b600080865280602087015280604087015280606087015280608087015260a0860152825190856123518383611a5e565b52611a5e565b506123628151611a4f565b905260019190565b919291600019810191508111610e9f5761238391611a5e565b51600091565b929190835191612397611bc4565b506123a28551611a4f565b85525b8451815181101561259a576123ba9082611bf6565b516001600160f81b031990601160f91b9082811682146125455760f81c605c148061251a575b6123f85750505b6123f18551611a4f565b85526123a5565b8161240f6124068951611a4f565b808a5285611bf6565b5116149081156124fe575b81156124e2575b81156124c6575b81156124aa575b811561248e575b8115612472575b8115612456575b506000036123e7575050909152600190565b8651601d60fa1b92506124699084611bf6565b51161438612444565b9050603160f91b81612485885185611bf6565b5116149061243d565b9050603760f91b816124a1885185611bf6565b51161490612436565b9050603960f91b816124bd885185611bf6565b5116149061242f565b9050603360f91b816124d9885185611bf6565b51161490612428565b9050601760fa1b816124f5885185611bf6565b51161490612421565b9050602f60f81b81612511885185611bf6565b5116149061241a565b50865160018101809111612530578351116123e0565b60246000634e487b7160e01b81526011600452fd5b50505050612555908493946122f4565b919015612591576001908181018091116125305760a0935190600384526020840152816040840152606083015260808201526000918291015290565b91905052600390565b505050909152600290565b92919060008451926125b5611bc4565b505b85518151811015612704576125cc9082611bf6565b516001600160f81b03198116600160fd1b81149081156126f6575b81156126e8575b81156126da575b81156126cc575b81156126be575b81156126b0575b5061264a5760f81c6020811090811561263f575b506126345761262d8651611a4f565b86526125b7565b505050909152600190565b607f9150113861261e565b5050506001939192935b156126a95761266390826122f4565b90156126a25760a0908293600093519060048352602083015260016040830152606082015260016080820152015261269b8151611c18565b9052600090565b5052600390565b5052600290565b605d60f81b1490503861260a565b607d60f81b81149150612603565b600b60fa1b811491506125fc565b600d60f81b811491506125f5565b600560f91b811491506125ee565b600960f81b811491506125e7565b505093919293612654565b929161271b8282611a72565b9161272583611638565b926127336040519485611617565b808452612742601f1991611638565b01366020850137805b82811061275a57509193505050565b612791906001600160f81b03196127718289611bf6565b511661278b6127808584611a72565b9160001a9187611bf6565b53611a4f565b61274b56fea264697066735822122070d4d3c15c83a7a8a37dde4723668ec3e60a3f5df9e3d72a45b2862b7d25df4f64736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c9081634a98b9021461142a5750806355aa2f8c14611285578063763a3df6146111935780637faf8dcf14610d4d5780638b3b57a414610d1657806390a4cb9b14610cc4578063b239a41214610c8d578063c428a27814610bdd578063c5ad404314610ba6578063c9640c0914610b77578063e09a1094146100d05763eb0cde1d146100a557600080fd5b346100cd57806003193601126100cd576002546040516001600160a01b039091168152602090f35b80fd5b506101a03660031901126100cd576024356001600160401b038111610b6f576100fd903690600401611805565b6044356001600160401b038111610b735761011c903690600401611805565b906064356001600160401b038111610b5b5761013c903690600401611805565b926084356001600160401b038111610b6f5736602382011215610b6f57806004013561016781611820565b916101756040519384611617565b818352602083016024819360051b83010191368311610b1957602401905b828210610b5f5750505060a4356001600160401b038111610b5b576101bc903690600401611837565b9560c4356001600160401b038111610b57576101dc903690600401611837565b9160e435916001600160401b038311610b195736602384011215610b1957826004013561020881611820565b936102166040519586611617565b8185526024602086019260051b82010190368211610b2857602401915b818310610b3557505050610104356001600160a01b0381169003610b3057610124358015158103610b3057610164356001600160401b038111610b2c5761027e903690600401611586565b90916001600160401b036101843511610b28576101206101843536036003190112610b2857610aaa575b50506004358652856020526040862097600435895587516001600160401b0381116109db576102da60018b01546116e5565b601f8111610a65575b50806020601f82116001146109fa5789916109ef575b508160011b916000199060031b1c19161760018a01555b8051906001600160401b0382116109db57819061033060028c01546116e5565b601f811161098a575b50602090601f831160011461091b578992610910575b50508160011b916000199060031b1c19161760028901555b8051906001600160401b0382116108fc57819061038760038b01546116e5565b601f81116108ab575b50602090601f831160011461083c578892610831575b50508160011b916000199060031b1c19161760038801555b60078701805460ff19166001179055845b8451811015610757576103e28186611a5e565b516103ed828b611a5e565b51906103f98387611a5e565b516001600160a01b0361040c8588611a5e565b5116906040519261041c846115e1565b835260208301938452604083015260608201528760808201528760a08201526104458388611a5e565b51885260048a01602052604088209181518355518051906001600160401b03821161067857819061047960018601546116e5565b601f8111610706575b50602090601f8311600114610697578b9261068c575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211610678576104d360028501546116e5565b601f8111610633575b50602090601f83116001146105c15791806005949260a0948d926105b6575b50508160011b916000199060031b1c19161760028501555b60038401600180841b036060830151166bffffffffffffffffffffffff841b8254161790556080810151600485015501519101556105518186611a5e565b5190600589015491600160401b8310156105a05761057e83600161059b950160058d015560058c016116cd565b819291549060031b600019811b9283911b16911916179055611a4f565b6103cf565b634e487b7160e01b600052604160045260246000fd5b0151905038806104fb565b90600285018b5260208b20918b5b601f198516811061061b5750926005949260019260a09583601f19811610610602575b505050811b016002850155610513565b015160001960f88460031b161c191690553880806105f2565b919260206001819286850151815501940192016105cf565b600285018b5260208b20601f840160051c810160208510610671575b601f830160051c820181106106655750506104dc565b6000815560010161064f565b508061064f565b634e487b7160e01b8a52604160045260248afd5b015190503880610498565b9250600185018b5260208b20908b935b601f19841685106106eb576001945083601f198116106106d2575b505050811b0160018301556104b0565b015160001960f88460031b161c191690553880806106c2565b818101518355602094850194600190930192909101906106a7565b909150600185018b5260208b20601f840160051c810160208510610750575b90849392915b601f830160051c82018110610741575050610482565b6000815585945060010161072b565b5080610725565b85828887600154600160401b8110156105a057600181018060015581101561081b576001600052600435907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015560206107bc604051936040855260408501906117c5565b91838303828501525191828152019290845b81811061080557505050807f2fceaf42a6664f3294222799a359650844542179732d12b26b6926bd338479a591600435930390a280f35b82518552602094850194909201916001016107ce565b634e487b7160e01b600052603260045260246000fd5b0151905038806103a6565b925060038a018852602088209088935b601f1984168510610890576001945083601f19811610610877575b505050811b0160038801556103be565b015160001960f88460031b161c19169055388080610867565b8181015183556020948501946001909301929091019061084c565b90915060038a01885260208820601f840160051c8101602085106108f5575b90849392915b601f830160051c820181106108e6575050610390565b600081558594506001016108d0565b50806108ca565b634e487b7160e01b87526041600452602487fd5b01519050388061034f565b925060028b018952602089209089935b601f198416851061096f576001945083601f19811610610956575b505050811b016002890155610367565b015160001960f88460031b161c19169055388080610946565b8181015183556020948501946001909301929091019061092b565b90915060028b01895260208920601f840160051c8101602085106109d4575b90849392915b601f830160051c820181106109c5575050610339565b600081558594506001016109af565b50806109a9565b634e487b7160e01b88526041600452602488fd5b9050890151386102f9565b915060018b0189526020892089925b8b601f1984168510610a4e57506001935082601f19811610610a35575b5050811b0160018a0155610310565b8b015160001960f88460031b161c191690553880610a26565b810151825560209384019360019092019101610a09565b60018b01895260208920601f830160051c810160208410610aa3575b601f830160051c82018110610a975750506102e3565b60008155600101610a81565b5080610a81565b6002546001600160a01b031690813b15610b2857918891610af1936040518095819482936339624a6b60e21b84526101843560040191610104356101443560048701611909565b039134905af18015610b1d57908791156102a857610b0e906115b3565b610b195785386102a8565b8580fd5b6040513d89823e3d90fd5b8880fd5b8780fd5b600080fd5b82356001600160a01b0381169003610b28578235815260209283019201610233565b8480fd5b8380fd5b8135815260209182019101610193565b5080fd5b8280fd5b50346100cd57806003193601126100cd576020604051733879e146140b627a5c858a08e507b171d9e431398152f35b50346100cd57610bb53661168a565b507f0de2355f73246cb2852175af9385f91c8205be026c831a20ada4062931abdec08280a280f35b50346100cd5760203660031901126100cd57604090600435815280602052208054610c0a6001830161171f565b9160ff610c196002830161171f565b610c6e610c286003850161171f565b610c606007600687015496015493610c52604051998a998a5260e060208b015260e08a01906117c5565b9088820360408a01526117c5565b9086820360608801526117c5565b926080850152818116151560a085015260081c16151560c08301520390f35b50346100cd57610c9c3661168a565b507f0e82eab4cbddb8a38b9fb81ba86a4a05ec8aa2c55dbea69d2e72857b4f90e9548280a280f35b50346100cd5760203660031901126100cd57600435600154811015610b6f5760209060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154604051908152f35b50346100cd57610d253661168a565b507fdcad6660d3e34a68718474b3d2dfb7da8a012d967dfe595b0123a6112667f0688280a280f35b50346100cd57610d5c3661168a565b91610d6683611c48565b60001980820196935090861161117f57600380960493610d8585611820565b94610d936040519687611617565b808652610da2601f1991611820565b01815b81811061115b575050805b855181101561108657808802908882048103611072576001918083019081841161105e5790610df991610e0360209283610dea828c611a5e565b5101519060609586918c611a5e565b510151908b61270f565b926002918201809211610eeb5790610e3791610e2d84610e23848d611a5e565b510151928b611a5e565b510151908a61270f565b858695808889948a935b610eff575b5050505080610eb5575b50610e8d575b92610e889360405192610e68846115c6565b8352820152610e778289611a5e565b52610e828188611a5e565b50611a4f565b610db0565b83600003938085058714901517610e56575b634e487b7160e01b600052601160045260246000fd5b604d8196929611610eeb57600a0a818102919060008212600160ff1b821416610e9f578183051490151715610e9f579338610e50565b634e487b7160e01b87526011600452602487fd5b9091929881518a101561105857891580611037575b61102e575b610f238a83611bf6565b51603060f891821c101580611017575b15610feb5783610fc2575b600a91828102928184051490151715610e9f57610f5b8b84611bf6565b51901c90602f19808301928084138716610fae57908d918301019283129112908015821691151617610f9a5790610f948493929a611a4f565b93610e41565b634e487b7160e01b8b52601160045260248bfd5b634e487b7160e01b8e52601160045260248efd5b92909993918515600014610fd65750610e46565b919399909294610fe590611c18565b94610f3e565b99602e83929b610ffd83889796611bf6565b51901c1461100f575b610f9490611a4f565b839250611006565b5060396110248c85611bf6565b51821c1115610f33565b94508294610f19565b50602d60f81b6001600160f81b03196110508c85611bf6565b511614610f14565b98610e46565b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b83526011600452602483fd5b8588888481815260209281845260066040832001549282935b818452838652600580604086200154861015611132576110cb86600460408820019260408820016116cd565b905490851b1c855286526040842090848080806110e88c87611a7f565b9588015486906001600160a01b0316828215611129575bf11561111e576111189161111291611a72565b94611a4f565b9361109f565b6040513d86823e3d90fd5b506108fc6110ff565b84837faf7b59e6c86cd7c8ea4dfcc3926826a19ee85cd219eaf4e1a1cfca41a9cc798d8280a280f35b60209060405161116a816115c6565b60608152828581830152828a01015201610da5565b634e487b7160e01b84526011600452602484fd5b50600319608036820112610b6f576001600160a01b0360043581811692838203610b305784926001600160401b0391604435838111610b19576111da903690600401611586565b92909160643594851161128157610120908536030112610b19576002541690813b15610b19578593611229604051968795869485946339624a6b60e21b86526004019260243560048701611909565b039134905af1801561127657611262575b50807f9ca0de0709c575c61710159cf212e68fa7f9bd8d600cb008ae8c028b7e54b70591a280f35b61126b906115b3565b610b6f57813861123a565b6040513d84823e3d90fd5b8680fd5b5060031960a036820112610b6f57600435906001600160a01b0390602435908282168203610b30576001600160401b0390606435828111611281576112ce903690600401611586565b91608435938411610b2c57610120908436030112611281578587528660205260ff6007604089200154166113ef578587528660205260ff600760408920015460081c166113b45786946002541690813b15610b1957859361134c604051968795869485946339624a6b60e21b86526004019260443560048701611909565b039134905af18015611276576113a0575b50819052816020526007604083200161010061ff00198254161790557fa9e5ea555a64d717f026f961abe3fa55f2cdfc8f3c9dcb6e9ae55edec249ff318280a280f35b6113a9906115b3565b610b6f57813861135d565b60405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e48191a5cdd1c9a589d5d1959606a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272149bdd5b99081a5cc81b9bdd0818db1bdcd959606a1b6044820152606490fd5b8260031960c036820112610b6f57600435926024358015158103610b5b57604435926001600160a01b038085168503610b19576001600160401b0392608435848111610b2c5761147e903690600401611586565b95909360a435958611610b2857610120908636030112610b2c578888528760205260ff600760408a20015416156115555750878752866020526007604088200160ff1981541690556114f4575b85877fe9f7d7fd0b133404f0ccff737d6f3594748e04bc5507adfaed35835ef98937118280a280f35b6002541691823b15610b1957908593929161152c604051968795869485946339624a6b60e21b86526004019260643560048701611909565b039134905af1801561127657611546575b808080806114cb565b61154f906115b3565b8261153d565b62461bcd60e51b815260206004820152600c60248201526b149bdd5b990818db1bdcd95960a21b6044820152606490fd5b9181601f84011215610b30578235916001600160401b038311610b305760208381860195010111610b3057565b6001600160401b0381116105a057604052565b604081019081106001600160401b038211176105a057604052565b60c081019081106001600160401b038211176105a057604052565b606081019081106001600160401b038211176105a057604052565b90601f801991011681019081106001600160401b038211176105a057604052565b6001600160401b0381116105a057601f01601f191660200190565b92919261165f82611638565b9161166d6040519384611617565b829481845281830111610b30578281602093846000960137010152565b906040600319830112610b305760043591602435906001600160401b038211610b305780602383011215610b30578160246116ca93600401359101611653565b90565b805482101561081b5760005260206000200190600090565b90600182811c92168015611715575b60208310146116ff57565b634e487b7160e01b600052602260045260246000fd5b91607f16916116f4565b9060405191826000825492611733846116e5565b9081845260019485811690816000146117a2575060011461175f575b505061175d92500383611617565b565b9093915060005260209081600020936000915b81831061178a57505061175d9350820101388061174f565b85548884018501529485019487945091830191611772565b91505061175d94506020925060ff191682840152151560051b820101388061174f565b919082519283825260005b8481106117f1575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016117d0565b9080601f83011215610b30578160206116ca93359101611653565b6001600160401b0381116105a05760051b60200190565b9080601f83011215610b305781359061184f82611820565b9261185d6040519485611617565b828452602092838086019160051b83010192808411610b3057848301915b84831061188b5750505050505090565b82356001600160401b038111610b305786916118ac84848094890101611805565b81520192019161187b565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e1982360301811215610b305701602081359101916001600160401b038211610b30578136038313610b3057565b9081526001600160a01b03909116602082015260806040820181905290939261193592918501916118b7565b9160608184039101526119d16119b661199b61198061196561195786806118d8565b610120808a528901916118b7565b61197260208701876118d8565b9088830360208a01526118b7565b61198d60408601866118d8565b9087830360408901526118b7565b6119a860608501856118d8565b9086830360608801526118b7565b6119c360808401846118d8565b9085830360808701526118b7565b9160a08201356bffffffffffffffffffffffff60a01b8116809103610b305760a082015260c082013563ffffffff8116809103610b30576116ca93611a309160c0840152611a2260e08501856118d8565b9084830360e08601526118b7565b91611a4161010091828101906118d8565b9290918185039101526118b7565b6000198114610e9f5760010190565b805182101561081b5760209160051b010190565b91908203918211610e9f57565b9060005b8151811015611b9d57611a968183611a5e565b5151805160208092012060018086019060405190816000845494611ab9866116e5565b9081845288840196898682169182600014611b7e575050600114611b41575b5050611ae692500382611617565b51902014611afd5750611af890611a4f565b611a83565b60049384015493929091611b1091611a5e565b51015191828102928184041490151715611b2c57506064900490565b601190634e487b7160e01b6000525260246000fd5b9150915060005285600020916000925b828410611b6b575050508185611ae6928201013880611ad8565b8054858501890152928701928101611b51565b9250935050611ae6945060ff19168652151560051b8201013880611ad8565b505050600090565b60405190611bb2826115fc565b60006040838281528260208201520152565b60405190611bd1826115e1565b8160a06000918281528260208201528260408201528260608201528260808201520152565b90815181101561081b570160200190565b60ff1660ff8114610e9f5760010190565b8015610e9f576000190190565b516005811015611c325790565b634e487b7160e01b600052602160045260246000fd5b611c50611ba5565b50611c59611ba5565b506040805192611c68846115fc565b600091828552602090818601908482528087016000199182825280516102a081018181106001600160401b038211176122e05782526014815285885b61028081106122ca57505097845191611cbb611bc4565b505b8a5182518110156122bc576001600160f81b031990611cdc9084611bf6565b5116607b60f81b81148080156122af575b6122035750607d60f81b81148080156121f6575b6120785750601160f91b811461206b57600160fd1b818114801561205e575b8015612051575b8015612044575b61203d57601d60f91b821461201457600b60fa1b8214611ed957600360fc1b82101580611ecb575b8015611ebe575b8015611eb1575b8015611ea4575b8015611e97575b611db3578110159081611da4575b50611d97575b611d908b51611a4f565b8b52611cbd565b5060019950505050505050565b603f60f91b1015905038611d80565b5050918351858103611e1c575b50611dcc828b8d6125a5565b80611e115750611ddb90611a4f565b918351858103611dec575b50611d86565b611df860a0918c611a5e565b510160ff611e0881835116611c07565b16905238611de6565b9a5050505050505050565b611e26908b611a5e565b5180519060059081831015611e83576001809314918215611e54575b505015611dc0579a5050505050505050565b8151919250811015611e83576003149081611e72575b503880611e42565b60ff915060a0015116151538611e6a565b634e487b7160e01b8c52602160045260248cfd5b50603760f91b8214611d72565b50601d60fa1b8214611d6b565b50603360f91b8214611d64565b50602d60f81b8214611d5d565b50603960f81b821115611d56565b50508351858114159081611ff2575b5080611fbd575b15611d86579592979896939094918251828101908111610f9a575b611f1d611f17828b611a5e565b51611c25565b60059081811015611fa957600214908115611f89575b50611f47575b611f4290611c18565b611f0a565b87611f52828b611a5e565b510151151580611f73575b15611f39578994979193969295989a9952611d86565b506080611f80828b611a5e565b51015115611f5d565b9050611f98611f17838c611a5e565b90811015611e835760011438611f33565b634e487b7160e01b8d52602160045260248dfd5b50611fcc611f1785518c611a5e565b6005811015611fde5760011415611eef565b634e487b7160e01b8a52602160045260248afd5b6120019150611f17908c611a5e565b6005811015611fde576002141538611ee8565b50508551858101908111612029578452611d86565b634e487b7160e01b8a52601160045260248afd5b5050611d86565b50600560fa1b8214611d2e565b50600960f91b8214611d27565b50601160f81b8214611d20565b5091611dcc828b8d612389565b9050899691989594999a9792939a506000146121ee576001995b81518581019081116121da575b6120a9818a611a5e565b518a8101511515806121ce575b6120c957506120c490611c18565b61209f565b9b90919493989b9a95969992979a51600580821015611fa957821015611e8357036121ac578585528b516001908181018091116121ba57608061211d848f859460606121158484611a5e565b510152611a5e565b510152156121ac57805b61216b575b80156121385750611d86565b612142818c611a5e565b51828101511515908161215e575b5015611de657845238611de6565b6080915001511538612150565b612175818c611a5e565b51828101511515908161219f575b506121975761219190611c18565b80612127565b80855261212c565b6080915001511538612183565b5060019a5050505050505050565b634e487b7160e01b8c52601160045260248cfd5b506080810151156120b6565b634e487b7160e01b88526011600452602488fd5b600299612092565b50605d60f81b8214611d01565b9361220e9150611a4f565b926122198b8d6122f4565b9190156122a05785518c88820361227a575b5050156122735760015b600581101561225f5781528b51888201526001908201528551858101908111612029578452611d86565b634e487b7160e01b8b52602160045260248bfd5b6002612235565b60a09161228691611a5e565b510160ff61229681835116611c07565b169052388c61222b565b5060039b505050505050505050565b50605b60f81b8214611ced565b505093519698505050505050565b6122d2611bc4565b828285010152018690611ca4565b634e487b7160e01b89526041600452602489fd5b602090929192612302611bc4565b5001805183518091101561236a575061235760405193612321856115e1565b600080865280602087015280604087015280606087015280608087015260a0860152825190856123518383611a5e565b52611a5e565b506123628151611a4f565b905260019190565b919291600019810191508111610e9f5761238391611a5e565b51600091565b929190835191612397611bc4565b506123a28551611a4f565b85525b8451815181101561259a576123ba9082611bf6565b516001600160f81b031990601160f91b9082811682146125455760f81c605c148061251a575b6123f85750505b6123f18551611a4f565b85526123a5565b8161240f6124068951611a4f565b808a5285611bf6565b5116149081156124fe575b81156124e2575b81156124c6575b81156124aa575b811561248e575b8115612472575b8115612456575b506000036123e7575050909152600190565b8651601d60fa1b92506124699084611bf6565b51161438612444565b9050603160f91b81612485885185611bf6565b5116149061243d565b9050603760f91b816124a1885185611bf6565b51161490612436565b9050603960f91b816124bd885185611bf6565b5116149061242f565b9050603360f91b816124d9885185611bf6565b51161490612428565b9050601760fa1b816124f5885185611bf6565b51161490612421565b9050602f60f81b81612511885185611bf6565b5116149061241a565b50865160018101809111612530578351116123e0565b60246000634e487b7160e01b81526011600452fd5b50505050612555908493946122f4565b919015612591576001908181018091116125305760a0935190600384526020840152816040840152606083015260808201526000918291015290565b91905052600390565b505050909152600290565b92919060008451926125b5611bc4565b505b85518151811015612704576125cc9082611bf6565b516001600160f81b03198116600160fd1b81149081156126f6575b81156126e8575b81156126da575b81156126cc575b81156126be575b81156126b0575b5061264a5760f81c6020811090811561263f575b506126345761262d8651611a4f565b86526125b7565b505050909152600190565b607f9150113861261e565b5050506001939192935b156126a95761266390826122f4565b90156126a25760a0908293600093519060048352602083015260016040830152606082015260016080820152015261269b8151611c18565b9052600090565b5052600390565b5052600290565b605d60f81b1490503861260a565b607d60f81b81149150612603565b600b60fa1b811491506125fc565b600d60f81b811491506125f5565b600560f91b811491506125ee565b600960f81b811491506125e7565b505093919293612654565b929161271b8282611a72565b9161272583611638565b926127336040519485611617565b808452612742601f1991611638565b01366020850137805b82811061275a57509193505050565b612791906001600160f81b03196127718289611bf6565b511661278b6127808584611a72565b9160001a9187611bf6565b53611a4f565b61274b56fea264697066735822122070d4d3c15c83a7a8a37dde4723668ec3e60a3f5df9e3d72a45b2862b7d25df4f64736f6c63430008110033",
  "devdoc": {
    "author": "arjanjohan",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A smart contract for cross-chain quadratic voting developed during EthDam 24. This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 50,
        "contract": "contracts/Funding.sol:Funding",
        "label": "fundingRounds",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(FundingRound)40_storage)"
      },
      {
        "astId": 53,
        "contract": "contracts/Funding.sol:Funding",
        "label": "roundIds",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/Funding.sol:Funding",
        "label": "gatewayContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IGateway)2385"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IGateway)2385": {
        "encoding": "inplace",
        "label": "contract IGateway",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(FundingRound)40_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Funding.FundingRound)",
        "numberOfBytes": "32",
        "value": "t_struct(FundingRound)40_storage"
      },
      "t_mapping(t_uint256,t_struct(Project)17_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Funding.Project)",
        "numberOfBytes": "32",
        "value": "t_struct(Project)17_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FundingRound)40_storage": {
        "encoding": "inplace",
        "label": "struct Funding.FundingRound",
        "members": [
          {
            "astId": 19,
            "contract": "contracts/Funding.sol:Funding",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21,
            "contract": "contracts/Funding.sol:Funding",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 23,
            "contract": "contracts/Funding.sol:Funding",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 25,
            "contract": "contracts/Funding.sol:Funding",
            "label": "curveType",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 30,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projects",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Project)17_storage)"
          },
          {
            "astId": 33,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projectIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 35,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalContributions",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 37,
            "contract": "contracts/Funding.sol:Funding",
            "label": "isOpen",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 39,
            "contract": "contracts/Funding.sol:Funding",
            "label": "isDistributed",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Project)17_storage": {
        "encoding": "inplace",
        "label": "struct Funding.Project",
        "members": [
          {
            "astId": 6,
            "contract": "contracts/Funding.sol:Funding",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8,
            "contract": "contracts/Funding.sol:Funding",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 10,
            "contract": "contracts/Funding.sol:Funding",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 12,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projectAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          },
          {
            "astId": 14,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalContributions",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalSquareRoots",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}