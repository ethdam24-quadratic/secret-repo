{
  "address": "0x8Ef8f8daF80e8A996f98D00c9ebC10f29B16a8Ba",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ContributionReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        }
      ],
      "name": "RoundCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sendToSecret",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "closeFundingRound",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "curveType",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "projectNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "projectDescriptions",
          "type": "string[]"
        },
        {
          "internalType": "address payable[]",
          "name": "projectAddresses",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "sendToSecret",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "createFundingRound",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "exp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fundingRounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "curveType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalContributions",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayAddressSepolia",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayContract",
      "outputs": [
        {
          "internalType": "contract IGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2b2e1b95a492237a09eb48e9712b5c2530f6b4176d6c650c41ca2b11240eb854",
  "receipt": {
    "to": null,
    "from": "0xbb1DF1ab33786Ac6B91d9D16b445c7b66825979e",
    "contractAddress": "0x8Ef8f8daF80e8A996f98D00c9ebC10f29B16a8Ba",
    "transactionIndex": 92,
    "gasUsed": "2132288",
    "logsBloom": "0x
    "blockHash": "0x1867a570792b76dd081504853c8547131829230ed6cd70a793649045ca80333c",
    "transactionHash": "0x2b2e1b95a492237a09eb48e9712b5c2530f6b4176d6c650c41ca2b11240eb854",
    "logs": [],
    "blockNumber": 5688715,
    "cumulativeGasUsed": "11822189",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "788f90577bbcf9118f93e408b8796503",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ContributionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"}],\"name\":\"RoundCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendToSecret\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"closeFundingRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"curveType\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"projectNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"projectDescriptions\",\"type\":\"string[]\"},{\"internalType\":\"address payable[]\",\"name\":\"projectAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"sendToSecret\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"createFundingRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"exp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundingRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"curveType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalContributions\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayAddressSepolia\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayContract\",\"outputs\":[{\"internalType\":\"contract IGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"arjanjohan\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A smart contract for cross-chain quadratic voting developed during EthDam 24. This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Funding.sol\":\"Funding\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"abdk-libraries-solidity/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (x << 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    unchecked {\\n      return int64 (x >> 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (int256 (x << 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    unchecked {\\n      require (x >= 0);\\n      return uint64 (uint128 (x >> 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = x >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    unchecked {\\n      return int256 (x) << 64;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) + y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) - y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) * y >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    unchecked {\\n      if (x == MIN_64x64) {\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\n        return -y << 63;\\n      } else {\\n        bool negativeResult = false;\\n        if (x < 0) {\\n          x = -x;\\n          negativeResult = true;\\n        }\\n        if (y < 0) {\\n          y = -y; // We rely on overflow behavior here\\n          negativeResult = !negativeResult;\\n        }\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\n        if (negativeResult) {\\n          require (absoluteResult <=\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n          require (absoluteResult <=\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n          return int256 (absoluteResult);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    unchecked {\\n      if (y == 0) return 0;\\n\\n      require (x >= 0);\\n\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\n\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      hi <<= 64;\\n\\n      require (hi <=\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n      return hi + lo;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      int256 result = (int256 (x) << 64) / y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x; // We rely on overflow behavior here\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      uint128 result = divuu (x, y);\\n      require (result <= uint128 (MAX_64x64));\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return -x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return x < 0 ? -x : x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != 0);\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 m = int256 (x) * int256 (y);\\n      require (m >= 0);\\n      require (m <\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\n      return int128 (sqrtu (uint256 (m)));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      bool negative = x < 0 && y & 1 == 1;\\n\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\n      uint256 absResult;\\n      absResult = 0x100000000000000000000000000000000;\\n\\n      if (absX <= 0x10000000000000000) {\\n        absX <<= 63;\\n        while (y != 0) {\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x2 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x4 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x8 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          y >>= 4;\\n        }\\n\\n        absResult >>= 64;\\n      } else {\\n        uint256 absXShift = 63;\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n        uint256 resultShift = 0;\\n        while (y != 0) {\\n          require (absXShift < 64);\\n\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n            resultShift += absXShift;\\n            if (absResult > 0x100000000000000000000000000000000) {\\n              absResult >>= 1;\\n              resultShift += 1;\\n            }\\n          }\\n          absX = absX * absX >> 127;\\n          absXShift <<= 1;\\n          if (absX >= 0x100000000000000000000000000000000) {\\n              absX >>= 1;\\n              absXShift += 1;\\n          }\\n\\n          y >>= 1;\\n        }\\n\\n        require (resultShift < 64);\\n        absResult >>= 64 - resultShift;\\n      }\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= 0);\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      int256 msb = 0;\\n      int256 xc = x;\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 result = msb - 64 << 64;\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n        ux *= ux;\\n        uint256 b = ux >> 255;\\n        ux >>= 127 + b;\\n        result += bit * int256 (b);\\n      }\\n\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      return int128 (int256 (\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n\\n      if (x & 0x8000000000000000 > 0)\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n      if (x & 0x4000000000000000 > 0)\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n      if (x & 0x2000000000000000 > 0)\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n      if (x & 0x1000000000000000 > 0)\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n      if (x & 0x800000000000000 > 0)\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n      if (x & 0x400000000000000 > 0)\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n      if (x & 0x200000000000000 > 0)\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n      if (x & 0x100000000000000 > 0)\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n      if (x & 0x80000000000000 > 0)\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n      if (x & 0x40000000000000 > 0)\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n      if (x & 0x20000000000000 > 0)\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n      if (x & 0x10000000000000 > 0)\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n      if (x & 0x8000000000000 > 0)\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n      if (x & 0x4000000000000 > 0)\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n      if (x & 0x2000000000000 > 0)\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n      if (x & 0x1000000000000 > 0)\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n      if (x & 0x800000000000 > 0)\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n      if (x & 0x400000000000 > 0)\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n      if (x & 0x200000000000 > 0)\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n      if (x & 0x100000000000 > 0)\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n      if (x & 0x80000000000 > 0)\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n      if (x & 0x40000000000 > 0)\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n      if (x & 0x20000000000 > 0)\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n      if (x & 0x10000000000 > 0)\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n      if (x & 0x8000000000 > 0)\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n      if (x & 0x4000000000 > 0)\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n      if (x & 0x2000000000 > 0)\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n      if (x & 0x1000000000 > 0)\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n      if (x & 0x800000000 > 0)\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n      if (x & 0x400000000 > 0)\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n      if (x & 0x200000000 > 0)\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n      if (x & 0x100000000 > 0)\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n      if (x & 0x80000000 > 0)\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n      if (x & 0x40000000 > 0)\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n      if (x & 0x20000000 > 0)\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n      if (x & 0x10000000 > 0)\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n      if (x & 0x8000000 > 0)\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n      if (x & 0x4000000 > 0)\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n      if (x & 0x2000000 > 0)\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n      if (x & 0x1000000 > 0)\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n      if (x & 0x800000 > 0)\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n      if (x & 0x400000 > 0)\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n      if (x & 0x200000 > 0)\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n      if (x & 0x100000 > 0)\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n      if (x & 0x80000 > 0)\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n      if (x & 0x40000 > 0)\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n      if (x & 0x20000 > 0)\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n      if (x & 0x10000 > 0)\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n      if (x & 0x8000 > 0)\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n      if (x & 0x4000 > 0)\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n      if (x & 0x2000 > 0)\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n      if (x & 0x1000 > 0)\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n      if (x & 0x800 > 0)\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n      if (x & 0x400 > 0)\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n      if (x & 0x200 > 0)\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n      if (x & 0x100 > 0)\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n      if (x & 0x80 > 0)\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n      if (x & 0x40 > 0)\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n      if (x & 0x20 > 0)\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n      if (x & 0x10 > 0)\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n      if (x & 0x8 > 0)\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n      if (x & 0x4 > 0)\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n      if (x & 0x2 > 0)\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n      if (x & 0x1 > 0)\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\n      require (result <= uint256 (int256 (MAX_64x64)));\\n\\n      return int128 (int256 (result));\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      return exp_2 (\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      uint256 result;\\n\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        result = (x << 64) / y;\\n      else {\\n        uint256 msb = 192;\\n        uint256 xc = x >> 192;\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 hi = result * (y >> 128);\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 xh = x >> 192;\\n        uint256 xl = x << 64;\\n\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n        lo = hi << 128;\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n\\n        result += xh == hi >> 128 ? xl / y : 1;\\n      }\\n\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return uint128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    unchecked {\\n      if (x == 0) return 0;\\n      else {\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n        if (xx >= 0x4) { r <<= 1; }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return uint128 (r < r1 ? r : r1);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1364fdc24192b982f647c7fc68dcb2f6fc1b5e201843e773144bd23a76cb3b97\",\"license\":\"BSD-4-Clause\"},\"contracts/Funding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\nimport \\\"../interfaces/IGateway.sol\\\";\\n\\n/**\\n * A smart contract for cross-chain quadratic voting developed during EthDam 24.\\n * This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.\\n * @author arjanjohan\\n */\\ncontract Funding {\\n\\t// ========================================\\n\\t//     ENUM, STRUCTS AND MAPPINGS\\n\\t// ========================================\\n\\n\\tstruct Project {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\taddress payable projectAddress;\\n\\t\\tuint256 totalContributions;\\n\\t\\tuint256 totalSquareRoots;\\n\\t}\\n\\n\\tstruct FundingRound {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\tstring curveType;\\n\\t\\tmapping(uint256 => Project) projects;\\n\\t\\tuint256[] projectIds;\\n\\t\\tuint256 totalContributions;\\n\\t\\tbool isOpen;\\n\\t}\\n\\n\\tmapping(uint256 => FundingRound) public fundingRounds;\\n\\tuint256[] public roundIds;\\n\\n\\t// ========================================\\n\\t//     CONSTRUCTOR AND VALUES\\n\\t// ========================================\\n\\n\\tIGateway public gatewayContract;\\n\\taddress public gatewayAddressSepolia =\\n\\t\\taddress(0x3879E146140b627a5C858a08e507B171D9E43139);\\n\\n\\tconstructor() {\\n\\t\\tgatewayContract = IGateway(gatewayAddressSepolia);\\n\\t}\\n\\n\\t// ========================================\\n\\t//     EVENTS\\n\\t// ========================================\\n\\tevent RoundCreated(\\n\\t\\tuint256 indexed roundId,\\n\\t\\tstring name,\\n\\t\\tuint256[] projectIds\\n\\t);\\n\\tevent ContributionReceived(\\n\\t\\taddress indexed contributor,\\n\\t\\tuint256 indexed roundId,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent RoundClosed(uint256 indexed roundId);\\n\\n\\t// ========================================\\n\\t//     CORE FUNCTIONS\\n\\t// ========================================\\n\\n\\tfunction createFundingRound(\\n\\t\\tuint256 id,\\n\\t\\tstring memory name,\\n\\t\\tstring memory description,\\n\\t\\tstring memory curveType,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses,\\n\\t\\tbool sendToSecret,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\tvalidateProjectParameters(\\n\\t\\t\\tprojectIds,\\n\\t\\t\\tprojectNames,\\n\\t\\t\\tprojectDescriptions,\\n\\t\\t\\tprojectAddresses\\n\\t\\t);\\n\\t\\trequire(fundingRounds[id].id == 0, \\\"Round ID exists\\\");\\n\\n\\t\\tif (sendToSecret) {\\n\\t\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\t\\tpayloadHash,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\troutingInfo,\\n\\t\\t\\t\\tinfo\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tFundingRound storage round = fundingRounds[id];\\n\\t\\tsetupFundingRound(\\n\\t\\t\\tround,\\n\\t\\t\\tid,\\n\\t\\t\\tname,\\n\\t\\t\\tdescription,\\n\\t\\t\\tcurveType,\\n\\t\\t\\tprojectIds,\\n\\t\\t\\tprojectNames,\\n\\t\\t\\tprojectDescriptions,\\n\\t\\t\\tprojectAddresses\\n\\t\\t);\\n\\t\\troundIds.push(id);\\n\\t\\temit RoundCreated(id, name, projectIds);\\n\\t}\\n\\n\\tfunction contribute(\\n\\t\\tuint256 roundId,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\trequire(validRound(roundId), \\\"Invalid round\\\");\\n\\t\\tuint256 totalContributed = processContributions(\\n\\t\\t\\troundId,\\n\\t\\t\\tprojectIds,\\n\\t\\t\\tamounts\\n\\t\\t);\\n\\t\\trequire(msg.value >= totalContributed, \\\"Insufficient funds\\\");\\n\\n\\t\\tgatewayContract.send{ value: msg.value - totalContributed }(\\n\\t\\t\\tpayloadHash,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\troutingInfo,\\n\\t\\t\\tinfo\\n\\t\\t);\\n\\t\\temit ContributionReceived(msg.sender, roundId, totalContributed);\\n\\t}\\n\\n\\tfunction closeFundingRound(\\n\\t\\tuint256 roundId,\\n\\t\\tbool sendToSecret,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\trequire(fundingRounds[roundId].isOpen, \\\"Round closed\\\");\\n\\t\\tfundingRounds[roundId].isOpen = false;\\n\\n\\t\\tif (sendToSecret) {\\n\\t\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\t\\tpayloadHash,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\troutingInfo,\\n\\t\\t\\t\\tinfo\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\t// Different function to retrieve results\\n\\t\\t}\\n\\t\\tdistributeFunds(roundId); // todo add results from secret here\\n\\t\\temit RoundClosed(roundId);\\n\\t}\\n\\n\\t// ========================================\\n\\t//     HELPER FUNCTIONS\\n\\t// ========================================\\n\\n\\tfunction validateProjectParameters(\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses\\n\\t) private pure {\\n\\t\\trequire(\\n\\t\\t\\tprojectIds.length == projectNames.length &&\\n\\t\\t\\t\\tprojectNames.length == projectDescriptions.length &&\\n\\t\\t\\t\\tprojectDescriptions.length == projectAddresses.length,\\n\\t\\t\\t\\\"Mismatched input arrays\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setupFundingRound(\\n\\t\\tFundingRound storage round,\\n\\t\\tuint256 id,\\n\\t\\tstring memory name,\\n\\t\\tstring memory description,\\n\\t\\tstring memory curveType,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses\\n\\t) private {\\n\\t\\tround.id = id;\\n\\t\\tround.name = name;\\n\\t\\tround.description = description;\\n\\t\\tround.curveType = curveType;\\n\\t\\tround.isOpen = true;\\n\\n\\t\\tfor (uint256 i = 0; i < projectIds.length; i++) {\\n\\t\\t\\trequire(round.projects[projectIds[i]].id == 0, \\\"Project ID exists\\\");\\n\\t\\t\\tround.projects[projectIds[i]] = Project({\\n\\t\\t\\t\\tid: projectIds[i],\\n\\t\\t\\t\\tname: projectNames[i],\\n\\t\\t\\t\\tdescription: projectDescriptions[i],\\n\\t\\t\\t\\tprojectAddress: projectAddresses[i],\\n\\t\\t\\t\\ttotalContributions: 0,\\n\\t\\t\\t\\ttotalSquareRoots: 0\\n\\t\\t\\t});\\n\\t\\t\\tround.projectIds.push(projectIds[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction validRound(uint256 roundId) private view returns (bool) {\\n\\t\\treturn fundingRounds[roundId].isOpen && fundingRounds[roundId].id != 0;\\n\\t}\\n\\n\\tfunction processContributions(\\n\\t\\tuint256 roundId,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tuint256[] memory amounts\\n\\t) private view returns (uint256 totalContributed) {\\n\\t\\tfor (uint256 i = 0; i < amounts.length; i++) {\\n\\t\\t\\tProject storage project = fundingRounds[roundId].projects[\\n\\t\\t\\t\\tprojectIds[i]\\n\\t\\t\\t];\\n\\t\\t\\trequire(project.id != 0, \\\"Project not found\\\");\\n\\t\\t\\ttotalContributed += amounts[i];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction distributeFunds(uint256 roundId) private {\\n\\t\\tuint256 totalFunds = fundingRounds[roundId].totalContributions;\\n\\t\\tfor (uint256 i = 0; i < fundingRounds[roundId].projectIds.length; i++) {\\n\\t\\t\\tProject storage project = fundingRounds[roundId].projects[\\n\\t\\t\\t\\tfundingRounds[roundId].projectIds[i]\\n\\t\\t\\t];\\n\\t\\t\\tuint256 payout = calculatePayout(\\n\\t\\t\\t\\tfundingRounds[roundId].curveType,\\n\\t\\t\\t\\tproject\\n\\t\\t\\t);\\n\\t\\t\\tproject.projectAddress.transfer(payout);\\n\\t\\t\\ttotalFunds -= payout;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction calculatePayout(\\n\\t\\tstring memory curveType,\\n\\t\\tProject memory project\\n\\t) private pure returns (uint256 payout) {\\n\\t\\tif (keccak256(bytes(curveType)) == keccak256(bytes(\\\"Quadratic\\\"))) {\\n\\t\\t\\treturn project.totalSquareRoots * project.totalSquareRoots;\\n\\t\\t} else if (keccak256(bytes(curveType)) == keccak256(bytes(\\\"Linear\\\"))) {\\n\\t\\t\\treturn project.totalContributions;\\n\\t\\t} else if (\\n\\t\\t\\tkeccak256(bytes(curveType)) == keccak256(bytes(\\\"Exponential\\\"))\\n\\t\\t) {\\n\\t\\t\\treturn (exp(project.totalSquareRoots) - 1);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction sqrt(uint256 x) private pure returns (uint256 y) {\\n\\t\\tuint256 z = (x + 1) / 2;\\n\\t\\ty = x;\\n\\t\\twhile (z < y) {\\n\\t\\t\\ty = z;\\n\\t\\t\\tz = (x / z + z) / 2;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction exp(uint x) public pure returns (uint) {\\n\\t\\tint128 x_fixed = ABDKMath64x64.fromUInt(x);\\n\\t\\tint128 result_fixed = ABDKMath64x64.exp(x_fixed);\\n\\t\\treturn ABDKMath64x64.toUInt(result_fixed);\\n\\t}\\n}\\n\",\"keccak256\":\"0x23ef28fc3381bb4be872020c4bbcfd01367f0fdb4507dcd5906d2563856f5037\",\"license\":\"MIT\"},\"interfaces/IGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IGateway {\\n\\tstruct ExecutionInfo {\\n\\t\\tbytes user_key;\\n\\t\\tbytes user_pubkey;\\n\\t\\tstring routing_code_hash;\\n\\t\\tstring task_destination_network;\\n\\t\\tstring handle;\\n\\t\\tbytes12 nonce;\\n\\t\\tuint32 callback_gas_limit;\\n\\t\\tbytes payload;\\n\\t\\tbytes payload_signature;\\n\\t}\\n\\n\\tfunction send(\\n\\t\\tbytes32 _payloadHash,\\n\\t\\taddress _userAddress,\\n\\t\\tstring calldata _routingInfo,\\n\\t\\tExecutionInfo calldata _info\\n\\t) external payable;\\n}\\n\",\"keccak256\":\"0x0a9d680f18372c00a8e706f4656647edc7a3973a1d1974bf2a59fe319a3150ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461004557733879e146140b627a5c858a08e507b171d9e4313960018060a01b03198181600354161760035560025416176002556124da908161004b8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c80630f79a09014610fae5780636a15c7881461046757806390a4cb9b14610411578063b581fbe3146103ea578063c06d5ba91461016c578063c428a278146100c9578063c9640c09146100a05763eb0cde1d1461007557600080fd5b3461009d578060031936011261009d576002546040516001600160a01b039091168152602090f35b80fd5b503461009d578060031936011261009d576003546040516001600160a01b039091168152602090f35b503461009d57602036600319011261009d576040906004358152806020522080546100f660018301611476565b9161010360028201611476565b61015b61011260038401611476565b61014d60ff60076006870154960154169361013f604051988998895260c060208a015260c089019061151c565b90878203604089015261151c565b90858203606087015261151c565b916080840152151560a08301520390f35b5060a060031981813601126103e657600435926024359182151583036103e1576001600160401b036064358181116103dd576101ac903690600401611321565b909260843592831161039d576101209083360301126103dd5786845260209484865260ff600760408720015416156103a95787855284865260408520600701805460ff19169055156103a1576002546001600160a01b031691823b1561039d579161023993918593604051958694859384936339624a6b60e21b85526004019133604435600487016115ae565b039134905af180156103925790829161037e575b50505b83815280825260066040822001549181925b858352828252600590816040852001548510156103555783808080610318600460408320016102968b896040862001611424565b919054600392831b1c8452895260408320978d8452838a526102bc826040862001611476565b90604051926102ca84611255565b8a5484526102da60018c01611476565b8c8501526102ea60028c01611476565b60408501528a01546001600160a01b03166060840181905260048b015460808501529901548d83015261173d565b809682821561034c575bf1156103415761033b91610335916116f7565b9361171a565b92610262565b6040513d85823e3d90fd5b506108fc610322565b83877fe9f7d7fd0b133404f0ccff737d6f3594748e04bc5507adfaed35835ef98937118280a280f35b61038790611242565b61009d57803861024d565b6040513d84823e3d90fd5b8480fd5b505050610250565b60405162461bcd60e51b815260048101879052600c60248201526b149bdd5b990818db1bdcd95960a21b6044820152606490fd5b8380fd5b600080fd5b8280fd5b503461009d57602036600319011261009d576020610409600435611871565b604051908152f35b503461009d57602036600319011261009d576004356001548110156104635760209060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154604051908152f35b5080fd5b5061018036600319011261009d576024356001600160401b0381116104635761049490369060040161134e565b6044356001600160401b0381116103e6576104b390369060040161134e565b906064356001600160401b0381116103dd576104d390369060040161134e565b926084356001600160401b038111610463576104f39036906004016112c3565b60a4356001600160401b0381116103e6576105129036906004016113a4565b9460c4356001600160401b0381116103dd576105329036906004016113a4565b9060e435906001600160401b03821161039d573660238301121561039d57816004013561055e816112ac565b9261056c604051948561128b565b8184526024602085019260051b82010190368211610eec57602401915b818310610f8a5750505061010435151561010435036103e157610144356001600160401b038111610f86576105c2903690600401611321565b6001600160401b036101643511610f82576101206101643536036003190112610f825785518a518091149081610f77575b5080610f6c575b15610f27576004358752866020526040872054610ef05761010435610e75575b50506004358552846020526040852096600435885586516001600160401b038111610da65761064c60018a015461143c565b601f8111610e30575b50806020601f8211600114610dc5578891610dba575b508160011b916000199060031b1c19161760018901555b8051906001600160401b038211610da65781906106a260028b015461143c565b601f8111610d55575b50602090601f8311600114610ce6578892610cdb575b50508160011b916000199060031b1c19161760028801555b8051906001600160401b038211610cc75781906106f960038a015461143c565b601f8111610c76575b50602090601f8311600114610c07578792610bfc575b50508160011b916000199060031b1c19161760038701555b60078601805460ff19166001179055835b8351811015610b1f576107548185611729565b518552600487016020526040852054610ae6576107718185611729565b5161077c828a611729565b51906107888386611729565b516001600160a01b0361079b8587611729565b511690604051926107ab84611255565b835260208301938452604083015260608201528660808201528660a08201526107d48387611729565b51875260048901602052604087209181518355518051906001600160401b038211610a07578190610808600186015461143c565b601f8111610a95575b50602090601f8311600114610a26578a92610a1b575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211610a0757610862600285015461143c565b601f81116109c2575b50602090601f83116001146109505791806005949260a0948c92610945575b50508160011b916000199060031b1c19161760028501555b60038401600180841b036060830151166bffffffffffffffffffffffff841b8254161790556080810151600485015501519101556108e08185611729565b5190600588015491600160401b83101561092f5761090d83600161092a950160058c015560058b01611424565b819291549060031b600019811b9283911b1691191617905561171a565b610741565b634e487b7160e01b600052604160045260246000fd5b01519050388061088a565b90600285018a5260208a20918a5b601f19851681106109aa5750926005949260019260a09583601f19811610610991575b505050811b0160028501556108a2565b015160001960f88460031b161c19169055388080610981565b9192602060018192868501518155019401920161095e565b600285018a5260208a20601f840160051c810160208510610a00575b601f830160051c820181106109f457505061086b565b600081556001016109de565b50806109de565b634e487b7160e01b89526041600452602489fd5b015190503880610827565b9250600185018a5260208a20908a935b601f1984168510610a7a576001945083601f19811610610a61575b505050811b01600183015561083f565b015160001960f88460031b161c19169055388080610a51565b81810151835560209485019460019093019290910190610a36565b909150600185018a5260208a20601f840160051c810160208510610adf575b90849392915b601f830160051c82018110610ad0575050610811565b60008155859450600101610aba565b5080610ab4565b60405162461bcd60e51b815260206004820152601160248201527050726f6a6563742049442065786973747360781b6044820152606490fd5b50505082600154600160401b81101561092f576001810180600155811015610be6576001600052600435907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155610b826040519160408352604083019061151c565b818103602083015260208084519283815201930190845b818110610bd057505050807f2fceaf42a6664f3294222799a359650844542179732d12b26b6926bd338479a591600435930390a280f35b8251855260209485019490920191600101610b99565b634e487b7160e01b600052603260045260246000fd5b015190503880610718565b9250600389018752602087209087935b601f1984168510610c5b576001945083601f19811610610c42575b505050811b016003870155610730565b015160001960f88460031b161c19169055388080610c32565b81810151835560209485019460019093019290910190610c17565b90915060038901875260208720601f840160051c810160208510610cc0575b90849392915b601f830160051c82018110610cb1575050610702565b60008155859450600101610c9b565b5080610c95565b634e487b7160e01b86526041600452602486fd5b0151905038806106c1565b925060028a018852602088209088935b601f1984168510610d3a576001945083601f19811610610d21575b505050811b0160028801556106d9565b015160001960f88460031b161c19169055388080610d11565b81810151835560209485019460019093019290910190610cf6565b90915060028a01885260208820601f840160051c810160208510610d9f575b90849392915b601f830160051c82018110610d905750506106ab565b60008155859450600101610d7a565b5080610d74565b634e487b7160e01b87526041600452602487fd5b90508801513861066b565b915060018a0188526020882088925b8a601f1984168510610e1957506001935082601f19811610610e00575b5050811b016001890155610682565b8a015160001960f88460031b161c191690553880610df1565b810151825560209384019360019092019101610dd4565b60018a01885260208820601f830160051c810160208410610e6e575b601f830160051c82018110610e62575050610655565b60008155600101610e4c565b5080610e4c565b6002546001600160a01b031690813b15610eec57918791610eb9936040518095819482936339624a6b60e21b845261016435600401913361012435600487016115ae565b039134905af18015610ee1579086911561061a57610ed690611242565b61039d57843861061a565b6040513d88823e3d90fd5b8780fd5b60405162461bcd60e51b815260206004820152600f60248201526e526f756e642049442065786973747360881b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4d69736d61746368656420696e707574206172726179730000000000000000006044820152606490fd5b5084518451146105fa565b9050855114386105f3565b8680fd5b8580fd5b82356001600160a01b0381168103610faa57815260209283019201610589565b8880fd5b5060031960c036820112610463576004359060249283356001600160401b03908181116103e657610fe39036906004016112c3565b906044803582811161039d57610ffd9036906004016112c3565b92608435838111610f8657611016903690600401611321565b97909660a435948511610f8257610120908536030112610f865780865260209386855260ff60076040892001541680611235575b1561120257869787985b87518a10156110f257838952888752600460408a20016110748b87611729565b518a5287526040892054156110ba5761108d8a89611729565b5181018091116110a7576110a1909961171a565b98611054565b634e487b7160e01b895260116004528b89fd5b5060405162461bcd60e51b8152600481018790526011818d015270141c9bda9958dd081b9bdd08199bdd5b99607a1b81870152606490fd5b935089889693958c8634106111cb5750506002548792916001600160a01b039091169061111f87346116f7565b823b1561039d5761114f95604051968795869485936339624a6b60e21b85526004019133606435600487016115ae565b03925af180156111c05761118d575b507fd2dff949d20e874cc6ba1dcefb840fb8cf6000a4197bfb69accfea5a32443ff5906040519283523392a380f35b936111b97fd2dff949d20e874cc6ba1dcefb840fb8cf6000a4197bfb69accfea5a32443ff59295611242565b939061115e565b6040513d87823e3d90fd5b71496e73756666696369656e742066756e647360701b606492601288936040519462461bcd60e51b86526004860152840152820152fd5b60405162461bcd60e51b815260048101869052600d818c01526c125b9d985b1a59081c9bdd5b99609a1b81860152606490fd5b506040872054151561104a565b6001600160401b03811161092f57604052565b60c081019081106001600160401b0382111761092f57604052565b604081019081106001600160401b0382111761092f57604052565b90601f801991011681019081106001600160401b0382111761092f57604052565b6001600160401b03811161092f5760051b60200190565b81601f820112156103e1578035916112da836112ac565b926112e8604051948561128b565b808452602092838086019260051b8201019283116103e1578301905b828210611312575050505090565b81358152908301908301611304565b9181601f840112156103e1578235916001600160401b0383116103e157602083818601950101116103e157565b81601f820112156103e1578035906001600160401b03821161092f5760405192611382601f8401601f19166020018561128b565b828452602083830101116103e157816000926020809301838601378301015290565b9080601f830112156103e1578135906113bc826112ac565b926113ca604051948561128b565b828452602092838086019160051b830101928084116103e157848301915b8483106113f85750505050505090565b82356001600160401b0381116103e15786916114198484809489010161134e565b8152019201916113e8565b8054821015610be65760005260206000200190600090565b90600182811c9216801561146c575b602083101461145657565b634e487b7160e01b600052602260045260246000fd5b91607f169161144b565b906040519182600082549261148a8461143c565b9081845260019485811690816000146114f957506001146114b6575b50506114b49250038361128b565b565b9093915060005260209081600020936000915b8183106114e15750506114b4935082010138806114a6565b855488840185015294850194879450918301916114c9565b9150506114b494506020925060ff191682840152151560051b82010138806114a6565b919082519283825260005b848110611548575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611527565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e19823603018112156103e15701602081359101916001600160401b0382116103e15781360383136103e157565b9081526001600160a01b0390911660208201526080604082018190529093926115da929185019161155c565b91606081840391015261167661165b61164061162561160a6115fc868061157d565b610120808a5289019161155c565b611617602087018761157d565b9088830360208a015261155c565b611632604086018661157d565b90878303604089015261155c565b61164d606085018561157d565b90868303606088015261155c565b611668608084018461157d565b90858303608087015261155c565b9160a08201356bffffffffffffffffffffffff60a01b81168091036103e15760a082015260c082013563ffffffff81168091036103e1576116f4936116d59160c08401526116c760e085018561157d565b9084830360e086015261155c565b916116e6610100918281019061157d565b92909181850391015261155c565b90565b9190820391821161170457565b634e487b7160e01b600052601160045260246000fd5b60001981146117045760010190565b8051821015610be65760209160051b010190565b91906000928051907fedf81ebead6d93d5a50fcae242a8fdaee8dd1dc1364c1797d226dd413829325d602082019283206851756164726174696360b81b602060405161178881611270565b600981520152036117b057505060a09192500151808002908082048114901517156117045790565b7f16061f58256c86e6eb7d166e78be192f96e51b4ccf2d8de3d9fbf3c6cbdb9bb581518320652634b732b0b960d11b60206040516117ed81611270565b60068152015203611802575050608001519150565b907fffc25bbac3c0f11e5f42129c294b0811b34f89c025119e86ce05965782d13dcf915190206a115e1c1bdb995b9d1a585b60aa1b602060405161184581611270565b600b81520152146118535750565b61186291925060a00151611871565b60001981019081116117045790565b677fffffffffffffff81116103e15761188f9060401b600f0b6118a9565b600f0b600081126103e15760401d6001600160401b031690565b600f0b600160461b8112156103e157683fffffffffffffffff1981126118eb57700171547652b82fe1777d0ffda0d23a7d126116f4910260801d600f0b6118f1565b50600090565b600f81810b600160461b8112156103e157683fffffffffffffffff19811261249c576001607f1b90600093846780000000000000008216850b13612484575b846740000000000000008216850b13612467575b846720000000000000008216850b1361244a575b846710000000000000008216850b1361242d575b846708000000000000008216850b13612410575b846704000000000000008216850b136123f3575b846702000000000000008216850b136123d6575b846701000000000000008216850b136123b9575b8466800000000000008216850b1361239c575b8466400000000000008216850b1361237f575b8466200000000000008216850b13612362575b8466100000000000008216850b13612345575b8466080000000000008216850b13612328575b8466040000000000008216850b1361230b575b8466020000000000008216850b136122ee575b8466010000000000008216850b136122d1575b84658000000000008216850b136122b4575b84654000000000008216850b13612297575b84652000000000008216850b1361227a575b84651000000000008216850b1361225d575b84650800000000008216850b13612240575b84650400000000008216850b13612223575b84650200000000008216850b13612206575b84650100000000008216850b136121e9575b846480000000008216850b136121cc575b846440000000008216850b136121af575b846420000000008216850b13612192575b846410000000008216850b13612175575b846408000000008216850b13612158575b846404000000008216850b1361213b575b846402000000008216850b1361211e575b846401000000008216850b13612101575b8463800000008216850b136120e4575b8463400000008216850b136120c7575b8463200000008216850b136120aa575b8463100000008216850b1361208d575b8463080000008216850b13612070575b8463040000008216850b13612053575b8463020000008216850b13612036575b8463010000008216850b13612019575b84628000008216850b13611ffc575b84624000008216850b13611fdf575b84622000008216850b13611fc2575b84621000008216850b13611fa5575b84620800008216850b13611f88575b84620400008216850b13611f6b575b84620200008216850b13611f4e575b84620100008216850b13611f31575b846180008216850b13611f14575b846140008216850b13611ef7575b846120008216850b13611eda575b846110008216850b13611ebd575b846108008216850b13611ea0575b846104008216850b13611e83575b846102008216850b13611e66575b846101008216850b13611e49575b8460809181838216870b13611e2d575b8160408216870b13611e11575b8160208216870b13611df5575b8160108216870b13611dd9575b8160088216870b13611dbd575b8160048216870b13611da1575b8160028216870b13611d84575b600116850b13611d66575b5060401d820b603f03820b1c916f7fffffffffffffffffffffffffffffff831161009d57500b90565b909170010000000000000000b17217f7d1cf79ab02901c9038611d3d565b7001000000000000000162e42fefa39ef358909402821c93611d32565b9370010000000000000002c5c85fdf473de6b202821c93611d25565b93700100000000000000058b90bfbe8e7bcd6d02821c93611d18565b937001000000000000000b17217f7d1cf79afa02821c93611d0b565b93700100000000000000162e42fefa39ef366f02821c93611cfe565b937001000000000000002c5c85fdf473de6eca02821c93611cf1565b9370010000000000000058b90bfbe8e7bce54402821c93611ce4565b91700100000000000000b17217f7d1cf79e9490260801c91611cd4565b9170010000000000000162e42fefa39ef44d910260801c91611cc6565b91700100000000000002c5c85fdf473dea871f0260801c91611cb8565b917001000000000000058b90bfbe8e7bdcbe2e0260801c91611caa565b9170010000000000000b17217f7d1cf7d83c1a0260801c91611c9c565b917001000000000000162e42fefa39f02b772c0260801c91611c8e565b9170010000000000002c5c85fdf473e242ea380260801c91611c80565b91700100000000000058b90bfbe8e7cc35c3f00260801c91611c72565b917001000000000000b17217f7d1cfb72b45e10260801c91611c64565b91700100000000000162e42fefa39fe95583c20260801c91611c55565b917001000000000002c5c85fdf4741bea6e77e0260801c91611c46565b9170010000000000058b90bfbe8e8b2d3d4ede0260801c91611c37565b91700100000000000b17217f7d1d351a389d400260801c91611c28565b9170010000000000162e42fefa3ae53369388c0260801c91611c19565b91700100000000002c5c85fdf477b662b269450260801c91611c0a565b917001000000000058b90bfbe8f71cb4e4b33d0260801c91611bfb565b9170010000000000b17217f7d20cf927c8e94c0260801c91611bec565b917001000000000162e42fefa494f1478fde050260801c91611bdc565b9170010000000002c5c85fdf4b15de6f17eb0d0260801c91611bcc565b91700100000000058b90bfbe9ddbac5e109cce0260801c91611bbc565b917001000000000b17217f7d5a7716bba4a9ae0260801c91611bac565b91700100000000162e42fefb2fed257559bdaa0260801c91611b9c565b917001000000002c5c85fdf84bd62ae30a74cc0260801c91611b8c565b9170010000000058b90bfbf8479bd5a81b51ad0260801c91611b7c565b91700100000000b17217f80f4ef5aadda455540260801c91611b6c565b9170010000000162e42ff0999ce3541b9fffcf0260801c91611b5b565b91700100000002c5c85fe31f35a6a30da1be500260801c91611b4a565b917001000000058b90bfcdee5acd3c1cedc8230260801c91611b39565b9170010000000b17217fba9c739aa5819f44f90260801c91611b28565b917001000000162e42fff037df38aa2b219f060260801c91611b17565b9170010000002c5c8601cc6b9e94213c72737a0260801c91611b06565b91700100000058b90c0b48c6be5df846c5b2ef0260801c91611af5565b917001000000b1721835514b86e6d96efd1bfe0260801c91611ae4565b91700100000162e430e5a18f6119e3c02282a50260801c91611ad2565b917001000002c5c863b73f016468f6bac5ca2b0260801c91611ac0565b9170010000058b90cf1e6d97f9ca14dbcc16280260801c91611aae565b91700100000b1721bcfc99d9f890ea069117630260801c91611a9c565b9170010000162e43f4f831060e02d839a9d16d0260801c91611a8a565b91700100002c5c89d5ec6ca4d7c8acc017b7c90260801c91611a78565b917001000058b91b5bc9ae2eed81e9b7d4cfab0260801c91611a66565b9170010000b17255775c040618bf4a4ade83fc0260801c91611a54565b917001000162e525ee054754457d59952920260260801c91611a41565b9170010002c5cc37da9491d0985c348c68e7b30260801c91611a2e565b91700100058ba01fb9f96d6cacd4b180917c3d0260801c91611a1b565b917001000b175effdc76ba38e31671ca9397250260801c91611a08565b91700100162f3904051fa128bca9c55c31e5df0260801c916119f5565b917001002c605e2e8cec506d21bfc89a23a00f0260801c916119e2565b9170010058c86da1c09ea1ff19d294cf2f679b0260801c916119cf565b91700100b1afa5abcbed6129ab13ec11dc95430260801c916119bc565b9170010163da9fb33356d84a66ae336dcdfa3f0260801c916119a8565b91700102c9a3e778060ee6f7caca4f7a29bde80260801c91611994565b917001059b0d31585743ae7c548eb68ca417fd0260801c91611980565b9170010b5586cf9890f6298b92b71842a983630260801c9161196c565b917001172b83c7d517adcdf7c8c50eb14a791f0260801c91611958565b917001306fe0a31b7152de8d5a46305c85edec0260801c91611944565b6fb504f333f9de6484597d89b3754abe9f9250611930565b50505060009056fea2646970667358221220f5f913a17c46b325b76ef9a98e9075bdf770c40215e091b5900220acd1f5031e64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c80630f79a09014610fae5780636a15c7881461046757806390a4cb9b14610411578063b581fbe3146103ea578063c06d5ba91461016c578063c428a278146100c9578063c9640c09146100a05763eb0cde1d1461007557600080fd5b3461009d578060031936011261009d576002546040516001600160a01b039091168152602090f35b80fd5b503461009d578060031936011261009d576003546040516001600160a01b039091168152602090f35b503461009d57602036600319011261009d576040906004358152806020522080546100f660018301611476565b9161010360028201611476565b61015b61011260038401611476565b61014d60ff60076006870154960154169361013f604051988998895260c060208a015260c089019061151c565b90878203604089015261151c565b90858203606087015261151c565b916080840152151560a08301520390f35b5060a060031981813601126103e657600435926024359182151583036103e1576001600160401b036064358181116103dd576101ac903690600401611321565b909260843592831161039d576101209083360301126103dd5786845260209484865260ff600760408720015416156103a95787855284865260408520600701805460ff19169055156103a1576002546001600160a01b031691823b1561039d579161023993918593604051958694859384936339624a6b60e21b85526004019133604435600487016115ae565b039134905af180156103925790829161037e575b50505b83815280825260066040822001549181925b858352828252600590816040852001548510156103555783808080610318600460408320016102968b896040862001611424565b919054600392831b1c8452895260408320978d8452838a526102bc826040862001611476565b90604051926102ca84611255565b8a5484526102da60018c01611476565b8c8501526102ea60028c01611476565b60408501528a01546001600160a01b03166060840181905260048b015460808501529901548d83015261173d565b809682821561034c575bf1156103415761033b91610335916116f7565b9361171a565b92610262565b6040513d85823e3d90fd5b506108fc610322565b83877fe9f7d7fd0b133404f0ccff737d6f3594748e04bc5507adfaed35835ef98937118280a280f35b61038790611242565b61009d57803861024d565b6040513d84823e3d90fd5b8480fd5b505050610250565b60405162461bcd60e51b815260048101879052600c60248201526b149bdd5b990818db1bdcd95960a21b6044820152606490fd5b8380fd5b600080fd5b8280fd5b503461009d57602036600319011261009d576020610409600435611871565b604051908152f35b503461009d57602036600319011261009d576004356001548110156104635760209060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154604051908152f35b5080fd5b5061018036600319011261009d576024356001600160401b0381116104635761049490369060040161134e565b6044356001600160401b0381116103e6576104b390369060040161134e565b906064356001600160401b0381116103dd576104d390369060040161134e565b926084356001600160401b038111610463576104f39036906004016112c3565b60a4356001600160401b0381116103e6576105129036906004016113a4565b9460c4356001600160401b0381116103dd576105329036906004016113a4565b9060e435906001600160401b03821161039d573660238301121561039d57816004013561055e816112ac565b9261056c604051948561128b565b8184526024602085019260051b82010190368211610eec57602401915b818310610f8a5750505061010435151561010435036103e157610144356001600160401b038111610f86576105c2903690600401611321565b6001600160401b036101643511610f82576101206101643536036003190112610f825785518a518091149081610f77575b5080610f6c575b15610f27576004358752866020526040872054610ef05761010435610e75575b50506004358552846020526040852096600435885586516001600160401b038111610da65761064c60018a015461143c565b601f8111610e30575b50806020601f8211600114610dc5578891610dba575b508160011b916000199060031b1c19161760018901555b8051906001600160401b038211610da65781906106a260028b015461143c565b601f8111610d55575b50602090601f8311600114610ce6578892610cdb575b50508160011b916000199060031b1c19161760028801555b8051906001600160401b038211610cc75781906106f960038a015461143c565b601f8111610c76575b50602090601f8311600114610c07578792610bfc575b50508160011b916000199060031b1c19161760038701555b60078601805460ff19166001179055835b8351811015610b1f576107548185611729565b518552600487016020526040852054610ae6576107718185611729565b5161077c828a611729565b51906107888386611729565b516001600160a01b0361079b8587611729565b511690604051926107ab84611255565b835260208301938452604083015260608201528660808201528660a08201526107d48387611729565b51875260048901602052604087209181518355518051906001600160401b038211610a07578190610808600186015461143c565b601f8111610a95575b50602090601f8311600114610a26578a92610a1b575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211610a0757610862600285015461143c565b601f81116109c2575b50602090601f83116001146109505791806005949260a0948c92610945575b50508160011b916000199060031b1c19161760028501555b60038401600180841b036060830151166bffffffffffffffffffffffff841b8254161790556080810151600485015501519101556108e08185611729565b5190600588015491600160401b83101561092f5761090d83600161092a950160058c015560058b01611424565b819291549060031b600019811b9283911b1691191617905561171a565b610741565b634e487b7160e01b600052604160045260246000fd5b01519050388061088a565b90600285018a5260208a20918a5b601f19851681106109aa5750926005949260019260a09583601f19811610610991575b505050811b0160028501556108a2565b015160001960f88460031b161c19169055388080610981565b9192602060018192868501518155019401920161095e565b600285018a5260208a20601f840160051c810160208510610a00575b601f830160051c820181106109f457505061086b565b600081556001016109de565b50806109de565b634e487b7160e01b89526041600452602489fd5b015190503880610827565b9250600185018a5260208a20908a935b601f1984168510610a7a576001945083601f19811610610a61575b505050811b01600183015561083f565b015160001960f88460031b161c19169055388080610a51565b81810151835560209485019460019093019290910190610a36565b909150600185018a5260208a20601f840160051c810160208510610adf575b90849392915b601f830160051c82018110610ad0575050610811565b60008155859450600101610aba565b5080610ab4565b60405162461bcd60e51b815260206004820152601160248201527050726f6a6563742049442065786973747360781b6044820152606490fd5b50505082600154600160401b81101561092f576001810180600155811015610be6576001600052600435907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155610b826040519160408352604083019061151c565b818103602083015260208084519283815201930190845b818110610bd057505050807f2fceaf42a6664f3294222799a359650844542179732d12b26b6926bd338479a591600435930390a280f35b8251855260209485019490920191600101610b99565b634e487b7160e01b600052603260045260246000fd5b015190503880610718565b9250600389018752602087209087935b601f1984168510610c5b576001945083601f19811610610c42575b505050811b016003870155610730565b015160001960f88460031b161c19169055388080610c32565b81810151835560209485019460019093019290910190610c17565b90915060038901875260208720601f840160051c810160208510610cc0575b90849392915b601f830160051c82018110610cb1575050610702565b60008155859450600101610c9b565b5080610c95565b634e487b7160e01b86526041600452602486fd5b0151905038806106c1565b925060028a018852602088209088935b601f1984168510610d3a576001945083601f19811610610d21575b505050811b0160028801556106d9565b015160001960f88460031b161c19169055388080610d11565b81810151835560209485019460019093019290910190610cf6565b90915060028a01885260208820601f840160051c810160208510610d9f575b90849392915b601f830160051c82018110610d905750506106ab565b60008155859450600101610d7a565b5080610d74565b634e487b7160e01b87526041600452602487fd5b90508801513861066b565b915060018a0188526020882088925b8a601f1984168510610e1957506001935082601f19811610610e00575b5050811b016001890155610682565b8a015160001960f88460031b161c191690553880610df1565b810151825560209384019360019092019101610dd4565b60018a01885260208820601f830160051c810160208410610e6e575b601f830160051c82018110610e62575050610655565b60008155600101610e4c565b5080610e4c565b6002546001600160a01b031690813b15610eec57918791610eb9936040518095819482936339624a6b60e21b845261016435600401913361012435600487016115ae565b039134905af18015610ee1579086911561061a57610ed690611242565b61039d57843861061a565b6040513d88823e3d90fd5b8780fd5b60405162461bcd60e51b815260206004820152600f60248201526e526f756e642049442065786973747360881b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4d69736d61746368656420696e707574206172726179730000000000000000006044820152606490fd5b5084518451146105fa565b9050855114386105f3565b8680fd5b8580fd5b82356001600160a01b0381168103610faa57815260209283019201610589565b8880fd5b5060031960c036820112610463576004359060249283356001600160401b03908181116103e657610fe39036906004016112c3565b906044803582811161039d57610ffd9036906004016112c3565b92608435838111610f8657611016903690600401611321565b97909660a435948511610f8257610120908536030112610f865780865260209386855260ff60076040892001541680611235575b1561120257869787985b87518a10156110f257838952888752600460408a20016110748b87611729565b518a5287526040892054156110ba5761108d8a89611729565b5181018091116110a7576110a1909961171a565b98611054565b634e487b7160e01b895260116004528b89fd5b5060405162461bcd60e51b8152600481018790526011818d015270141c9bda9958dd081b9bdd08199bdd5b99607a1b81870152606490fd5b935089889693958c8634106111cb5750506002548792916001600160a01b039091169061111f87346116f7565b823b1561039d5761114f95604051968795869485936339624a6b60e21b85526004019133606435600487016115ae565b03925af180156111c05761118d575b507fd2dff949d20e874cc6ba1dcefb840fb8cf6000a4197bfb69accfea5a32443ff5906040519283523392a380f35b936111b97fd2dff949d20e874cc6ba1dcefb840fb8cf6000a4197bfb69accfea5a32443ff59295611242565b939061115e565b6040513d87823e3d90fd5b71496e73756666696369656e742066756e647360701b606492601288936040519462461bcd60e51b86526004860152840152820152fd5b60405162461bcd60e51b815260048101869052600d818c01526c125b9d985b1a59081c9bdd5b99609a1b81860152606490fd5b506040872054151561104a565b6001600160401b03811161092f57604052565b60c081019081106001600160401b0382111761092f57604052565b604081019081106001600160401b0382111761092f57604052565b90601f801991011681019081106001600160401b0382111761092f57604052565b6001600160401b03811161092f5760051b60200190565b81601f820112156103e1578035916112da836112ac565b926112e8604051948561128b565b808452602092838086019260051b8201019283116103e1578301905b828210611312575050505090565b81358152908301908301611304565b9181601f840112156103e1578235916001600160401b0383116103e157602083818601950101116103e157565b81601f820112156103e1578035906001600160401b03821161092f5760405192611382601f8401601f19166020018561128b565b828452602083830101116103e157816000926020809301838601378301015290565b9080601f830112156103e1578135906113bc826112ac565b926113ca604051948561128b565b828452602092838086019160051b830101928084116103e157848301915b8483106113f85750505050505090565b82356001600160401b0381116103e15786916114198484809489010161134e565b8152019201916113e8565b8054821015610be65760005260206000200190600090565b90600182811c9216801561146c575b602083101461145657565b634e487b7160e01b600052602260045260246000fd5b91607f169161144b565b906040519182600082549261148a8461143c565b9081845260019485811690816000146114f957506001146114b6575b50506114b49250038361128b565b565b9093915060005260209081600020936000915b8183106114e15750506114b4935082010138806114a6565b855488840185015294850194879450918301916114c9565b9150506114b494506020925060ff191682840152151560051b82010138806114a6565b919082519283825260005b848110611548575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611527565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e19823603018112156103e15701602081359101916001600160401b0382116103e15781360383136103e157565b9081526001600160a01b0390911660208201526080604082018190529093926115da929185019161155c565b91606081840391015261167661165b61164061162561160a6115fc868061157d565b610120808a5289019161155c565b611617602087018761157d565b9088830360208a015261155c565b611632604086018661157d565b90878303604089015261155c565b61164d606085018561157d565b90868303606088015261155c565b611668608084018461157d565b90858303608087015261155c565b9160a08201356bffffffffffffffffffffffff60a01b81168091036103e15760a082015260c082013563ffffffff81168091036103e1576116f4936116d59160c08401526116c760e085018561157d565b9084830360e086015261155c565b916116e6610100918281019061157d565b92909181850391015261155c565b90565b9190820391821161170457565b634e487b7160e01b600052601160045260246000fd5b60001981146117045760010190565b8051821015610be65760209160051b010190565b91906000928051907fedf81ebead6d93d5a50fcae242a8fdaee8dd1dc1364c1797d226dd413829325d602082019283206851756164726174696360b81b602060405161178881611270565b600981520152036117b057505060a09192500151808002908082048114901517156117045790565b7f16061f58256c86e6eb7d166e78be192f96e51b4ccf2d8de3d9fbf3c6cbdb9bb581518320652634b732b0b960d11b60206040516117ed81611270565b60068152015203611802575050608001519150565b907fffc25bbac3c0f11e5f42129c294b0811b34f89c025119e86ce05965782d13dcf915190206a115e1c1bdb995b9d1a585b60aa1b602060405161184581611270565b600b81520152146118535750565b61186291925060a00151611871565b60001981019081116117045790565b677fffffffffffffff81116103e15761188f9060401b600f0b6118a9565b600f0b600081126103e15760401d6001600160401b031690565b600f0b600160461b8112156103e157683fffffffffffffffff1981126118eb57700171547652b82fe1777d0ffda0d23a7d126116f4910260801d600f0b6118f1565b50600090565b600f81810b600160461b8112156103e157683fffffffffffffffff19811261249c576001607f1b90600093846780000000000000008216850b13612484575b846740000000000000008216850b13612467575b846720000000000000008216850b1361244a575b846710000000000000008216850b1361242d575b846708000000000000008216850b13612410575b846704000000000000008216850b136123f3575b846702000000000000008216850b136123d6575b846701000000000000008216850b136123b9575b8466800000000000008216850b1361239c575b8466400000000000008216850b1361237f575b8466200000000000008216850b13612362575b8466100000000000008216850b13612345575b8466080000000000008216850b13612328575b8466040000000000008216850b1361230b575b8466020000000000008216850b136122ee575b8466010000000000008216850b136122d1575b84658000000000008216850b136122b4575b84654000000000008216850b13612297575b84652000000000008216850b1361227a575b84651000000000008216850b1361225d575b84650800000000008216850b13612240575b84650400000000008216850b13612223575b84650200000000008216850b13612206575b84650100000000008216850b136121e9575b846480000000008216850b136121cc575b846440000000008216850b136121af575b846420000000008216850b13612192575b846410000000008216850b13612175575b846408000000008216850b13612158575b846404000000008216850b1361213b575b846402000000008216850b1361211e575b846401000000008216850b13612101575b8463800000008216850b136120e4575b8463400000008216850b136120c7575b8463200000008216850b136120aa575b8463100000008216850b1361208d575b8463080000008216850b13612070575b8463040000008216850b13612053575b8463020000008216850b13612036575b8463010000008216850b13612019575b84628000008216850b13611ffc575b84624000008216850b13611fdf575b84622000008216850b13611fc2575b84621000008216850b13611fa5575b84620800008216850b13611f88575b84620400008216850b13611f6b575b84620200008216850b13611f4e575b84620100008216850b13611f31575b846180008216850b13611f14575b846140008216850b13611ef7575b846120008216850b13611eda575b846110008216850b13611ebd575b846108008216850b13611ea0575b846104008216850b13611e83575b846102008216850b13611e66575b846101008216850b13611e49575b8460809181838216870b13611e2d575b8160408216870b13611e11575b8160208216870b13611df5575b8160108216870b13611dd9575b8160088216870b13611dbd575b8160048216870b13611da1575b8160028216870b13611d84575b600116850b13611d66575b5060401d820b603f03820b1c916f7fffffffffffffffffffffffffffffff831161009d57500b90565b909170010000000000000000b17217f7d1cf79ab02901c9038611d3d565b7001000000000000000162e42fefa39ef358909402821c93611d32565b9370010000000000000002c5c85fdf473de6b202821c93611d25565b93700100000000000000058b90bfbe8e7bcd6d02821c93611d18565b937001000000000000000b17217f7d1cf79afa02821c93611d0b565b93700100000000000000162e42fefa39ef366f02821c93611cfe565b937001000000000000002c5c85fdf473de6eca02821c93611cf1565b9370010000000000000058b90bfbe8e7bce54402821c93611ce4565b91700100000000000000b17217f7d1cf79e9490260801c91611cd4565b9170010000000000000162e42fefa39ef44d910260801c91611cc6565b91700100000000000002c5c85fdf473dea871f0260801c91611cb8565b917001000000000000058b90bfbe8e7bdcbe2e0260801c91611caa565b9170010000000000000b17217f7d1cf7d83c1a0260801c91611c9c565b917001000000000000162e42fefa39f02b772c0260801c91611c8e565b9170010000000000002c5c85fdf473e242ea380260801c91611c80565b91700100000000000058b90bfbe8e7cc35c3f00260801c91611c72565b917001000000000000b17217f7d1cfb72b45e10260801c91611c64565b91700100000000000162e42fefa39fe95583c20260801c91611c55565b917001000000000002c5c85fdf4741bea6e77e0260801c91611c46565b9170010000000000058b90bfbe8e8b2d3d4ede0260801c91611c37565b91700100000000000b17217f7d1d351a389d400260801c91611c28565b9170010000000000162e42fefa3ae53369388c0260801c91611c19565b91700100000000002c5c85fdf477b662b269450260801c91611c0a565b917001000000000058b90bfbe8f71cb4e4b33d0260801c91611bfb565b9170010000000000b17217f7d20cf927c8e94c0260801c91611bec565b917001000000000162e42fefa494f1478fde050260801c91611bdc565b9170010000000002c5c85fdf4b15de6f17eb0d0260801c91611bcc565b91700100000000058b90bfbe9ddbac5e109cce0260801c91611bbc565b917001000000000b17217f7d5a7716bba4a9ae0260801c91611bac565b91700100000000162e42fefb2fed257559bdaa0260801c91611b9c565b917001000000002c5c85fdf84bd62ae30a74cc0260801c91611b8c565b9170010000000058b90bfbf8479bd5a81b51ad0260801c91611b7c565b91700100000000b17217f80f4ef5aadda455540260801c91611b6c565b9170010000000162e42ff0999ce3541b9fffcf0260801c91611b5b565b91700100000002c5c85fe31f35a6a30da1be500260801c91611b4a565b917001000000058b90bfcdee5acd3c1cedc8230260801c91611b39565b9170010000000b17217fba9c739aa5819f44f90260801c91611b28565b917001000000162e42fff037df38aa2b219f060260801c91611b17565b9170010000002c5c8601cc6b9e94213c72737a0260801c91611b06565b91700100000058b90c0b48c6be5df846c5b2ef0260801c91611af5565b917001000000b1721835514b86e6d96efd1bfe0260801c91611ae4565b91700100000162e430e5a18f6119e3c02282a50260801c91611ad2565b917001000002c5c863b73f016468f6bac5ca2b0260801c91611ac0565b9170010000058b90cf1e6d97f9ca14dbcc16280260801c91611aae565b91700100000b1721bcfc99d9f890ea069117630260801c91611a9c565b9170010000162e43f4f831060e02d839a9d16d0260801c91611a8a565b91700100002c5c89d5ec6ca4d7c8acc017b7c90260801c91611a78565b917001000058b91b5bc9ae2eed81e9b7d4cfab0260801c91611a66565b9170010000b17255775c040618bf4a4ade83fc0260801c91611a54565b917001000162e525ee054754457d59952920260260801c91611a41565b9170010002c5cc37da9491d0985c348c68e7b30260801c91611a2e565b91700100058ba01fb9f96d6cacd4b180917c3d0260801c91611a1b565b917001000b175effdc76ba38e31671ca9397250260801c91611a08565b91700100162f3904051fa128bca9c55c31e5df0260801c916119f5565b917001002c605e2e8cec506d21bfc89a23a00f0260801c916119e2565b9170010058c86da1c09ea1ff19d294cf2f679b0260801c916119cf565b91700100b1afa5abcbed6129ab13ec11dc95430260801c916119bc565b9170010163da9fb33356d84a66ae336dcdfa3f0260801c916119a8565b91700102c9a3e778060ee6f7caca4f7a29bde80260801c91611994565b917001059b0d31585743ae7c548eb68ca417fd0260801c91611980565b9170010b5586cf9890f6298b92b71842a983630260801c9161196c565b917001172b83c7d517adcdf7c8c50eb14a791f0260801c91611958565b917001306fe0a31b7152de8d5a46305c85edec0260801c91611944565b6fb504f333f9de6484597d89b3754abe9f9250611930565b50505060009056fea2646970667358221220f5f913a17c46b325b76ef9a98e9075bdf770c40215e091b5900220acd1f5031e64736f6c63430008110033",
  "devdoc": {
    "author": "arjanjohan",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A smart contract for cross-chain quadratic voting developed during EthDam 24. This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2856,
        "contract": "contracts/Funding.sol:Funding",
        "label": "fundingRounds",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(FundingRound)2851_storage)"
      },
      {
        "astId": 2859,
        "contract": "contracts/Funding.sol:Funding",
        "label": "roundIds",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2862,
        "contract": "contracts/Funding.sol:Funding",
        "label": "gatewayContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IGateway)3585"
      },
      {
        "astId": 2868,
        "contract": "contracts/Funding.sol:Funding",
        "label": "gatewayAddressSepolia",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IGateway)3585": {
        "encoding": "inplace",
        "label": "contract IGateway",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(FundingRound)2851_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Funding.FundingRound)",
        "numberOfBytes": "32",
        "value": "t_struct(FundingRound)2851_storage"
      },
      "t_mapping(t_uint256,t_struct(Project)2830_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Funding.Project)",
        "numberOfBytes": "32",
        "value": "t_struct(Project)2830_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FundingRound)2851_storage": {
        "encoding": "inplace",
        "label": "struct Funding.FundingRound",
        "members": [
          {
            "astId": 2832,
            "contract": "contracts/Funding.sol:Funding",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2834,
            "contract": "contracts/Funding.sol:Funding",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2836,
            "contract": "contracts/Funding.sol:Funding",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2838,
            "contract": "contracts/Funding.sol:Funding",
            "label": "curveType",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2843,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projects",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Project)2830_storage)"
          },
          {
            "astId": 2846,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projectIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2848,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalContributions",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2850,
            "contract": "contracts/Funding.sol:Funding",
            "label": "isOpen",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Project)2830_storage": {
        "encoding": "inplace",
        "label": "struct Funding.Project",
        "members": [
          {
            "astId": 2819,
            "contract": "contracts/Funding.sol:Funding",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2821,
            "contract": "contracts/Funding.sol:Funding",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2823,
            "contract": "contracts/Funding.sol:Funding",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2825,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projectAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          },
          {
            "astId": 2827,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalContributions",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2829,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalSquareRoots",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}