{
  "address": "0xc314278217Ae8D99D95BdAb3432e174A1a483Ed1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gatewayAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "ContributionReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "ContributionReceivedInSecret",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "DistributedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "DistributedTokensInSecret",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "ProjectCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundClosedInSecret",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        }
      ],
      "name": "RoundCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundCreatedInSecret",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sendToSecret",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "closeFundingRound",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "closedFundingRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "contributed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "curveType",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "projectIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "projectNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "projectDescriptions",
          "type": "string[]"
        },
        {
          "internalType": "address payable[]",
          "name": "projectAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "sendToSecret",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "createFundingRound",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "createdFundingRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "routingInfo",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "user_key",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "user_pubkey",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "routing_code_hash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "task_destination_network",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "handle",
              "type": "string"
            },
            {
              "internalType": "bytes12",
              "name": "nonce",
              "type": "bytes12"
            },
            {
              "internalType": "uint32",
              "name": "callback_gas_limit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "payload_signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.ExecutionInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "distributeFunding",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "distributedFunding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fundingRounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "curveType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalContributions",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isDistributed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayContract",
      "outputs": [
        {
          "internalType": "contract IGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRoundIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "s",
          "type": "string"
        }
      ],
      "name": "stringToUint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x36e8d18b5d8814972eb676ec71cb28bd44f56bc9d7f7ad1d6b8d4c664147aea1",
  "receipt": {
    "to": null,
    "from": "0xbb1DF1ab33786Ac6B91d9D16b445c7b66825979e",
    "contractAddress": "0xc314278217Ae8D99D95BdAb3432e174A1a483Ed1",
    "transactionIndex": 5,
    "gasUsed": "1737650",
    "logsBloom": "0x
    "blockHash": "0xf1767a66227a6158737cad64833617e6fa8eee7f02b47333f9b509b2551e92ae",
    "transactionHash": "0x36e8d18b5d8814972eb676ec71cb28bd44f56bc9d7f7ad1d6b8d4c664147aea1",
    "logs": [],
    "blockNumber": 8659577,
    "cumulativeGasUsed": "2319374",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfaFCfceC4e29e9b4ECc8C0a3f7df1011580EEEf2"
  ],
  "numDeployments": 3,
  "solcInputHash": "b34ceb4d1c1d25694fd9dcca4461ec75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gatewayAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"ContributionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"ContributionReceivedInSecret\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"DistributedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"DistributedTokensInSecret\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundClosedInSecret\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"}],\"name\":\"RoundCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundCreatedInSecret\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendToSecret\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"closeFundingRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"closedFundingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"contributed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"curveType\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"projectNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"projectDescriptions\",\"type\":\"string[]\"},{\"internalType\":\"address payable[]\",\"name\":\"projectAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sendToSecret\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"createFundingRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"createdFundingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"routingInfo\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"user_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"user_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"routing_code_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"task_destination_network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"bytes12\",\"name\":\"nonce\",\"type\":\"bytes12\"},{\"internalType\":\"uint32\",\"name\":\"callback_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.ExecutionInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"distributeFunding\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"distributedFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundingRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"curveType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalContributions\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDistributed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayContract\",\"outputs\":[{\"internalType\":\"contract IGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRoundIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"stringToUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"arjanjohan\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A smart contract for cross-chain quadratic voting developed during EthDam 24. This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Funding.sol\":\"Funding\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Funding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"../interfaces/IGateway.sol\\\";\\nimport \\\"./JsmnSolLib.sol\\\";\\n\\n/**\\n * A smart contract for cross-chain quadratic voting developed during EthDam 24.\\n * This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.\\n * @author arjanjohan\\n */\\ncontract Funding {\\n\\t// ========================================\\n\\t//     ENUM, STRUCTS AND MAPPINGS\\n\\t// ========================================\\n\\n\\tstruct Project {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\taddress payable projectAddress;\\n\\t\\tuint256 totalContributions;\\n\\t\\tuint256 totalSquareRoots;\\n\\t}\\n\\n\\tstruct FundingRound {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\tstring curveType;\\n\\t\\tmapping(uint256 => Project) projects;\\n\\t\\tuint256[] projectIds;\\n\\t\\tuint256 totalContributions;\\n\\t\\tbool isOpen;\\n\\t\\tbool isDistributed;\\n\\t}\\n\\n\\tstruct ProjectFundingData {\\n\\t\\tstring projectId;\\n\\t\\tuint256 fundingPercentage;\\n\\t}\\n\\n\\tmapping(uint256 => FundingRound) public fundingRounds;\\n\\tuint256[] public roundIds;\\n\\n\\t// ========================================\\n\\t//     CONSTRUCTOR AND VALUES\\n\\t// ========================================\\n\\n\\tIGateway public gatewayContract;\\n\\t// address public constant gatewayAddressSepolia =\\n\\t// \\taddress(0x3879E146140b627a5C858a08e507B171D9E43139);\\n\\n\\tconstructor(address gatewayAddress) {\\n\\t\\tgatewayContract = IGateway(gatewayAddress);\\n\\t}\\n\\n\\t// ========================================\\n\\t//     EVENTS\\n\\t// ========================================\\n\\tevent RoundCreated(\\n\\t\\tuint256 indexed roundId,\\n\\t\\tstring name,\\n\\t\\tuint256[] projectIds\\n\\t);\\n\\tevent ProjectCreated(uint256 indexed projectId, string name);\\n\\n\\tevent RoundCreatedInSecret(uint256 indexed roundId);\\n\\n\\tevent ContributionReceived(address indexed contributor);\\n\\n\\tevent ContributionReceivedInSecret(uint256 indexed roundId);\\n\\n\\tevent RoundClosed(uint256 indexed roundId);\\n\\n\\tevent RoundClosedInSecret(uint256 indexed roundId);\\n\\n\\tevent DistributedTokens(uint256 indexed roundId);\\n\\n\\tevent DistributedTokensInSecret(uint256 indexed roundId);\\n\\n\\t// ========================================\\n\\t//     CORE FUNCTIONS\\n\\t// ========================================\\n\\n\\tfunction createFundingRound(\\n\\t\\tuint256 id,\\n\\t\\tstring memory name,\\n\\t\\tstring memory description,\\n\\t\\tstring memory curveType,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses,\\n\\t\\taddress userAddress,\\n\\t\\tbool sendToSecret,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\tvalidateProjectParameters(\\n\\t\\t\\tprojectIds,\\n\\t\\t\\tprojectNames,\\n\\t\\t\\tprojectDescriptions,\\n\\t\\t\\tprojectAddresses\\n\\t\\t);\\n\\t\\t// require(fundingRounds[id].id == 0, \\\"Round ID exists\\\");\\n\\n\\t\\tif (sendToSecret) {\\n\\t\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\t\\tpayloadHash,\\n\\t\\t\\t\\tuserAddress,\\n\\t\\t\\t\\troutingInfo,\\n\\t\\t\\t\\tinfo\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tFundingRound storage round = fundingRounds[id];\\n\\t\\tsetupFundingRound(\\n\\t\\t\\tround,\\n\\t\\t\\tid,\\n\\t\\t\\tname,\\n\\t\\t\\tdescription,\\n\\t\\t\\tcurveType,\\n\\t\\t\\tprojectIds,\\n\\t\\t\\tprojectNames,\\n\\t\\t\\tprojectDescriptions,\\n\\t\\t\\tprojectAddresses\\n\\t\\t);\\n\\t\\troundIds.push(id);\\n\\t\\temit RoundCreated(id, name, projectIds);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction createdFundingRound(uint256 roundId, bytes memory json) public {\\n\\t\\temit RoundCreatedInSecret(roundId);\\n\\t}\\n\\n\\tfunction contribute(\\n\\t\\taddress userAddress,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\tgatewayContract.send{\\n\\t\\t\\tvalue: estimateRequestPrice((info.callback_gas_limit * 3) / 2)\\n\\t\\t}(payloadHash, userAddress, routingInfo, info);\\n\\t\\temit ContributionReceived(userAddress);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction contributed(uint256 roundId, bytes memory json) public {\\n\\t\\temit ContributionReceivedInSecret(roundId);\\n\\t}\\n\\n\\tfunction closeFundingRound(\\n\\t\\tuint256 roundId,\\n\\t\\tbool sendToSecret,\\n\\t\\taddress userAddress,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\t// require(fundingRounds[roundId].isOpen, \\\"Round closed\\\");\\n\\t\\tfundingRounds[roundId].isOpen = false;\\n\\n\\t\\tif (sendToSecret) {\\n\\t\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\t\\tpayloadHash,\\n\\t\\t\\t\\tuserAddress,\\n\\t\\t\\t\\troutingInfo,\\n\\t\\t\\t\\tinfo\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\temit RoundClosed(roundId);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction closedFundingRound(uint256 roundId, bytes memory json) public {\\n\\t\\temit RoundClosedInSecret(roundId);\\n\\t}\\n\\n\\tfunction distributeFunding(\\n\\t\\tuint256 roundId,\\n\\t\\taddress userAddress,\\n\\t\\tbytes32 payloadHash,\\n\\t\\tstring calldata routingInfo,\\n\\t\\tIGateway.ExecutionInfo calldata info\\n\\t) public payable {\\n\\t\\t// require(!fundingRounds[roundId].isOpen, \\\"Round is not closed\\\");\\n\\t\\t// require(!fundingRounds[roundId].isDistributed, \\\"Already distributed\\\");\\n\\t\\tgatewayContract.send{ value: msg.value }(\\n\\t\\t\\tpayloadHash,\\n\\t\\t\\tuserAddress,\\n\\t\\t\\troutingInfo,\\n\\t\\t\\tinfo\\n\\t\\t);\\n\\t\\tfundingRounds[roundId].isDistributed = true;\\n\\t\\temit DistributedTokens(roundId);\\n\\t}\\n\\n\\t// callback function for secret\\n\\tfunction distributedFunding(uint256 roundId, bytes memory json) public {\\n\\t\\t// ProjectFundingData[] memory fundingData = parseFundingData(\\n\\t\\t// \\tstring(json)\\n\\t\\t// );\\n\\t\\tProjectFundingData[] memory fundingData = parseFundingDataCsv(\\n\\t\\t\\tstring(json)\\n\\t\\t);\\n\\t\\tprocessFundingRound(fundingData, roundId);\\n\\t\\temit DistributedTokensInSecret(roundId);\\n\\t}\\n\\n\\t// ========================================\\n\\t//     HELPER FUNCTIONS\\n\\t// ========================================\\n\\n\\tfunction getAllRoundIds() public view returns (uint256[] memory) {\\n\\t\\treturn roundIds;\\n\\t}\\n\\n\\tfunction validateProjectParameters(\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses\\n\\t) private pure {\\n\\t\\t// require(\\n\\t\\t// \\tprojectIds.length == projectNames.length &&\\n\\t\\t// \\t\\tprojectNames.length == projectDescriptions.length &&\\n\\t\\t// \\t\\tprojectDescriptions.length == projectAddresses.length,\\n\\t\\t// \\t\\\"Mismatched input arrays\\\"\\n\\t\\t// );\\n\\t}\\n\\n\\tfunction setupFundingRound(\\n\\t\\tFundingRound storage round,\\n\\t\\tuint256 id,\\n\\t\\tstring memory name,\\n\\t\\tstring memory description,\\n\\t\\tstring memory curveType,\\n\\t\\tuint256[] memory projectIds,\\n\\t\\tstring[] memory projectNames,\\n\\t\\tstring[] memory projectDescriptions,\\n\\t\\taddress payable[] memory projectAddresses\\n\\t) private {\\n\\t\\tround.id = id;\\n\\t\\tround.name = name;\\n\\t\\tround.description = description;\\n\\t\\tround.curveType = curveType;\\n\\t\\tround.isOpen = true;\\n\\n\\t\\tfor (uint256 i = 0; i < projectIds.length; i++) {\\n\\t\\t\\t// require(round.projects[projectIds[i]].id == 0, \\\"Project ID exists\\\");\\n\\t\\t\\tround.projects[projectIds[i]] = Project({\\n\\t\\t\\t\\tid: projectIds[i],\\n\\t\\t\\t\\tname: projectNames[i],\\n\\t\\t\\t\\tdescription: projectDescriptions[i],\\n\\t\\t\\t\\tprojectAddress: projectAddresses[i],\\n\\t\\t\\t\\ttotalContributions: 0,\\n\\t\\t\\t\\ttotalSquareRoots: 0\\n\\t\\t\\t});\\n\\t\\t\\tround.projectIds.push(projectIds[i]);\\n\\t\\t\\temit ProjectCreated(\\n\\t\\t\\t\\tround.projects[projectIds[i]].id,\\n\\t\\t\\t\\tround.projects[projectIds[i]].name\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction validRound(uint256 roundId) private view returns (bool) {\\n\\t\\treturn fundingRounds[roundId].isOpen && fundingRounds[roundId].id != 0;\\n\\t}\\n\\n\\t// Parses the JSON and extracts funding data\\n\\tfunction parseFundingDataCsv(\\n\\t\\tstring memory csvString\\n\\t) internal pure returns (ProjectFundingData[] memory) {\\n\\t\\tstring[] memory rows = split(string(csvString), \\\";\\\");\\n\\n\\t\\tProjectFundingData[] memory results = new ProjectFundingData[](\\n\\t\\t\\trows.length\\n\\t\\t);\\n\\t\\tfor (uint i = 0; i < rows.length; i++) {\\n\\t\\t\\tstring[] memory item = split(rows[i], \\\",\\\");\\n\\t\\t\\tresults[i] = ProjectFundingData(\\n\\t\\t\\t\\titem[0],\\n\\t\\t\\t\\tuint256(stringToUint(item[1]))\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn results;\\n\\t}\\n\\n\\t// Processes each project's funding based on parsed data\\n\\tfunction processFundingRound(\\n\\t\\tProjectFundingData[] memory fundingData,\\n\\t\\tuint256 roundId\\n\\t) internal {\\n\\t\\t// uint256 totalFunds = fundingRounds[roundId].totalContributions;\\n\\t\\tfor (uint256 i = 0; i < fundingData.length; i++) {\\n\\t\\t\\tProject storage project = fundingRounds[roundId].projects[\\n\\t\\t\\t\\tfundingRounds[roundId].projectIds[i]\\n\\t\\t\\t];\\n\\t\\t\\t// uint256 payout = 100;\\n\\t\\t\\t// uint256 payout = (project.totalContributions *\\n\\t\\t\\t// \\tfundingData[i].fundingPercentage) / 100;\\n\\t\\t\\tuint256 payout = calculatePayout(project, fundingData);\\n\\n\\t\\t\\tproject.projectAddress.transfer(payout);\\n\\t\\t\\t// totalFunds -= payout;\\n\\t\\t}\\n\\t}\\n\\n\\t// Calculates the payout for a given project\\n\\tfunction calculatePayout(\\n\\t\\tProject storage project,\\n\\t\\tProjectFundingData[] memory fundingData\\n\\t) internal view returns (uint256) {\\n\\t\\tfor (uint256 i = 0; i < fundingData.length; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(fundingData[i].projectId)) ==\\n\\t\\t\\t\\tkeccak256(bytes(uint2str(project.id)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn\\n\\t\\t\\t\\t\\t(project.totalContributions *\\n\\t\\t\\t\\t\\t\\tfundingData[i].fundingPercentage) / 100;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn 0;\\n\\t}\\n\\n\\t//helper for SecretPath Gateway\\n\\n\\tfunction estimateRequestPrice(\\n\\t\\tuint32 _callbackGasLimit\\n\\t) private view returns (uint256) {\\n\\t\\tuint256 baseFee = _callbackGasLimit * block.basefee;\\n\\t\\treturn baseFee;\\n\\t}\\n\\n\\tfunction uint2str(uint i) internal pure returns (string memory) {\\n\\t\\tif (i == 0) return \\\"0\\\";\\n\\t\\tuint j = i;\\n\\t\\tuint len;\\n\\t\\twhile (j != 0) {\\n\\t\\t\\tlen++;\\n\\t\\t\\tj /= 10;\\n\\t\\t}\\n\\t\\tbytes memory bstr = new bytes(len);\\n\\t\\tuint k = len - 1;\\n\\t\\twhile (i != 0) {\\n\\t\\t\\tbstr[k--] = bytes1(uint8(48 + (i % 10)));\\n\\t\\t\\ti /= 10;\\n\\t\\t}\\n\\t\\treturn string(bstr);\\n\\t}\\n\\n\\tfunction split(\\n\\t\\tstring memory str,\\n\\t\\tstring memory delimiter\\n\\t) internal pure returns (string[] memory) {\\n\\t\\tbytes memory strBytes = bytes(str);\\n\\t\\tbytes memory delimiterBytes = bytes(delimiter);\\n\\n\\t\\tuint count = 1; // Start with 1 to include the last element\\n\\t\\tfor (uint i = 0; i < strBytes.length; i++) {\\n\\t\\t\\tif (strBytes[i] == delimiterBytes[0]) count++;\\n\\t\\t}\\n\\n\\t\\tstring[] memory parts = new string[](count);\\n\\t\\tuint index = 0;\\n\\t\\tuint lastIndex = 0;\\n\\n\\t\\tfor (uint i = 0; i < strBytes.length; i++) {\\n\\t\\t\\tif (strBytes[i] == delimiterBytes[0]) {\\n\\t\\t\\t\\tparts[index] = new string(i - lastIndex);\\n\\t\\t\\t\\tbytes memory partBytes = bytes(parts[index]);\\n\\n\\t\\t\\t\\tfor (uint j = 0; j < partBytes.length; j++) {\\n\\t\\t\\t\\t\\tpartBytes[j] = strBytes[lastIndex + j];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t\\tlastIndex = i + 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Push the last part\\n\\t\\tparts[index] = new string(strBytes.length - lastIndex);\\n\\t\\tbytes memory partBytes = bytes(parts[index]);\\n\\t\\tfor (uint i = 0; i < partBytes.length; i++) {\\n\\t\\t\\tpartBytes[i] = strBytes[lastIndex + i];\\n\\t\\t}\\n\\n\\t\\treturn parts;\\n\\t}\\n\\n\\tfunction stringToUint(string memory s) public pure returns (uint) {\\n\\t\\tbytes memory b = bytes(s);\\n\\t\\tuint result = 0;\\n\\t\\tfor (uint i = 0; i < b.length; i++) {\\n\\t\\t\\t// c must be a number from '0' to '9'\\n\\t\\t\\tif (b[i] >= 0x30 && b[i] <= 0x39) {\\n\\t\\t\\t\\tresult = result * 10 + (uint8(b[i]) - 48); // ASCII '0' is 48\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Handle non-numeric characters; revert the transaction\\n\\t\\t\\t\\trevert(\\\"Non-numeric character encountered.\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Optional: Add a check to ensure the number is within the expected range\\n\\t\\trequire(result <= 100, \\\"Number out of expected range.\\\");\\n\\t\\treturn result;\\n\\t}\\n}\\n\",\"keccak256\":\"0xc9beee0f6ba006c7fae790aa403f2dc56d471216042f20a20483253f5424bbb1\",\"license\":\"MIT\"},\"contracts/JsmnSolLib.sol\":{\"content\":\"/*\\nCopyright (c) 2017 Christoph Niemann\\nPermission is hereby granted, free of charge, to any person obtaining a copy of\\nthis software and associated documentation files (the \\\"Software\\\"), to deal in\\nthe Software without restriction, including without limitation the rights to\\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\nof the Software, and to permit persons to whom the Software is furnished to do\\nso, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary JsmnSolLib {\\n\\tenum JsmnType {\\n\\t\\tUNDEFINED,\\n\\t\\tOBJECT,\\n\\t\\tARRAY,\\n\\t\\tSTRING,\\n\\t\\tPRIMITIVE\\n\\t}\\n\\n\\tuint constant RETURN_SUCCESS = 0;\\n\\tuint constant RETURN_ERROR_INVALID_JSON = 1;\\n\\tuint constant RETURN_ERROR_PART = 2;\\n\\tuint constant RETURN_ERROR_NO_MEM = 3;\\n\\n\\tstruct Token {\\n\\t\\tJsmnType jsmnType;\\n\\t\\tuint start;\\n\\t\\tbool startSet;\\n\\t\\tuint end;\\n\\t\\tbool endSet;\\n\\t\\tuint8 size;\\n\\t}\\n\\n\\tstruct Parser {\\n\\t\\tuint pos;\\n\\t\\tuint toknext;\\n\\t\\tint toksuper;\\n\\t}\\n\\n\\tfunction init(\\n\\t\\tuint length\\n\\t) internal pure returns (Parser memory, Token[] memory) {\\n\\t\\tParser memory p = Parser(0, 0, -1);\\n\\t\\tToken[] memory t = new Token[](length);\\n\\t\\treturn (p, t);\\n\\t}\\n\\n\\tfunction allocateToken(\\n\\t\\tParser memory parser,\\n\\t\\tToken[] memory tokens\\n\\t) internal pure returns (bool, Token memory) {\\n\\t\\tif (parser.toknext >= tokens.length) {\\n\\t\\t\\t// no more space in tokens\\n\\t\\t\\treturn (false, tokens[tokens.length - 1]);\\n\\t\\t}\\n\\t\\tToken memory token = Token(JsmnType.UNDEFINED, 0, false, 0, false, 0);\\n\\t\\ttokens[parser.toknext] = token;\\n\\t\\tparser.toknext++;\\n\\t\\treturn (true, token);\\n\\t}\\n\\n\\tfunction fillToken(\\n\\t\\tToken memory token,\\n\\t\\tJsmnType jsmnType,\\n\\t\\tuint start,\\n\\t\\tuint end\\n\\t) internal pure {\\n\\t\\ttoken.jsmnType = jsmnType;\\n\\t\\ttoken.start = start;\\n\\t\\ttoken.startSet = true;\\n\\t\\ttoken.end = end;\\n\\t\\ttoken.endSet = true;\\n\\t\\ttoken.size = 0;\\n\\t}\\n\\n\\tfunction parseString(\\n\\t\\tParser memory parser,\\n\\t\\tToken[] memory tokens,\\n\\t\\tbytes memory s\\n\\t) internal pure returns (uint) {\\n\\t\\tuint start = parser.pos;\\n\\t\\tbool success;\\n\\t\\tToken memory token;\\n\\t\\tparser.pos++;\\n\\n\\t\\tfor (; parser.pos < s.length; parser.pos++) {\\n\\t\\t\\tbytes1 c = s[parser.pos];\\n\\n\\t\\t\\t// Quote -> end of string\\n\\t\\t\\tif (c == '\\\"') {\\n\\t\\t\\t\\t(success, token) = allocateToken(parser, tokens);\\n\\t\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t\\tparser.pos = start;\\n\\t\\t\\t\\t\\treturn RETURN_ERROR_NO_MEM;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfillToken(token, JsmnType.STRING, start + 1, parser.pos);\\n\\t\\t\\t\\treturn RETURN_SUCCESS;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (uint8(c) == 92 && parser.pos + 1 < s.length) {\\n\\t\\t\\t\\t// handle escaped characters: skip over it\\n\\t\\t\\t\\tparser.pos++;\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\ts[parser.pos] == '\\\"' ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"/\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"\\\\\\\\\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"f\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"r\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"n\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"b\\\" ||\\n\\t\\t\\t\\t\\ts[parser.pos] == \\\"t\\\"\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// all other values are INVALID\\n\\t\\t\\t\\t\\tparser.pos = start;\\n\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tparser.pos = start;\\n\\t\\treturn RETURN_ERROR_PART;\\n\\t}\\n\\n\\tfunction parsePrimitive(\\n\\t\\tParser memory parser,\\n\\t\\tToken[] memory tokens,\\n\\t\\tbytes memory s\\n\\t) internal pure returns (uint) {\\n\\t\\tbool found = false;\\n\\t\\tuint start = parser.pos;\\n\\t\\tbytes1 c;\\n\\t\\tbool success;\\n\\t\\tToken memory token;\\n\\t\\tfor (; parser.pos < s.length; parser.pos++) {\\n\\t\\t\\tc = s[parser.pos];\\n\\t\\t\\tif (\\n\\t\\t\\t\\tc == \\\" \\\" ||\\n\\t\\t\\t\\tc == \\\"\\\\t\\\" ||\\n\\t\\t\\t\\tc == \\\"\\\\n\\\" ||\\n\\t\\t\\t\\tc == \\\"\\\\r\\\" ||\\n\\t\\t\\t\\tc == \\\",\\\" ||\\n\\t\\t\\t\\tc == 0x7d ||\\n\\t\\t\\t\\tc == 0x5d\\n\\t\\t\\t) {\\n\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tif (uint8(c) < 32 || uint8(c) > 127) {\\n\\t\\t\\t\\tparser.pos = start;\\n\\t\\t\\t\\treturn RETURN_ERROR_INVALID_JSON;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (!found) {\\n\\t\\t\\tparser.pos = start;\\n\\t\\t\\treturn RETURN_ERROR_PART;\\n\\t\\t}\\n\\n\\t\\t// found the end\\n\\t\\t(success, token) = allocateToken(parser, tokens);\\n\\t\\tif (!success) {\\n\\t\\t\\tparser.pos = start;\\n\\t\\t\\treturn RETURN_ERROR_NO_MEM;\\n\\t\\t}\\n\\t\\tfillToken(token, JsmnType.PRIMITIVE, start, parser.pos);\\n\\t\\tparser.pos--;\\n\\t\\treturn RETURN_SUCCESS;\\n\\t}\\n\\n\\tfunction parse(\\n\\t\\tstring memory json,\\n\\t\\tuint numberElements\\n\\t) internal pure returns (uint, Token[] memory tokens, uint) {\\n\\t\\tbytes memory s = bytes(json);\\n\\t\\tbool success;\\n\\t\\tParser memory parser;\\n\\t\\t(parser, tokens) = init(numberElements);\\n\\n\\t\\t// Token memory token;\\n\\t\\tuint r;\\n\\t\\tuint count = parser.toknext;\\n\\t\\tuint i;\\n\\t\\tToken memory token;\\n\\n\\t\\tfor (; parser.pos < s.length; parser.pos++) {\\n\\t\\t\\tbytes1 c = s[parser.pos];\\n\\n\\t\\t\\t// 0x7b, 0x5b opening curly parentheses or brackets\\n\\t\\t\\tif (c == 0x7b || c == 0x5b) {\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\t(success, token) = allocateToken(parser, tokens);\\n\\t\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t\\treturn (RETURN_ERROR_NO_MEM, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (parser.toksuper != -1) {\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].size++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\ttoken.jsmnType = (c == 0x7b ? JsmnType.OBJECT : JsmnType.ARRAY);\\n\\t\\t\\t\\ttoken.start = parser.pos;\\n\\t\\t\\t\\ttoken.startSet = true;\\n\\t\\t\\t\\tparser.toksuper = int(parser.toknext - 1);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// closing curly parentheses or brackets\\n\\t\\t\\tif (c == 0x7d || c == 0x5d) {\\n\\t\\t\\t\\tJsmnType tokenType = (\\n\\t\\t\\t\\t\\tc == 0x7d ? JsmnType.OBJECT : JsmnType.ARRAY\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tbool isUpdated = false;\\n\\t\\t\\t\\tfor (i = parser.toknext - 1; i >= 0; i--) {\\n\\t\\t\\t\\t\\ttoken = tokens[i];\\n\\t\\t\\t\\t\\tif (token.startSet && !token.endSet) {\\n\\t\\t\\t\\t\\t\\tif (token.jsmnType != tokenType) {\\n\\t\\t\\t\\t\\t\\t\\t// found a token that hasn't been closed but from a different type\\n\\t\\t\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tparser.toksuper = -1;\\n\\t\\t\\t\\t\\t\\ttokens[i].end = parser.pos + 1;\\n\\t\\t\\t\\t\\t\\ttokens[i].endSet = true;\\n\\t\\t\\t\\t\\t\\tisUpdated = true;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (!isUpdated) {\\n\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfor (; i > 0; i--) {\\n\\t\\t\\t\\t\\ttoken = tokens[i];\\n\\t\\t\\t\\t\\tif (token.startSet && !token.endSet) {\\n\\t\\t\\t\\t\\t\\tparser.toksuper = int(i);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (i == 0) {\\n\\t\\t\\t\\t\\ttoken = tokens[i];\\n\\t\\t\\t\\t\\tif (token.startSet && !token.endSet) {\\n\\t\\t\\t\\t\\t\\tparser.toksuper = int(i);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 0x42\\n\\t\\t\\tif (c == '\\\"') {\\n\\t\\t\\t\\tr = parseString(parser, tokens, s);\\n\\n\\t\\t\\t\\tif (r != RETURN_SUCCESS) {\\n\\t\\t\\t\\t\\treturn (r, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t//JsmnError.INVALID;\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\tif (parser.toksuper != -1) tokens[uint(parser.toksuper)].size++;\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ' ', \\\\r, \\\\t, \\\\n\\n\\t\\t\\tif (c == \\\" \\\" || c == 0x11 || c == 0x12 || c == 0x14) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 0x3a\\n\\t\\t\\tif (c == \\\":\\\") {\\n\\t\\t\\t\\tparser.toksuper = int(parser.toknext - 1);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (c == \\\",\\\") {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\tparser.toksuper != -1 &&\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].jsmnType != JsmnType.ARRAY &&\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].jsmnType != JsmnType.OBJECT\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tfor (i = parser.toknext - 1; i >= 0; i--) {\\n\\t\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\t\\ttokens[i].jsmnType == JsmnType.ARRAY ||\\n\\t\\t\\t\\t\\t\\t\\ttokens[i].jsmnType == JsmnType.OBJECT\\n\\t\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\t\\tif (tokens[i].startSet && !tokens[i].endSet) {\\n\\t\\t\\t\\t\\t\\t\\t\\tparser.toksuper = int(i);\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Primitive\\n\\t\\t\\tif (\\n\\t\\t\\t\\t(c >= \\\"0\\\" && c <= \\\"9\\\") ||\\n\\t\\t\\t\\tc == \\\"-\\\" ||\\n\\t\\t\\t\\tc == \\\"f\\\" ||\\n\\t\\t\\t\\tc == \\\"t\\\" ||\\n\\t\\t\\t\\tc == \\\"n\\\"\\n\\t\\t\\t) {\\n\\t\\t\\t\\tif (parser.toksuper != -1) {\\n\\t\\t\\t\\t\\ttoken = tokens[uint(parser.toksuper)];\\n\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\ttoken.jsmnType == JsmnType.OBJECT ||\\n\\t\\t\\t\\t\\t\\t(token.jsmnType == JsmnType.STRING && token.size != 0)\\n\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tr = parsePrimitive(parser, tokens, s);\\n\\t\\t\\t\\tif (r != RETURN_SUCCESS) {\\n\\t\\t\\t\\t\\treturn (r, tokens, 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\tif (parser.toksuper != -1) {\\n\\t\\t\\t\\t\\ttokens[uint(parser.toksuper)].size++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// printable char\\n\\t\\t\\tif (c >= 0x20 && c <= 0x7e) {\\n\\t\\t\\t\\treturn (RETURN_ERROR_INVALID_JSON, tokens, 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn (RETURN_SUCCESS, tokens, parser.toknext);\\n\\t}\\n\\n\\tfunction getBytes(\\n\\t\\tstring memory json,\\n\\t\\tuint start,\\n\\t\\tuint end\\n\\t) internal pure returns (string memory) {\\n\\t\\tbytes memory s = bytes(json);\\n\\t\\tbytes memory result = new bytes(end - start);\\n\\t\\tfor (uint i = start; i < end; i++) {\\n\\t\\t\\tresult[i - start] = s[i];\\n\\t\\t}\\n\\t\\treturn string(result);\\n\\t}\\n\\n\\t// parseInt\\n\\tfunction parseInt(string memory _a) internal pure returns (int) {\\n\\t\\treturn parseInt(_a, 0);\\n\\t}\\n\\n\\t// parseInt(parseFloat*10^_b)\\n\\tfunction parseInt(string memory _a, uint _b) internal pure returns (int) {\\n\\t\\tbytes memory bresult = bytes(_a);\\n\\t\\tint mint = 0;\\n\\t\\tbool decimals = false;\\n\\t\\tbool negative = false;\\n\\t\\tfor (uint i = 0; i < bresult.length; i++) {\\n\\t\\t\\tif ((i == 0) && (bresult[i] == \\\"-\\\")) {\\n\\t\\t\\t\\tnegative = true;\\n\\t\\t\\t}\\n\\t\\t\\tif ((uint8(bresult[i]) >= 48) && (uint8(bresult[i]) <= 57)) {\\n\\t\\t\\t\\tif (decimals) {\\n\\t\\t\\t\\t\\tif (_b == 0) break;\\n\\t\\t\\t\\t\\telse _b--;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tmint *= 10;\\n\\t\\t\\t\\tmint += int(uint256(uint8(bresult[i]))) - 48;\\n\\t\\t\\t} else if (uint8(bresult[i]) == 46) decimals = true;\\n\\t\\t}\\n\\t\\tif (_b > 0) mint *= int(10 ** _b);\\n\\t\\tif (negative) mint *= -1;\\n\\t\\treturn mint;\\n\\t}\\n\\n\\tfunction uint2str(uint i) internal pure returns (string memory) {\\n\\t\\tif (i == 0) return \\\"0\\\";\\n\\t\\tuint j = i;\\n\\t\\tuint len;\\n\\t\\twhile (j != 0) {\\n\\t\\t\\tlen++;\\n\\t\\t\\tj /= 10;\\n\\t\\t}\\n\\t\\tbytes memory bstr = new bytes(len);\\n\\t\\tuint k = len - 1;\\n\\t\\twhile (i != 0) {\\n\\t\\t\\tbstr[k--] = bytes1(uint8(48 + (i % 10)));\\n\\t\\t\\ti /= 10;\\n\\t\\t}\\n\\t\\treturn string(bstr);\\n\\t}\\n\\n\\tfunction parseBool(string memory _a) internal pure returns (bool) {\\n\\t\\tif (strCompare(_a, \\\"true\\\") == 0) {\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction strCompare(\\n\\t\\tstring memory _a,\\n\\t\\tstring memory _b\\n\\t) internal pure returns (int) {\\n\\t\\tbytes memory a = bytes(_a);\\n\\t\\tbytes memory b = bytes(_b);\\n\\t\\tuint minLength = a.length;\\n\\t\\tif (b.length < minLength) minLength = b.length;\\n\\t\\tfor (uint i = 0; i < minLength; i++)\\n\\t\\t\\tif (a[i] < b[i]) return -1;\\n\\t\\t\\telse if (a[i] > b[i]) return 1;\\n\\t\\tif (a.length < b.length) return -1;\\n\\t\\telse if (a.length > b.length) return 1;\\n\\t\\telse return 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0xea51e519ec3c809b9b7b1b4cf46616641a5c65bf99f7b89c98f6c3501f1e0330\"},\"interfaces/IGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IGateway {\\n\\tstruct ExecutionInfo {\\n\\t\\tbytes user_key;\\n\\t\\tbytes user_pubkey;\\n\\t\\tstring routing_code_hash;\\n\\t\\tstring task_destination_network;\\n\\t\\tstring handle;\\n\\t\\tbytes12 nonce;\\n\\t\\tuint32 callback_gas_limit;\\n\\t\\tbytes payload;\\n\\t\\tbytes payload_signature;\\n\\t}\\n\\n\\tfunction send(\\n\\t\\tbytes32 _payloadHash,\\n\\t\\taddress _userAddress,\\n\\t\\tstring calldata _routingInfo,\\n\\t\\tExecutionInfo calldata _info\\n\\t) external payable;\\n}\\n\",\"keccak256\":\"0x0a9d680f18372c00a8e706f4656647edc7a3973a1d1974bf2a59fe319a3150ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461007457601f611e8f38819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600280546001600160a01b031916919091179055604051611dff90816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b6000803560e01c80631bd95155146113a15780634a98b9021461128c57806355aa2f8c1461118a578063763a3df61461104e5780637faf8dcf14610e4b5780638b3b57a414610e1457806390a4cb9b14610dc2578063a135c3e814610d33578063b239a41214610cfc578063c428a27814610c26578063c5ad404314610bef578063e09a1094146100d75763eb0cde1d146100ac57600080fd5b346100d457806003193601126100d4576002546040516001600160a01b039091168152602090f35b80fd5b506101a03660031901126100d4576024356001600160401b038111610beb57610104903690600401611485565b6044356001600160401b038111610bd757610123903690600401611485565b916064356001600160401b038111610beb57610143903690600401611485565b90608435916001600160401b038311610beb5736602384011215610beb578260040135926101708461166c565b9361017e6040519586611412565b8085526024602086019160051b83010191368311610b9357602401905b828210610bdb5750505060a4356001600160401b038111610bd7576101c4903690600401611683565b60c4356001600160401b038111610bd3576101e3903690600401611683565b916001600160401b0360e43511610bd35736602360e435011215610bd35760e43560040135906102128261166c565b916102206040519384611412565b80835260208301903660248260051b60e435010111610ba657602460e43501915b60248260051b60e43501018310610baf57505050610104356001600160a01b0381169003610baa57610124358015158103610baa57610164356001600160401b038111610ba6576102969036906004016114a3565b90916001600160401b036101843511610ba2576101206101843536036003190112610ba257610b24575b50506004358552846020526040852097600435895587516001600160401b038111610a55576102f260018b015461155c565b601f8111610adf575b50806020601f8211600114610a74578891610a69575b508160011b916000199060031b1c19161760018a01555b8051906001600160401b038211610a5557819061034860028c015461155c565b601f8111610a04575b50602090601f831160011461099557889261098a575b50508160011b916000199060031b1c19161760028901555b8051906001600160401b03821161097657819061039f60038b015461155c565b601f8111610925575b50602090601f83116001146108b65787926108ab575b50508160011b916000199060031b1c19161760038801555b60078701805460ff19166001179055835b85518110156107f4576103fa81876118c0565b5161040582856118c0565b519061041183876118c0565b516001600160a01b0361042485876118c0565b511690604051928360c08101106001600160401b0360c08601111761063d5760c08401604052835260208301938452604083015260608201528660808201528660a082015261047383896118c0565b51875260048a01602052604087209181518355518051906001600160401b0382116107155781906104a7600186015461155c565b601f81116107a3575b50602090601f8311600114610734578a92610729575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b03821161071557610501600285015461155c565b601f81116106d0575b50602090601f831160011461065e5791806005949260a0948c92610653575b50508160011b916000199060031b1c19161760028501555b60038401600180841b036060830151166bffffffffffffffffffffffff841b82541617905560808101516004850155015191015561057f81876118c0565b5190600589015491600160401b83101561063d576105ac836001610638950160058d015560058c01611510565b819291549060031b600019811b9283911b169119161790556105ce81886118c0565b5186526004890160205260408620546105e782896118c0565b51875260048a016020527fed06d1e70f1faa0e1750def1b3a1d942390a8f47d03679c9025a1c38dc34fe7b610630600160408a2001604051918291602083526020830190611596565b0390a261189b565b6103e7565b634e487b7160e01b600052604160045260246000fd5b015190503880610529565b90600285018a5260208a20918a5b601f19851681106106b85750926005949260019260a09583601f1981161061069f575b505050811b016002850155610541565b015160001960f88460031b161c1916905538808061068f565b9192602060018192868501518155019401920161066c565b600285018a5260208a20601f840160051c81016020851061070e575b601f830160051c8201811061070257505061050a565b600081556001016106ec565b50806106ec565b634e487b7160e01b89526041600452602489fd5b0151905038806104c6565b9250600185018a5260208a20908a935b601f1984168510610788576001945083601f1981161061076f575b505050811b0160018301556104de565b015160001960f88460031b161c1916905538808061075f565b81810151835560209485019460019093019290910190610744565b909150600185018a5260208a20601f840160051c8101602085106107ed575b90849392915b601f830160051c820181106107de5750506104b0565b600081558594506001016107c8565b50806107c2565b848688600154600160401b81101561063d576001810180600155811015610895577f2fceaf42a6664f3294222799a359650844542179732d12b26b6926bd338479a59161087e916001600052600435907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015561088f60405192839260408452604084019061162c565b828103602084015260043595611528565b0390a280f35b634e487b7160e01b600052603260045260246000fd5b0151905038806103be565b925060038a018752602087209087935b601f198416851061090a576001945083601f198116106108f1575b505050811b0160038801556103d6565b015160001960f88460031b161c191690553880806108e1565b818101518355602094850194600190930192909101906108c6565b90915060038a01875260208720601f840160051c81016020851061096f575b90849392915b601f830160051c820181106109605750506103a8565b6000815585945060010161094a565b5080610944565b634e487b7160e01b86526041600452602486fd5b015190503880610367565b925060028b018852602088209088935b601f19841685106109e9576001945083601f198116106109d0575b505050811b01600289015561037f565b015160001960f88460031b161c191690553880806109c0565b818101518355602094850194600190930192909101906109a5565b90915060028b01885260208820601f840160051c810160208510610a4e575b90849392915b601f830160051c82018110610a3f575050610351565b60008155859450600101610a29565b5080610a23565b634e487b7160e01b87526041600452602487fd5b905089015138610311565b915060018b0188526020882088925b8b601f1984168510610ac857506001935082601f19811610610aaf575b5050811b0160018a0155610328565b8b015160001960f88460031b161c191690553880610aa0565b810151825560209384019360019092019101610a83565b60018b01885260208820601f830160051c810160208410610b1d575b601f830160051c82018110610b115750506102fb565b60008155600101610afb565b5080610afb565b6002546001600160a01b031690813b15610ba257918791610b6b936040518095819482936339624a6b60e21b84526101843560040191610104356101443560048701611755565b039134905af18015610b9757908691156102c057610b88906113e4565b610b935784386102c0565b8480fd5b6040513d88823e3d90fd5b8780fd5b8680fd5b600080fd5b82356001600160a01b0381168103610bcf57815260209283019201610241565b8880fd5b8380fd5b8280fd5b813581526020918201910161019b565b5080fd5b50346100d457610bfe366114d0565b507f0de2355f73246cb2852175af9385f91c8205be026c831a20ada4062931abdec08280a280f35b50346100d45760203660031901126100d45760409060043581528060205220805460405191610c6383610c5c8160018501611596565b0384611412565b60ff604051610c8081610c798160028701611596565b0382611412565b610cdd604051610c9781610c798160038901611596565b610ccf6007600687015496015493610cc1604051998a998a5260e060208b015260e08a019061162c565b9088820360408a015261162c565b90868203606088015261162c565b926080850152818116151560a085015260081c16151560c08301520390f35b50346100d457610d0b366114d0565b507f0e82eab4cbddb8a38b9fb81ba86a4a05ec8aa2c55dbea69d2e72857b4f90e9548280a280f35b50346100d457806003193601126100d45760405180918260018054928385526020809501918082527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6915b86868210610dac578590610d9482870383611412565b610da8604051928284938452830190611528565b0390f35b8354855288955090930192918101918101610d7e565b50346100d45760203660031901126100d457600435600154811015610beb5760209060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154604051908152f35b50346100d457610e23366114d0565b507fdcad6660d3e34a68718474b3d2dfb7da8a012d967dfe595b0123a6112667f0688280a280f35b50346100d457610e5a366114d0565b8260405191610e68836113f7565b610e82600193848152602092603b60f81b84830152611a7e565b83815191610e8f8361166c565b92610e9d6040519485611412565b808452610eac601f199161166c565b01855b81811061101c57505084915b610f7b575b50508383905b610ef4575b83867faf7b59e6c86cd7c8ea4dfcc3926826a19ee85cd219eaf4e1a1cfca41a9cc798d8280a280f35b8151811015610f76578584528383528380808060046040822001610f1e8660056040852001611510565b919054600392831b1c8352885260408220610f3988826118e7565b9101546001600160a01b0316828215610f6d575bf115610f6257610f5c9061189b565b84610ec6565b6040513d85823e3d90fd5b506108fc610f4d565b610ecb565b9091929381518310156110145750610fb5610f9683836118c0565b5160405190610fa4826113f7565b878252600b60fa1b87830152611a7e565b8051156108955784810151928151871015610895578693610fdc604061100a940151611c87565b60405191610fe9836113f7565b825287820152610ff982876118c0565b5261100481866118c0565b5061189b565b9087949392610ebb565b939291610ec0565b90925084955060409491939451611032816113f7565b6060815289838201528282870101520191859188959493610eaf565b50600319906080368301126100d4576001600160a01b0360043581811691828203610baa576001600160401b0390604435828111611186576110949036906004016114a3565b919096606435938411610ba657610120908436030112611186576002541660c48301359663ffffffff97888116809103610ba2576003028098811603611172576110ec8798637fffffff989798489160011c166118d4565b823b15610ba657869461111c604051978896879586946339624a6b60e21b86526004019260243560048701611755565b03925af1801561116757611153575b50807f9ca0de0709c575c61710159cf212e68fa7f9bd8d600cb008ae8c028b7e54b70591a280f35b61115c906113e4565b610beb57813861112b565b6040513d84823e3d90fd5b634e487b7160e01b87526011600452602487fd5b8580fd5b5060031960a036820112610beb57600435906001600160a01b0390602435908282168203610baa5784926001600160401b0391606435838111611186576111d59036906004016114a3565b929091608435948511610ba657610120908536030112611186576002541690813b15611186578593611224604051968795869485946339624a6b60e21b86526004019260443560048701611755565b039134905af1801561116757611278575b50819052816020526007604083200161010061ff00198254161790557fa9e5ea555a64d717f026f961abe3fa55f2cdfc8f3c9dcb6e9ae55edec249ff318280a280f35b611281906113e4565b610beb578138611235565b506003199060c0368301126100d457600435916024358015158103610bd757604435916001600160a01b03908184168403610b93576001600160401b0391608435838111610ba6576112e29036906004016114a3565b94909260a435948511610ba257610120908536030112610ba657878752866020526007604088200160ff198154169055611340575b85877fe9f7d7fd0b133404f0ccff737d6f3594748e04bc5507adfaed35835ef98937118280a280f35b6002541691823b15611186579085939291611378604051968795869485946339624a6b60e21b86526004019260643560048701611755565b039134905af1801561116757611392575b80808080611317565b61139b906113e4565b38611389565b50346100d45760203660031901126100d457600435906001600160401b0382116100d45760206113dc6113d73660048601611485565b611c87565b604051908152f35b6001600160401b03811161063d57604052565b604081019081106001600160401b0382111761063d57604052565b90601f801991011681019081106001600160401b0382111761063d57604052565b6001600160401b03811161063d57601f01601f191660200190565b92919261145a82611433565b916114686040519384611412565b829481845281830111610baa578281602093846000960137010152565b9080601f83011215610baa578160206114a09335910161144e565b90565b9181601f84011215610baa578235916001600160401b038311610baa5760208381860195010111610baa57565b906040600319830112610baa5760043591602435906001600160401b038211610baa5780602383011215610baa578160246114a09360040135910161144e565b80548210156108955760005260206000200190600090565b90815180825260208080930193019160005b828110611548575050505090565b83518552938101939281019260010161153a565b90600182811c9216801561158c575b602083101461157657565b634e487b7160e01b600052602260045260246000fd5b91607f169161156b565b90600092918054916115a78361155c565b91828252600193848116908160001461160957506001146115c9575b50505050565b90919394506000526020928360002092846000945b8386106115f55750505050010190388080806115c3565b8054858701830152940193859082016115de565b9294505050602093945060ff191683830152151560051b010190388080806115c3565b919082519283825260005b848110611658575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611637565b6001600160401b03811161063d5760051b60200190565b9080601f83011215610baa5781359061169b8261166c565b926116a96040519485611412565b828452602092838086019160051b83010192808411610baa57848301915b8483106116d75750505050505090565b82356001600160401b038111610baa5786916116f884848094890101611485565b8152019201916116c7565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e1982360301811215610baa5701602081359101916001600160401b038211610baa578136038313610baa57565b9081526001600160a01b0390911660208201526080604082018190529093926117819291850191611703565b91606081840391015261181d6118026117e76117cc6117b16117a38680611724565b610120808a52890191611703565b6117be6020870187611724565b9088830360208a0152611703565b6117d96040860186611724565b908783036040890152611703565b6117f46060850185611724565b908683036060880152611703565b61180f6080840184611724565b908583036080870152611703565b9160a08201356bffffffffffffffffffffffff60a01b8116809103610baa5760a082015260c082013563ffffffff8116809103610baa576114a09361187c9160c084015261186e60e0850185611724565b9084830360e0860152611703565b9161188d6101009182810190611724565b929091818503910152611703565b60001981146118aa5760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156108955760209160051b010190565b818102929181159184041417156118aa57565b9160005b825181101561194f576118fe81846118c0565b515180516020809201206119128654611983565b8281519101201461192c57506119279061189b565b6118eb565b61194260649492600461194b95970154936118c0565b510151906118d4565b0490565b50915050600090565b919082039182116118aa57565b919082018092116118aa57565b908151811015610895570160200190565b8015611a2e57600081805b611a1a575061199c81611433565b916119aa6040519384611412565b818352601f196119b983611433565b01366020850137600019918083019081116118aa5790805b6119db5750505090565b600a9060309282820684018094116118aa578080156118aa5785019360f81b6001600160f81b03191660001a90611a129087611972565b5304806119d1565b90611a26600a9161189b565b91048061198e565b50604051611a3b816113f7565b60018152600360fc1b602082015290565b90611a5682611433565b611a636040519182611412565b8281528092611a74601f1991611433565b0190602036910137565b91909160019060005b8151811015611add576001600160f81b031980611aa48385611972565b5116908651156108955760208701511614611ac8575b611ac39061189b565b611a87565b91611ad5611ac39161189b565b929050611aba565b50611ae78261166c565b91611af56040519384611412565b808352611b04601f199161166c565b0160005b818110611c765750506000918290835b8351811015611bf9576001600160f81b031980611b358387611972565b5116885115610895578160208a01511614611b5a575b50611b559061189b565b611b18565b96611b72611b6d85849594999899611958565b611a4c565b611b7c88846118c0565b52611b8787836118c0565b50611b9287836118c0565b519560005b8751811015611bd257808a611bb8611bb2611bcd948a611965565b8a611972565b511660001a611bc7828b611972565b5361189b565b611b97565b50969195509650611be491925061189b565b92600182018083116118aa5791611b55611b4b565b509392611c2c919550611c10611b6d878551611958565b611c1a82876118c0565b52611c2581866118c0565b50846118c0565b519160005b8351811015611c6e57611c69906001600160f81b0319611c5a611c54838a611965565b86611972565b511660001a611bc78287611972565b611c31565b509350505090565b806060602080938701015201611b08565b90600091825b8151841015611d75576001600160f81b0319600360fc1b81611caf8786611972565b511610159081611d5a575b5015611d0a57600a908181029181830414901517156118aa57602f19611ce08584611972565b5160f81c0160ff918282116118aa57611d0492611cfe921690611965565b9361189b565b92611c8d565b60405162461bcd60e51b815260206004820152602260248201527f4e6f6e2d6e756d657269632063686172616374657220656e636f756e74657265604482015261321760f11b6064820152608490fd5b603960f81b9150611d6b8685611972565b5116111538611cba565b9192505060648111611d845790565b60405162461bcd60e51b815260206004820152601d60248201527f4e756d626572206f7574206f662065787065637465642072616e67652e0000006044820152606490fdfea26469706673582212206f2e853a8d7666ea26766ca05b0c9e9ee477e80cb79afd0ece0e9c5c4de5ab2264736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c80631bd95155146113a15780634a98b9021461128c57806355aa2f8c1461118a578063763a3df61461104e5780637faf8dcf14610e4b5780638b3b57a414610e1457806390a4cb9b14610dc2578063a135c3e814610d33578063b239a41214610cfc578063c428a27814610c26578063c5ad404314610bef578063e09a1094146100d75763eb0cde1d146100ac57600080fd5b346100d457806003193601126100d4576002546040516001600160a01b039091168152602090f35b80fd5b506101a03660031901126100d4576024356001600160401b038111610beb57610104903690600401611485565b6044356001600160401b038111610bd757610123903690600401611485565b916064356001600160401b038111610beb57610143903690600401611485565b90608435916001600160401b038311610beb5736602384011215610beb578260040135926101708461166c565b9361017e6040519586611412565b8085526024602086019160051b83010191368311610b9357602401905b828210610bdb5750505060a4356001600160401b038111610bd7576101c4903690600401611683565b60c4356001600160401b038111610bd3576101e3903690600401611683565b916001600160401b0360e43511610bd35736602360e435011215610bd35760e43560040135906102128261166c565b916102206040519384611412565b80835260208301903660248260051b60e435010111610ba657602460e43501915b60248260051b60e43501018310610baf57505050610104356001600160a01b0381169003610baa57610124358015158103610baa57610164356001600160401b038111610ba6576102969036906004016114a3565b90916001600160401b036101843511610ba2576101206101843536036003190112610ba257610b24575b50506004358552846020526040852097600435895587516001600160401b038111610a55576102f260018b015461155c565b601f8111610adf575b50806020601f8211600114610a74578891610a69575b508160011b916000199060031b1c19161760018a01555b8051906001600160401b038211610a5557819061034860028c015461155c565b601f8111610a04575b50602090601f831160011461099557889261098a575b50508160011b916000199060031b1c19161760028901555b8051906001600160401b03821161097657819061039f60038b015461155c565b601f8111610925575b50602090601f83116001146108b65787926108ab575b50508160011b916000199060031b1c19161760038801555b60078701805460ff19166001179055835b85518110156107f4576103fa81876118c0565b5161040582856118c0565b519061041183876118c0565b516001600160a01b0361042485876118c0565b511690604051928360c08101106001600160401b0360c08601111761063d5760c08401604052835260208301938452604083015260608201528660808201528660a082015261047383896118c0565b51875260048a01602052604087209181518355518051906001600160401b0382116107155781906104a7600186015461155c565b601f81116107a3575b50602090601f8311600114610734578a92610729575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b03821161071557610501600285015461155c565b601f81116106d0575b50602090601f831160011461065e5791806005949260a0948c92610653575b50508160011b916000199060031b1c19161760028501555b60038401600180841b036060830151166bffffffffffffffffffffffff841b82541617905560808101516004850155015191015561057f81876118c0565b5190600589015491600160401b83101561063d576105ac836001610638950160058d015560058c01611510565b819291549060031b600019811b9283911b169119161790556105ce81886118c0565b5186526004890160205260408620546105e782896118c0565b51875260048a016020527fed06d1e70f1faa0e1750def1b3a1d942390a8f47d03679c9025a1c38dc34fe7b610630600160408a2001604051918291602083526020830190611596565b0390a261189b565b6103e7565b634e487b7160e01b600052604160045260246000fd5b015190503880610529565b90600285018a5260208a20918a5b601f19851681106106b85750926005949260019260a09583601f1981161061069f575b505050811b016002850155610541565b015160001960f88460031b161c1916905538808061068f565b9192602060018192868501518155019401920161066c565b600285018a5260208a20601f840160051c81016020851061070e575b601f830160051c8201811061070257505061050a565b600081556001016106ec565b50806106ec565b634e487b7160e01b89526041600452602489fd5b0151905038806104c6565b9250600185018a5260208a20908a935b601f1984168510610788576001945083601f1981161061076f575b505050811b0160018301556104de565b015160001960f88460031b161c1916905538808061075f565b81810151835560209485019460019093019290910190610744565b909150600185018a5260208a20601f840160051c8101602085106107ed575b90849392915b601f830160051c820181106107de5750506104b0565b600081558594506001016107c8565b50806107c2565b848688600154600160401b81101561063d576001810180600155811015610895577f2fceaf42a6664f3294222799a359650844542179732d12b26b6926bd338479a59161087e916001600052600435907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015561088f60405192839260408452604084019061162c565b828103602084015260043595611528565b0390a280f35b634e487b7160e01b600052603260045260246000fd5b0151905038806103be565b925060038a018752602087209087935b601f198416851061090a576001945083601f198116106108f1575b505050811b0160038801556103d6565b015160001960f88460031b161c191690553880806108e1565b818101518355602094850194600190930192909101906108c6565b90915060038a01875260208720601f840160051c81016020851061096f575b90849392915b601f830160051c820181106109605750506103a8565b6000815585945060010161094a565b5080610944565b634e487b7160e01b86526041600452602486fd5b015190503880610367565b925060028b018852602088209088935b601f19841685106109e9576001945083601f198116106109d0575b505050811b01600289015561037f565b015160001960f88460031b161c191690553880806109c0565b818101518355602094850194600190930192909101906109a5565b90915060028b01885260208820601f840160051c810160208510610a4e575b90849392915b601f830160051c82018110610a3f575050610351565b60008155859450600101610a29565b5080610a23565b634e487b7160e01b87526041600452602487fd5b905089015138610311565b915060018b0188526020882088925b8b601f1984168510610ac857506001935082601f19811610610aaf575b5050811b0160018a0155610328565b8b015160001960f88460031b161c191690553880610aa0565b810151825560209384019360019092019101610a83565b60018b01885260208820601f830160051c810160208410610b1d575b601f830160051c82018110610b115750506102fb565b60008155600101610afb565b5080610afb565b6002546001600160a01b031690813b15610ba257918791610b6b936040518095819482936339624a6b60e21b84526101843560040191610104356101443560048701611755565b039134905af18015610b9757908691156102c057610b88906113e4565b610b935784386102c0565b8480fd5b6040513d88823e3d90fd5b8780fd5b8680fd5b600080fd5b82356001600160a01b0381168103610bcf57815260209283019201610241565b8880fd5b8380fd5b8280fd5b813581526020918201910161019b565b5080fd5b50346100d457610bfe366114d0565b507f0de2355f73246cb2852175af9385f91c8205be026c831a20ada4062931abdec08280a280f35b50346100d45760203660031901126100d45760409060043581528060205220805460405191610c6383610c5c8160018501611596565b0384611412565b60ff604051610c8081610c798160028701611596565b0382611412565b610cdd604051610c9781610c798160038901611596565b610ccf6007600687015496015493610cc1604051998a998a5260e060208b015260e08a019061162c565b9088820360408a015261162c565b90868203606088015261162c565b926080850152818116151560a085015260081c16151560c08301520390f35b50346100d457610d0b366114d0565b507f0e82eab4cbddb8a38b9fb81ba86a4a05ec8aa2c55dbea69d2e72857b4f90e9548280a280f35b50346100d457806003193601126100d45760405180918260018054928385526020809501918082527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6915b86868210610dac578590610d9482870383611412565b610da8604051928284938452830190611528565b0390f35b8354855288955090930192918101918101610d7e565b50346100d45760203660031901126100d457600435600154811015610beb5760209060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154604051908152f35b50346100d457610e23366114d0565b507fdcad6660d3e34a68718474b3d2dfb7da8a012d967dfe595b0123a6112667f0688280a280f35b50346100d457610e5a366114d0565b8260405191610e68836113f7565b610e82600193848152602092603b60f81b84830152611a7e565b83815191610e8f8361166c565b92610e9d6040519485611412565b808452610eac601f199161166c565b01855b81811061101c57505084915b610f7b575b50508383905b610ef4575b83867faf7b59e6c86cd7c8ea4dfcc3926826a19ee85cd219eaf4e1a1cfca41a9cc798d8280a280f35b8151811015610f76578584528383528380808060046040822001610f1e8660056040852001611510565b919054600392831b1c8352885260408220610f3988826118e7565b9101546001600160a01b0316828215610f6d575bf115610f6257610f5c9061189b565b84610ec6565b6040513d85823e3d90fd5b506108fc610f4d565b610ecb565b9091929381518310156110145750610fb5610f9683836118c0565b5160405190610fa4826113f7565b878252600b60fa1b87830152611a7e565b8051156108955784810151928151871015610895578693610fdc604061100a940151611c87565b60405191610fe9836113f7565b825287820152610ff982876118c0565b5261100481866118c0565b5061189b565b9087949392610ebb565b939291610ec0565b90925084955060409491939451611032816113f7565b6060815289838201528282870101520191859188959493610eaf565b50600319906080368301126100d4576001600160a01b0360043581811691828203610baa576001600160401b0390604435828111611186576110949036906004016114a3565b919096606435938411610ba657610120908436030112611186576002541660c48301359663ffffffff97888116809103610ba2576003028098811603611172576110ec8798637fffffff989798489160011c166118d4565b823b15610ba657869461111c604051978896879586946339624a6b60e21b86526004019260243560048701611755565b03925af1801561116757611153575b50807f9ca0de0709c575c61710159cf212e68fa7f9bd8d600cb008ae8c028b7e54b70591a280f35b61115c906113e4565b610beb57813861112b565b6040513d84823e3d90fd5b634e487b7160e01b87526011600452602487fd5b8580fd5b5060031960a036820112610beb57600435906001600160a01b0390602435908282168203610baa5784926001600160401b0391606435838111611186576111d59036906004016114a3565b929091608435948511610ba657610120908536030112611186576002541690813b15611186578593611224604051968795869485946339624a6b60e21b86526004019260443560048701611755565b039134905af1801561116757611278575b50819052816020526007604083200161010061ff00198254161790557fa9e5ea555a64d717f026f961abe3fa55f2cdfc8f3c9dcb6e9ae55edec249ff318280a280f35b611281906113e4565b610beb578138611235565b506003199060c0368301126100d457600435916024358015158103610bd757604435916001600160a01b03908184168403610b93576001600160401b0391608435838111610ba6576112e29036906004016114a3565b94909260a435948511610ba257610120908536030112610ba657878752866020526007604088200160ff198154169055611340575b85877fe9f7d7fd0b133404f0ccff737d6f3594748e04bc5507adfaed35835ef98937118280a280f35b6002541691823b15611186579085939291611378604051968795869485946339624a6b60e21b86526004019260643560048701611755565b039134905af1801561116757611392575b80808080611317565b61139b906113e4565b38611389565b50346100d45760203660031901126100d457600435906001600160401b0382116100d45760206113dc6113d73660048601611485565b611c87565b604051908152f35b6001600160401b03811161063d57604052565b604081019081106001600160401b0382111761063d57604052565b90601f801991011681019081106001600160401b0382111761063d57604052565b6001600160401b03811161063d57601f01601f191660200190565b92919261145a82611433565b916114686040519384611412565b829481845281830111610baa578281602093846000960137010152565b9080601f83011215610baa578160206114a09335910161144e565b90565b9181601f84011215610baa578235916001600160401b038311610baa5760208381860195010111610baa57565b906040600319830112610baa5760043591602435906001600160401b038211610baa5780602383011215610baa578160246114a09360040135910161144e565b80548210156108955760005260206000200190600090565b90815180825260208080930193019160005b828110611548575050505090565b83518552938101939281019260010161153a565b90600182811c9216801561158c575b602083101461157657565b634e487b7160e01b600052602260045260246000fd5b91607f169161156b565b90600092918054916115a78361155c565b91828252600193848116908160001461160957506001146115c9575b50505050565b90919394506000526020928360002092846000945b8386106115f55750505050010190388080806115c3565b8054858701830152940193859082016115de565b9294505050602093945060ff191683830152151560051b010190388080806115c3565b919082519283825260005b848110611658575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611637565b6001600160401b03811161063d5760051b60200190565b9080601f83011215610baa5781359061169b8261166c565b926116a96040519485611412565b828452602092838086019160051b83010192808411610baa57848301915b8483106116d75750505050505090565b82356001600160401b038111610baa5786916116f884848094890101611485565b8152019201916116c7565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e1982360301811215610baa5701602081359101916001600160401b038211610baa578136038313610baa57565b9081526001600160a01b0390911660208201526080604082018190529093926117819291850191611703565b91606081840391015261181d6118026117e76117cc6117b16117a38680611724565b610120808a52890191611703565b6117be6020870187611724565b9088830360208a0152611703565b6117d96040860186611724565b908783036040890152611703565b6117f46060850185611724565b908683036060880152611703565b61180f6080840184611724565b908583036080870152611703565b9160a08201356bffffffffffffffffffffffff60a01b8116809103610baa5760a082015260c082013563ffffffff8116809103610baa576114a09361187c9160c084015261186e60e0850185611724565b9084830360e0860152611703565b9161188d6101009182810190611724565b929091818503910152611703565b60001981146118aa5760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156108955760209160051b010190565b818102929181159184041417156118aa57565b9160005b825181101561194f576118fe81846118c0565b515180516020809201206119128654611983565b8281519101201461192c57506119279061189b565b6118eb565b61194260649492600461194b95970154936118c0565b510151906118d4565b0490565b50915050600090565b919082039182116118aa57565b919082018092116118aa57565b908151811015610895570160200190565b8015611a2e57600081805b611a1a575061199c81611433565b916119aa6040519384611412565b818352601f196119b983611433565b01366020850137600019918083019081116118aa5790805b6119db5750505090565b600a9060309282820684018094116118aa578080156118aa5785019360f81b6001600160f81b03191660001a90611a129087611972565b5304806119d1565b90611a26600a9161189b565b91048061198e565b50604051611a3b816113f7565b60018152600360fc1b602082015290565b90611a5682611433565b611a636040519182611412565b8281528092611a74601f1991611433565b0190602036910137565b91909160019060005b8151811015611add576001600160f81b031980611aa48385611972565b5116908651156108955760208701511614611ac8575b611ac39061189b565b611a87565b91611ad5611ac39161189b565b929050611aba565b50611ae78261166c565b91611af56040519384611412565b808352611b04601f199161166c565b0160005b818110611c765750506000918290835b8351811015611bf9576001600160f81b031980611b358387611972565b5116885115610895578160208a01511614611b5a575b50611b559061189b565b611b18565b96611b72611b6d85849594999899611958565b611a4c565b611b7c88846118c0565b52611b8787836118c0565b50611b9287836118c0565b519560005b8751811015611bd257808a611bb8611bb2611bcd948a611965565b8a611972565b511660001a611bc7828b611972565b5361189b565b611b97565b50969195509650611be491925061189b565b92600182018083116118aa5791611b55611b4b565b509392611c2c919550611c10611b6d878551611958565b611c1a82876118c0565b52611c2581866118c0565b50846118c0565b519160005b8351811015611c6e57611c69906001600160f81b0319611c5a611c54838a611965565b86611972565b511660001a611bc78287611972565b611c31565b509350505090565b806060602080938701015201611b08565b90600091825b8151841015611d75576001600160f81b0319600360fc1b81611caf8786611972565b511610159081611d5a575b5015611d0a57600a908181029181830414901517156118aa57602f19611ce08584611972565b5160f81c0160ff918282116118aa57611d0492611cfe921690611965565b9361189b565b92611c8d565b60405162461bcd60e51b815260206004820152602260248201527f4e6f6e2d6e756d657269632063686172616374657220656e636f756e74657265604482015261321760f11b6064820152608490fd5b603960f81b9150611d6b8685611972565b5116111538611cba565b9192505060648111611d845790565b60405162461bcd60e51b815260206004820152601d60248201527f4e756d626572206f7574206f662065787065637465642072616e67652e0000006044820152606490fdfea26469706673582212206f2e853a8d7666ea26766ca05b0c9e9ee477e80cb79afd0ece0e9c5c4de5ab2264736f6c63430008110033",
  "devdoc": {
    "author": "arjanjohan",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A smart contract for cross-chain quadratic voting developed during EthDam 24. This contract supports various types of funding curves and ensures privacy and security through integration with the Secret Network.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 50,
        "contract": "contracts/Funding.sol:Funding",
        "label": "fundingRounds",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(FundingRound)40_storage)"
      },
      {
        "astId": 53,
        "contract": "contracts/Funding.sol:Funding",
        "label": "roundIds",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/Funding.sol:Funding",
        "label": "gatewayContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IGateway)2698"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IGateway)2698": {
        "encoding": "inplace",
        "label": "contract IGateway",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(FundingRound)40_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Funding.FundingRound)",
        "numberOfBytes": "32",
        "value": "t_struct(FundingRound)40_storage"
      },
      "t_mapping(t_uint256,t_struct(Project)17_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Funding.Project)",
        "numberOfBytes": "32",
        "value": "t_struct(Project)17_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FundingRound)40_storage": {
        "encoding": "inplace",
        "label": "struct Funding.FundingRound",
        "members": [
          {
            "astId": 19,
            "contract": "contracts/Funding.sol:Funding",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21,
            "contract": "contracts/Funding.sol:Funding",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 23,
            "contract": "contracts/Funding.sol:Funding",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 25,
            "contract": "contracts/Funding.sol:Funding",
            "label": "curveType",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 30,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projects",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Project)17_storage)"
          },
          {
            "astId": 33,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projectIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 35,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalContributions",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 37,
            "contract": "contracts/Funding.sol:Funding",
            "label": "isOpen",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 39,
            "contract": "contracts/Funding.sol:Funding",
            "label": "isDistributed",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Project)17_storage": {
        "encoding": "inplace",
        "label": "struct Funding.Project",
        "members": [
          {
            "astId": 6,
            "contract": "contracts/Funding.sol:Funding",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8,
            "contract": "contracts/Funding.sol:Funding",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 10,
            "contract": "contracts/Funding.sol:Funding",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 12,
            "contract": "contracts/Funding.sol:Funding",
            "label": "projectAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          },
          {
            "astId": 14,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalContributions",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16,
            "contract": "contracts/Funding.sol:Funding",
            "label": "totalSquareRoots",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}